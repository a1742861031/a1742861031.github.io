<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leetcode第十一题</title>
    <link href="/2021/05/16/leetcode%E7%AC%AC%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <url>/2021/05/16/leetcode%E7%AC%AC%E5%8D%81%E4%B8%80%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Leetcode第11题-乘水最多的容器"><a href="#Leetcode第11题-乘水最多的容器" class="headerlink" title="Leetcode第11题 乘水最多的容器"></a>Leetcode第11题 乘水最多的容器</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器。</p><p><strong>示例 1：</strong></p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="img"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：[<span class="hljs-number">1,8,6,2</span>,<span class="hljs-number">5,4,8,3</span>,<span class="hljs-number">7</span>]<br>输出：<span class="hljs-number">49</span> <br>解释：图中垂直线代表输入数组 [<span class="hljs-number">1,8,6,2</span>,<span class="hljs-number">5,4,8,3</span>,<span class="hljs-number">7</span>]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 <span class="hljs-number">49</span>。<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">输入：<span class="hljs-built_in">height</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：height = <span class="hljs-string">[4,3,2,1,4]</span><br>输出：<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">输入：<span class="hljs-built_in">height</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>n = height.length<br>2 &lt;= n &lt;= 3 * 104<br>0 &lt;= height[i] &lt;= 3 * 104</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>典型的双指针题目，这里影响盛水体积的因素有两个，长和宽，即数组下标距离以及对应的较小的数组值。</p><p>所以，应该有两个指针分别指向数组开头以及数组末尾，每个轮次应该移动数组值较小的那个指针</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> maxArea = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">height</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> j = height.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (height.length == <span class="hljs-number">0</span> || height.length == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> res;<br><br>    <span class="hljs-keyword">while</span>(i&lt;=j)<br>    &#123;<br>        <span class="hljs-keyword">let</span> temp;<br>        <span class="hljs-keyword">if</span>(height[j]&gt;height[i])<br>        &#123;<br>            temp = height[i];<br>            i++<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            temp = height[j]<br>            j--;<br>        &#125;<br>        result_oneTrun = (j-i+<span class="hljs-number">1</span>)*temp;<br>        <span class="hljs-keyword">if</span>(res&lt;result_oneTrun)<br>            res = result_oneTrun<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第五题</title>
    <link href="/2021/05/11/leetcode%E7%AC%AC%E4%BA%94%E9%A2%98/"/>
    <url>/2021/05/11/leetcode%E7%AC%AC%E4%BA%94%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="leetcode-第五题-最长回文子串"><a href="#leetcode-第五题-最长回文子串" class="headerlink" title="leetcode 第五题 最长回文子串"></a>leetcode 第五题 最长回文子串</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>示例 1:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;babad&quot;</span><br>输出：<span class="hljs-string">&quot;bab&quot;</span><br>解释：<span class="hljs-string">&quot;aba&quot;</span> 同样是符合题意的答案。<br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;cbbd&quot;</span><br>输出：<span class="hljs-string">&quot;bb&quot;</span><br></code></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">输入：s = <span class="hljs-comment">&quot;a&quot;</span><br>输出：<span class="hljs-comment">&quot;a&quot;</span><br></code></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;ac&quot;</span><br>输出：<span class="hljs-string">&quot;a&quot;</span><br></code></pre></td></tr></table></figure><blockquote><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母（大写和/或小写）组成</li></ul></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>1、如果字符串长度小于2，则直接返回原字符串</p><p>2、定义两个变量，一个start存储当前找到的最大回文字符串的起始位置，另一个maxLength记录字符串的长度(终止位置就是start+maxLength)</p><p>3、创建一个helper function(辅助函数)，该辅助函数的功能有：判断左边和右边是否越界、同时让左边的字符是否等于右边的字符当满足以上条件时，则更新字符串最大长度以及最大字符串的起始位置。然后将left–,right++,继续判断，直到不满足上述三个条件之一</p><p>4、遍历字符串，每个位置调用两遍辅助函数，第一遍检查i-1，i+1（abcba），第二遍检查i，i+1（abba）</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// leetcode 第五题 最长回文子串</span><br><span class="hljs-keyword">var</span> longestPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (s.length &lt; <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> s;<br>    <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> maxLength = <span class="hljs-number">1</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">expandFromCenter</span>(<span class="hljs-params">left, right</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(left,right);<br>        <span class="hljs-built_in">console</span>.log(s[left],s[right]);<br>        <span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; s.length &amp;&amp; s[left] == s[right]) &#123;<br>            <span class="hljs-keyword">if</span>(right-left+<span class="hljs-number">1</span>&gt;maxLength)<br>            &#123;<br>                start = left;<br>                maxLength = right-left+<span class="hljs-number">1</span>;<br>            &#125;<br>            left--;<br>            right++;<br>        &#125;<br>      <br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>        expandFromCenter(i - <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);<br>        expandFromCenter(i, i + <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.substring(start,start+maxLength)<br>&#125;;<br><span class="hljs-built_in">console</span>.log(longestPalindrome(<span class="hljs-string">&quot;babad&quot;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第三题</title>
    <link href="/2021/05/10/leetcode%E7%AC%AC%E4%B8%89%E9%A2%98/"/>
    <url>/2021/05/10/leetcode%E7%AC%AC%E4%B8%89%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="leetcode-第三题-无重复字符的最长子串"><a href="#leetcode-第三题-无重复字符的最长子串" class="headerlink" title="leetcode 第三题 无重复字符的最长子串"></a>leetcode 第三题 无重复字符的最长子串</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;abcabcbb&quot;</span><br><span class="hljs-section">输出: 3 </span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;bbbbb&quot;</span><br><span class="hljs-section">输出: 1</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></code></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;pwwkew&quot;</span><br><span class="hljs-section">输出: 3</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br>     请注意，你的答案必须是 子串 的长度，<span class="hljs-string">&quot;pwke&quot;</span> 是一个子序列，不是子串。<br></code></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;&quot;</span><br><span class="hljs-section">输出: 0</span><br></code></pre></td></tr></table></figure><blockquote><p>提示：<br>0 &lt;= s.length &lt;= 5 * 104<br>s 由英文字母、数字、符号和空格组成</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>采用滑动窗口的一个思路 sliding window</p><p>1、 创建两个指针，并且两个指针都指向字符串s的开头，创建一个Set，maxLength=0</p><p>2、通过指针 i 遍历字符串，当 set 中不含 s[i ]时，set中添加 s[i]，并且set长度与maxLength进行比较，实时更新maxLength的值</p><p>3、当set中含s[i]时，set中删除s[j]并且j右移，直到set中不含s[i]</p><p>4、 遍历字符串一遍后的结果即是最大长度</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lengthOfLongestSubstring = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> occ = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>    <span class="hljs-keyword">const</span> n = s.length;<br>    <span class="hljs-keyword">let</span> maxLength = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> i =  j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// 当set中不含s[i]时，将s[i]添加到set中，并更新最大长度</span><br>        <span class="hljs-keyword">if</span> (!occ.has(s[i])) &#123;<br>            occ.add(s[i]);<br>            maxLength = <span class="hljs-built_in">Math</span>.max(maxLength, occ.size)<br>        &#125;<br>        <span class="hljs-comment">// 当set中含有s[i]时，将s[j]进行删除</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (occ.has(s[i])) &#123;<br>                occ.delete(s[j])<br>                j++;<br>            &#125;<br>            occ.add(s[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxLength;<br> &#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>希尔排序算法</title>
    <link href="/2021/03/20/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/03/20/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="shell排序"><a href="#shell排序" class="headerlink" title="shell排序"></a>shell排序</h2><p>shell是直接插入排序的改进方法，shell排序的思想是把待排的元素按照增量进行分组，对每一组分别进行排序，每次分组排序完成后增量减半，待增量减小为1时，排序结束</p><p><img src="https://ae01.alicdn.com/kf/U45806cdfee134a4386c97f84b17093b9F.jpg"></p><p>以上图为例，我们取增量为5，第一趟被分为5组，每一组直接插入排序</p><p>第二次增量减半，被分为2组，每一组也是直接插入排序</p><p>第三次增量减半，为1，这是整个称为一组，直接进行插入排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> d = n / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d; i++)            <span class="hljs-comment">//通过d进行分组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + d; j &lt; n; j += d) <span class="hljs-comment">//每个组进行插入排序</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> temp = arr[j];<br>                <span class="hljs-keyword">int</span> k;<br>                <span class="hljs-keyword">for</span> (k = j - d; k &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[k] &gt; temp; k = k - d)<br>                    arr[k + d] = arr[k];<br>                arr[k + d] = temp;<br>            &#125;<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">break</span>;<br>        d /= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终的代码如上</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue知识点(持续更新)</title>
    <link href="/2021/03/13/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/13/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="初识Vue响应式"><a href="#初识Vue响应式" class="headerlink" title="初识Vue响应式"></a>初识Vue响应式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data  = &#123;&#125;;<br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;Vue&#x27;</span>;<br><span class="hljs-built_in">Object</span>.defineProperty(data,<span class="hljs-string">&#x27;name&#x27;</span>,&#123;<br>    get:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;get&#x27;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;,<br>    set:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newVlaue</span>)</span><br><span class="hljs-function">    </span>&#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我的值被修改啦&quot;</span>);<br>       name = newVlaue;<br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(data.name);<br>data.name = <span class="hljs-string">&#x27;bobo&#x27;</span>; <span class="hljs-comment">//在修改的时候数据被劫持了，所以这是应该通过set函数为其改变值，如果set里面不操作这里的值不会被改变</span><br><span class="hljs-built_in">console</span>.log(data.name);<br></code></pre></td></tr></table></figure><p>通过<code>Object.defineProperty</code>，为对象添加属性，或改变对象的现有属性，里面定义两个字段，<code>get</code>和<code>set</code>，当要获取数据值时会执行get(),当值发送修改时会执行set()函数，</p><blockquote><p>在创建Vue实例时，vue会遍历data选项的属性，利用<code>Object.defineProperty</code>为属性添加getter和setter对数据进行劫持，并在内部追踪依赖，在属性被访问或者被修改时及时通知</p><p>每一个组件实例都会有响应的watcher实例，会在属性被渲染时记载所以数据属性，之后依赖被改动时，setter 方法会通知依赖与此 data 的 watcher 实例重新计算（派发更新）,从而使它关联的组件重新渲染。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ud01ef74bff2e4475b6f5b2ebeb8d6ac2H.jpg"></p><h3 id="Vue父子组件通信"><a href="#Vue父子组件通信" class="headerlink" title="Vue父子组件通信"></a>Vue父子组件通信</h3><h4 id="父组件与子组件进行通信：使用props"><a href="#父组件与子组件进行通信：使用props" class="headerlink" title="父组件与子组件进行通信：使用props"></a>父组件与子组件进行通信：使用props</h4><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h1&gt;父亲&lt;&#x2F;h1&gt;<br>&lt;!--第一个:message &#x3D; &quot;message&quot;是将message传递给子组件--&gt;<br>    &lt;Child :message &#x3D; &quot;message&quot;&gt;&lt;&#x2F;Child&gt;<br>&lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>import Child from &#39;.&#x2F;Child.vue&#39;;<br>export default &#123;<br>  name: &#39;App&#39;,<br>  components: &#123;<br>    Child,<br>  &#125;,<br>  data()&#123;<br>    return&#123;<br>      message:&#39;hello child&#39;<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;&#x2F;script&gt;<br><br></code></pre></td></tr></table></figure><p>在父组件中引入子组件，然后在子组件的标签上绑定属性值，这就是要传递给子组件的数据</p><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h1&gt;孩子&lt;&#x2F;h1&gt;<br>  &lt;div&gt;父组件对我说：&#123;&#123;message&#125;&#125;&lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props:&#123;<br>      message:&#123;<br>        type:String,<br>        default:()&#x3D;&gt;&#123;<br>          return &#39;&#39;<br>        &#125;<br>      &#125;<br>  &#125;,<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>在子组件上通过props属性做数据的接收</p><p>详细步骤</p><blockquote><p>1、在父组件中引入需要通信的子组件</p><p><code>import Child from &#39;./Child.vue&#39;;</code></p><p>2、在父组件的components中注册该组件</p><p> <code>components: &#123;     Child,   &#125;,</code></p><p>3、 在父组件的<code>template</code>中使用子组件，并使用直接属性名属性值进行传递</p><p><code>    &lt;Child :message = &quot;message&quot;&gt;&lt;/Child&gt;</code></p><p>4、在对应的子组件中通过props属性接收传递过来的参数</p><p><code> props:&#123;       message:&#123;         type:String,         default:()=&gt;&#123;           return &#39;&#39;         &#125;       &#125;   &#125;,</code></p></blockquote><h4 id="子组件向父组件传值，利用-emit向父组件传递一个事件"><a href="#子组件向父组件传值，利用-emit向父组件传递一个事件" class="headerlink" title="子组件向父组件传值，利用$emit向父组件传递一个事件"></a>子组件向父组件传值，利用$emit向父组件传递一个事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h1&gt;孩子&lt;&#x2F;h1&gt;<br>  &lt;button @click&#x3D;&quot;say&quot;&gt;传递给子组件值&lt;&#x2F;button&gt;<br>&lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data()&#123;<br>    return&#123;<br>      childSay:&#39;Hello Parent&#39; &#x2F;&#x2F;定义发送给父组件的数据<br>    &#125;<br>&#125;,<br>  methods:&#123;<br>    say()&#123;<br>      this.$emit(&#39;say&#39;,this.childSay);&#x2F;&#x2F;通过$emit将数据传递给子组件<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>通过$emit方法，里面的第一个参数是调用的函数名，第二个参数是要传递的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h1&gt;父亲&lt;&#x2F;h1&gt;<br>&lt;!-- 第二个是父组件监听子组件触发的say方法，调用自己的parentSay方法 --&gt;<br>    &lt;Child @say&#x3D;&quot;parentSay&quot;&gt;&lt;&#x2F;Child&gt; <br>&lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>import Child from &#39;.&#x2F;Child.vue&#39;;<br>export default &#123;<br>  name: &#39;App&#39;,<br>  components: &#123;<br>    Child,<br>  &#125;,<br>  methods:&#123;<br>    parentSay(msg)&#123;<br>      console.log(&#96;我是子组件传来的消息：$&#123;msg&#125;&#96;); &#x2F;&#x2F;接收子组件传来的消息<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>在父组件中监听子组件的@say方法，然后调用自己的方法，实参就是子组件传递过来的参数</p><p>详细步骤</p><blockquote><p>1、在子组件中自定义方法，并通过$emit()将事件和参数传递给父组件</p><p>2、父组件监听子组件触发的say方法，调用自己的<code>parentSay</code>方法</p><p>3、父组件对接收到的事件和数据做出响应</p><p><code> parentSay(msg)&#123;       console.log(</code>我是子组件传来的消息：${msg}<code>); //接收子组件传来的消息     &#125;</code></p></blockquote><h3 id="父组件调用子组件方法"><a href="#父组件调用子组件方法" class="headerlink" title="父组件调用子组件方法"></a>父组件调用子组件方法</h3><p>方法一：</p><p>在使用子组件时，给子组件加一个<code>ref</code>引用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;page1 :<span class="hljs-attribute">price</span>=<span class="hljs-string">&quot;price&quot;</span> @<span class="hljs-attribute">downPrice</span>=<span class="hljs-string">&quot;downPrice&quot;</span> <span class="hljs-attribute">ref</span>=<span class="hljs-string">&quot;page1&quot;</span>&gt;&lt;/page1&gt;<br></code></pre></td></tr></table></figure><p>父组件通过<code>this.$refs</code>即可找到该子组件，也可以操作子组件的方法</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">this</span>.$<span class="hljs-built_in">ref</span>s.page1.子组件方法<br></code></pre></td></tr></table></figure><p>方法二:</p><p>通过<code>$children</code>,可以获取到所有子组件的集合</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$children[<span class="hljs-number">0</span>].某个方法<br></code></pre></td></tr></table></figure><h3 id="子组件调用父组件方法"><a href="#子组件调用父组件方法" class="headerlink" title="子组件调用父组件方法"></a>子组件调用父组件方法</h3><p>通过 <code>$parent</code>可以找到父组件，进而调用其方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$parent.父组件方法<br></code></pre></td></tr></table></figure><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>Vuex是适用于一种状态管理工具，如果组件之间需要很对传参的话，是用传统的方式很难管理和维护项目，这时就需要vuex进行状态管理</p><p>Vuex的成员列表</p><ul><li>state 存放状态</li><li>mutations state成员操作</li><li>getter加工成员给外界</li><li>actions异步操作</li><li>modules 模态化状态管理</li></ul><h4 id="actions-异步操作"><a href="#actions-异步操作" class="headerlink" title="actions 异步操作"></a>actions 异步操作</h4><p>Vue组件如果调用某个Vuex的方法过程需要向后端请求或是出现异步操作时，需要<code>dispath</code> Vuex中的action的方法，以保证数据的同步，</p><p>如果没有异步操作，就可以直接在组件内提交状态的<code>Mutations</code>中编写方法达成对<code>state</code>成员的操作</p><p>由于直接在<code>mutation</code>方法中进行异步操作，将会引起数据失效。所以提供了Actions来专门进行异步操作，最终提交<code>mutation</code>方法。</p><p><code>Actions</code>中的方法有两个默认参数</p><ul><li><code>context</code> 上下文(相当于箭头函数中的this)对象</li><li><code>payload</code> 挂载参数</li></ul><p>例如，我们在两秒中后执行<code>2.2.2</code>节中的<code>edit</code>方法</p><p>由于<code>setTimeout</code>是异步操作，所以需要使用<code>actions</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">actions:&#123;<br>    <span class="hljs-function"><span class="hljs-title">aEdit</span>(<span class="hljs-params">context,payload</span>)</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            context.commit(<span class="hljs-string">&#x27;edit&#x27;</span>,payload)<br>        &#125;,<span class="hljs-number">2000</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>组件中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&#x27;aEdit&#x27;</span>,&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">15</span>&#125;)<br></code></pre></td></tr></table></figure><p>链接：<a href="https://www.jianshu.com/p/2e5973fe1223">https://www.jianshu.com/p/2e5973fe1223</a></p><h4 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h4><p><code>mutations</code>是操作数据的方法的集合，比如对数据进行修改，增加，删除等</p><p><code>mutations</code>方法都有默认的形参：</p><p>(<strong>[state]</strong> <strong>[,payload]</strong>)</p><ul><li><code>state</code>是当前<code>VueX</code>对象中的<code>state</code></li><li><code>payload</code>是该方法在被调用时传递参数使用的</li></ul><p>例如，我们编写一个方法，当被执行时，能把下例中的name值修改为<code>&quot;jack&quot;</code>,我们只需要这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>Vue.use(Vuex)<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex.store(&#123;<br>    state:&#123;<br>        name:<span class="hljs-string">&#x27;helloVueX&#x27;</span><br>    &#125;,<br>    mutations:&#123;<br>        <span class="hljs-comment">//es6语法，等同edit:funcion()&#123;...&#125;</span><br>        <span class="hljs-function"><span class="hljs-title">edit</span>(<span class="hljs-params">state</span>)</span>&#123;<br>            state.name = <span class="hljs-string">&#x27;jack&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>如何提交值</p><p><code>this.$store.commit(&#39;edit&#39;,&#123;age:15,sex:&#39;男&#39;&#125;)</code></p><p>增删state成员</p><p><code>Vue.set(state,&quot;age&quot;,15)</code> 新增成员</p><p><code>Vue.delete(state,age)</code> 删除成员</p><h4 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h4><p>对state中的成员加工后传递给外界</p><p>Getter中的方法有两个默认参数</p><ul><li>state：当前Vue对象的状态对象</li><li>getter：当前getter对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">getters:&#123;<br>    <span class="hljs-function"><span class="hljs-title">nameInfo</span>(<span class="hljs-params">state</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:&quot;</span>+state.name<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">fullInfo</span>(<span class="hljs-params">state,getters</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> getters.nameInfo+<span class="hljs-string">&#x27;年龄:&#x27;</span>+state.age<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$store.getters.fullInfo <span class="hljs-comment">//组件中调用方法</span><br></code></pre></td></tr></table></figure><h4 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h4><p>当项目庞大，状态非常多时，可以采用模块化管理模式。Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 <code>state、mutation、action、getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">store:.<br>│  actions.js<br>│  getters.js<br>│  index.js<br>│  mutations.js<br>│  mutations_type.js   ##该项为存放mutaions方法常量的文件，按需要可加入<br>│<br>└─modules<br>        Astore.js<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅拷贝雨深拷贝</title>
    <link href="/2021/03/11/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/03/11/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>实现方式</p><h4 id="通过遍历对象"><a href="#通过遍历对象" class="headerlink" title="通过遍历对象"></a>通过遍历对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-keyword">var</span> obj2 = &#123;&#125;;<br><br><span class="hljs-keyword">for</span>( <span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj1)<br>    obj2[key] = obj1[key];<br><br><span class="hljs-built_in">console</span>.log(obj1);<br><span class="hljs-built_in">console</span>.log(obj2);<br></code></pre></td></tr></table></figure><blockquote><p>这里有一点要注意，这里的key是变量，通过变量访问属性值时，只能通过<code>obj[key]</code>的形式，而不能通过<code>obj.key</code>的形式</p></blockquote><h4 id="通过展开运算符"><a href="#通过展开运算符" class="headerlink" title="通过展开运算符"></a>通过展开运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-keyword">var</span> obj2 = &#123;...obj1&#125;;<br><br><br><span class="hljs-built_in">console</span>.log(obj1);<br><span class="hljs-built_in">console</span>.log(obj2);<br></code></pre></td></tr></table></figure><blockquote><p>​        但是浅拷贝存在问题，由于像Array，Function，Object这种引用类型值，它的实际值是存在<code>堆</code>内存中的，浅拷贝拷贝的只是它的引用，不是开辟新的空间去存放拷贝过来的引用类型值。当有一方去改变引用类型值的内容时，另一方也会改变</p></blockquote><blockquote><p>基本数据类型拷贝还是正常的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-keyword">var</span> obj2 = &#123;...obj1&#125;;<br><br>obj1.arr[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(obj1);<br><span class="hljs-built_in">console</span>.log(obj2);<br></code></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/U2892943fcb93470c88a5d17ad3cd0681S.jpg"></p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p><img src="https://ae01.alicdn.com/kf/U5fb657f733b44f66bd1f5dceb449d5da2.jpg"></p><p>深拷贝 就是要实现如上图的这种效果，指向不同的堆内存中的值</p><h4 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//深克隆</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> newObj = <span class="hljs-keyword">new</span> obj.constructor;<span class="hljs-comment">//实例的构造函数是属于它的类，这样既能克隆实例，也能克隆对象</span><br>    <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>            <span class="hljs-keyword">if</span> (obj[key] &amp;&amp; (<span class="hljs-keyword">typeof</span> obj[key]) === <span class="hljs-string">&#x27;object&#x27;</span>) <span class="hljs-comment">//判断属性值是否为引用类型值</span><br>                newObj[key] = deepClone(obj[key]); <span class="hljs-comment">//是的话则递归调用深克隆</span><br>            <span class="hljs-keyword">else</span><br>                newObj[key] = obj[key];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newObj;<br>&#125;<br>obj1 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br>obj2 = deepClone(obj1);<br><span class="hljs-built_in">console</span>.log(obj1, obj2);<br></code></pre></td></tr></table></figure><h4 id="JSON方法"><a href="#JSON方法" class="headerlink" title="JSON方法"></a>JSON方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj</span>)</span><br><span class="hljs-function"></span>&#123;<br>    newObj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(obj));<br>    <span class="hljs-keyword">return</span> newObj;<br>&#125;<br>obj1 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br>obj2 = deepClone(obj1);<br><span class="hljs-built_in">console</span>.log(obj1, obj2);<br></code></pre></td></tr></table></figure><p>补充，<code>JSON.stringify</code>和<code>JSON.parse</code></p><blockquote><p><code>JSON.stringify</code>可以将js对象转换成字符串，而<code>JSON.parse</code>可以将字符串形式转化成对象，前提是要符合JSON格式</p><p>这两个方法用处有很多，例如本地存储只能存储字符串，如果要存储对象，可以将其进行转换，要用时在转换回来</p><p>数组，对象，日期均可哦</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>节流与防抖</title>
    <link href="/2021/03/10/%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/"/>
    <url>/2021/03/10/%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/</url>
    
    <content type="html"><![CDATA[<h2 id="节流与防抖"><a href="#节流与防抖" class="headerlink" title="节流与防抖"></a>节流与防抖</h2><p>参与于一篇博客<a href="https://segmentfault.com/a/1190000018428170">https://segmentfault.com/a/1190000018428170</a></p><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>作者通过监听滚动条的位置这个函数说起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showTop</span>  (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> scrollTop = <span class="hljs-built_in">document</span>.body.scrollTop || <span class="hljs-built_in">document</span>.documentElement.scrollTop;<br>　　<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;滚动条位置：&#x27;</span> + scrollTop);<br>&#125;<br><span class="hljs-built_in">window</span>.onscroll  = showTop<br></code></pre></td></tr></table></figure><p>上面这个函数可以实现实时监听滚动条的位置，但是触发的频率是在是太高了</p><p><img src="https://ae01.alicdn.com/kf/U87abc8f9b91d4ccaa8bc759928e9a3df0.jpg"></p><p>如果是在真实业务中，例如百度搜索提示按照这个频率的话，后台服务器肯定就崩溃了</p><p>解决方案：在第一次触发事件时，不立即执行函数，而是给出一个期限值</p><ul><li>在200ms之内如果没有再次触发事件，则执行后面的函数</li><li>如果200ms内触发事件，则计时器清零，重新开始计时</li></ul><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* fn [function] 需要防抖的函数</span><br><span class="hljs-comment">* delay [number] 毫秒，防抖期限值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn,delay</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span> <span class="hljs-comment">//借助闭包</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(timer)&#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer) <span class="hljs-comment">//进入该分支语句，说明当前正在一个计时过程中，并且又触发了相同事件。所以要取消当前的计时，重新开始计时</span><br>            timer = <span class="hljs-built_in">setTimeout</span>(fn,delay) <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(fn,delay) <span class="hljs-comment">// 进入该分支说明当前并没有在计时，那么就开始一个计时</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>综上：<strong>防抖的主要作用，就是在事件被连续触发时，通过防抖让事件在一段时间内只会被触发一次</strong></p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>如果在限定事件段内，不断触发滚动事件，那么原理上这个事件可能永远也不会执行</p><p>解决思路：通过设计类似控制阀门一样定期开放的函数，<strong>也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活</strong></p><p><strong>效果</strong>：如果短时间内大量触发同一事件，那么<strong>在函数执行一次之后，该函数在指定的时间期限内不再工作</strong>，直至过了这段时间才重新生效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn,delay</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> valid = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">if</span>(!valid)&#123;<br>           <span class="hljs-comment">//休息时间 暂不接客</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <br>       &#125;<br>       <span class="hljs-comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span><br>        valid = <span class="hljs-literal">false</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn()<br>            valid = <span class="hljs-literal">true</span>;<br>        &#125;, delay)<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 请注意，节流函数并不止上面这种实现方案,</span><br><span class="hljs-comment">   例如可以完全不借助setTimeout，可以把状态位换成时间戳，然后利用时间戳差值是否大于指定间隔时间来做判定。</span><br><span class="hljs-comment">   也可以直接将setTimeout的返回的标记当做判断条件-判断当前定时器是否存在，如果存在表示还在冷却，并且在执行fn之后消除定时器表示激活，原理都一样</span><br><span class="hljs-comment">    */</span><br><br><span class="hljs-comment">// 以下照旧</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showTop</span>  (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> scrollTop = <span class="hljs-built_in">document</span>.body.scrollTop || <span class="hljs-built_in">document</span>.documentElement.scrollTop;<br>　　<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;滚动条位置：&#x27;</span> + scrollTop);<br>&#125;<br><span class="hljs-built_in">window</span>.onscroll = throttle(showTop,<span class="hljs-number">1000</span>) <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js原型与原型链</title>
    <link href="/2021/03/10/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2021/03/10/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="、JS原型与原型链"><a href="#、JS原型与原型链" class="headerlink" title="、JS原型与原型链"></a>、JS原型与原型链</h2><h3 id="原型上定义了一些公用属性和方法，利用这个原型创建的新对象实例会共享原型所以方法和属性"><a href="#原型上定义了一些公用属性和方法，利用这个原型创建的新对象实例会共享原型所以方法和属性" class="headerlink" title="原型上定义了一些公用属性和方法，利用这个原型创建的新对象实例会共享原型所以方法和属性"></a>原型上定义了一些公用属性和方法，利用这个原型创建的新对象实例会共享原型所以方法和属性</h3><p>创建原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> Person = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)</span>&#123; <span class="hljs-comment">//构造函数</span><br>        <span class="hljs-built_in">this</span>.name = name;<br> &#125;;<br><span class="hljs-comment">//添加原型方法</span><br>Person.prototype.sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot; hello&quot;</span>);<br>&#125;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;bobo&#x27;</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Jinlong&#x27;</span>);<br>person1.sayHello();<span class="hljs-comment">//输出bobo hello</span><br>person2.sayHello();<span class="hljs-comment">//输出jinlong hello</span><br><br></code></pre></td></tr></table></figure><p>通过上面的例子可以看出，创建的两个对象拥有公共的方法sayHello(),这个定义在原型上的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(person1.__proto__ === person2.__proto__);<span class="hljs-comment">//结果为true</span><br><span class="hljs-built_in">console</span>.log(Person.prototype === person1.__proto__);<span class="hljs-comment">//结果为true</span><br></code></pre></td></tr></table></figure><p>所有创建的对象都有一个<code>__proto__</code>属性，指向构造函数的<code>prototype</code></p><p><img src="https://ae01.alicdn.com/kf/U93f265bfaa9040dcb50c28c979ce4674X.jpg"></p><p><img src="https://ae01.alicdn.com/kf/U64c20215af5e4bc8944fa17e4fb08f3bE.jpg"></p><p>注意对象原型上也有<code>__proto__</code>属性,指向的是Oject</p><p><img src="https://ae01.alicdn.com/kf/Ud22bcd1b2bcb404393977ee380d4c62f3.jpg"></p><p>普通函数也是如此</p><p><img src="https://ae01.alicdn.com/kf/U3b53f224fc6642f683c72efa0af18c16l.jpg"></p><p>原型链图，原型又有一个constructor属性指回构造函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Person<span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>prototype.constructor <span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>我们知道，原型也是一个对象，所以按之前的说法，所有对象都有<code>__proto</code>属性，原型也不例外,原型链主要解决的是继承问题</p><p><img src="https://ae01.alicdn.com/kf/U843410139ca04f23a711ac22b4ec65baF.jpg"></p><p>我们可以发现，原型的<code>__proto__</code>属性指向的是构造函数<code>Object</code>的<code>prototype</code></p><p>所谓的原型链，就是一个对象使用方法或者属性，如果在对象上没有找到，则在它的原型上去找，如果还是找不到，则在原型的原型上去找，最终找到</p><p><code>Object.prototype</code>上，得到的为<code>null</code>，就不继续找了，返回<code>undefined</code></p><p><img src="https://ae01.alicdn.com/kf/U7e2eb59231874bd89d3f6e1a9c2388ccV.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>前端知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax请求的5步</title>
    <link href="/2021/03/09/ajax%E8%AF%B7%E6%B1%82%E7%9A%845%E6%AD%A5/"/>
    <url>/2021/03/09/ajax%E8%AF%B7%E6%B1%82%E7%9A%845%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="AJAX请求的五步"><a href="#AJAX请求的五步" class="headerlink" title="AJAX请求的五步"></a>AJAX请求的五步</h2><p>今天做笔试题的时候连这道题都忘了，哎，真的是猴子扳苞谷</p><h3 id="1、创建异步对象"><a href="#1、创建异步对象" class="headerlink" title="1、创建异步对象"></a>1、创建异步对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br></code></pre></td></tr></table></figure><h3 id="2、设置回调函数"><a href="#2、设置回调函数" class="headerlink" title="2、设置回调函数"></a>2、设置回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.onreadystatechange = callback;<br></code></pre></td></tr></table></figure><h3 id="3、设置请求的参数-与服务端建立连接"><a href="#3、设置请求的参数-与服务端建立连接" class="headerlink" title="3、设置请求的参数,与服务端建立连接"></a>3、设置请求的参数,与服务端建立连接</h3><p>这里的参数包括请求的方法以及请求的地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.open = (<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-string">&quot;http://jsonplaceholder/post&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="4、发送请求"><a href="#4、发送请求" class="headerlink" title="4、发送请求"></a>4、发送请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.send();<br></code></pre></td></tr></table></figure><h3 id="5、判断响应状态，对响应数据做响应的处理"><a href="#5、判断响应状态，对响应数据做响应的处理" class="headerlink" title="5、判断响应状态，对响应数据做响应的处理"></a>5、判断响应状态，对响应数据做响应的处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.readyStateChange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(xhr.readyState == <span class="hljs-number">4</span>)<br>     &#123;<br>         <span class="hljs-keyword">if</span>(xhr.status&gt;=<span class="hljs-number">200</span>&amp;&amp;xhr.status&lt;<span class="hljs-number">300</span>)<br>            &#123;  <br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;数据返回成功&quot;</span>);<br>                <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>            &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见排序算法</title>
    <link href="/2021/03/09/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2021/03/09/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>排序算法是算法的入门，下面介绍几种常见的排序算法</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序，顾名思义可以看成是汽水的泡泡从底层往上面冒的过程，每一轮结束后，将一轮下来大（小）的放在最后面，几轮就来，就成有序的了</p><p><img src="https://ae01.alicdn.com/kf/Ub48380d248b34d9b88a26b2a29f44914g.jpg"><br>5比8小，所以不交换，8比6大，所以要交换</p><p>8比3大，所以要交换</p><p><img src="https://ae01.alicdn.com/kf/U25f9cf892843416183b1cc7e22d1c6daB.jpg"></p><p>。。。。。</p><p>经过这样大数不断往后排，数组的最后一个元素就是9啦</p><p><img src="https://ae01.alicdn.com/kf/Ud0ede3d7118c468b99e671ae963b0597P.jpg"><br>这样经过几轮下来，形成有序数组</p><p><img src="https://ae01.alicdn.com/kf/U45d24e127abb42adb821c9e8a61fba34B.jpg"><br>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buddleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-keyword">int</span> temp;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++) <span class="hljs-comment">//需要这样重复多少趟 </span><br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n<span class="hljs-number">-1</span>-i;j++) <span class="hljs-comment">// 没这样一趟需要比较多少次 </span><br><span class="hljs-keyword">if</span>(a[j]&gt;a[j+<span class="hljs-number">1</span>]) <span class="hljs-comment">//按照升序排，当前数大于后面的一个数，则交换</span><br>&#123;<br>temp = a[j];<br>a[j] = a[j+<span class="hljs-number">1</span>];<br>a[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>原理和冒泡排序差不多，需要比较i轮</p><p>选择排序（Selection sort）是一种简单直观的<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5399605">排序算法</a>。它的工作原理是：第一次从待排序的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313">数据元素</a>中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F/1066239">排序</a>是不稳定的排序方法。</p><p><img src="https://ae01.alicdn.com/kf/Ufe6bada7237c40fb9e36c7c44215b586i.jpg"><br>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j,k; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++) <span class="hljs-comment">//需要多少趟 </span><br>&#123;<br>k = i;<br><span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;n;j++) <span class="hljs-comment">//每一趟比较多少次，这样循环结束后可以得到未排序的最小值的下标 </span><br>&#123;<br><span class="hljs-keyword">if</span>(a[j]&lt;a[k]) <span class="hljs-comment">// 如果a[j]&lt;a[k]</span><br>k = j;<span class="hljs-comment">//让下标k等于j</span><br>&#125; <br><span class="hljs-keyword">if</span>(k!=i)<br>&#123;<br><span class="hljs-keyword">int</span> temp = a[i];<br>a[i] = a[k];<br>a[k] = temp;<br>&#125; <br>&#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快排的基本思想：</p><blockquote><p>1、先从队列中取出一个数作为基准数</p><p>2、分区过程，将比基准数大的数放在右边，比基准数小的放在左边</p><p>3、重复1，2步，直到各个区间只有一个数(递归实现)</p></blockquote><p>在这里举个例子</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>72</td><td>6</td><td>57</td><td>88</td><td>60</td><td>42</td><td>83</td><td>73</td><td>48</td><td>85</td></tr></tbody></table><p>我们选择最左边的数72作为基准值</p><p>从右往左扫描，发现48小于基准值72，让a[0] = 72 这是需要一个数填充a[8]</p><p>从左往右扫描，发现88大于基准值，所以让a[8] = 88</p><p>这是从右往左扫，发现55小于基准值，所以让a[3] = 55</p><p>直到i==j，结束扫描</p><p>这是结果为</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>48</td><td>6</td><td>57</td><td>42</td><td>60</td><td>72</td><td>83</td><td>73</td><td>88</td><td>85</td></tr></tbody></table><p>再我们递归调用这个函数，分别对小于基准值的一边和大于基准值的一边进行排序，直到递归结束，我们就可以得到最终的结果</p><p>快速排序的时间复杂度更低，平均为Nlog<code>2</code>N,最坏为n平方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*@author:2460417845@qq.com bobo*/</span><br><span class="hljs-comment">/* Date: Create in 2021-03-10 18:04:37*/</span><br><span class="hljs-comment">/*description:快速排序*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> base = arr[left]; <span class="hljs-comment">//基准值</span><br>    <span class="hljs-keyword">int</span> i = left; <span class="hljs-comment">//保存左下标</span><br>    <span class="hljs-keyword">int</span> j = right;<span class="hljs-comment">//保存右下标</span><br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= base) <span class="hljs-comment">//知道找到小于基准值的那个数</span><br>            j--;<br>        <span class="hljs-keyword">if</span> (i &lt; j)<br>            arr[i++] = arr[j]; <span class="hljs-comment">// 保存那个数</span><br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; base) <span class="hljs-comment">//找到大于基准值的那个数</span><br>            i++;<br>        <span class="hljs-keyword">if</span> (i &lt; j)  <span class="hljs-comment">//用刚才空的那个位置保存这个数</span><br>        &#123;<br>            arr[j--] = arr[i];<br>        &#125;<br>        arr[i] = base; <span class="hljs-comment">//结束循环的那个位置就是基准值应该存放的位置</span><br>        quickSort(arr, left, i - <span class="hljs-number">1</span>); <span class="hljs-comment">//同样排序基准值左边的数</span><br>        quickSort(arr, i + <span class="hljs-number">1</span>, right);<span class="hljs-comment">//同样排序基准值右边的数</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">84</span>, <span class="hljs-number">2</span>&#125;;<br>    quickSort(a, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><img src="https://ae01.alicdn.com/kf/U82d1aebdae9e4a1982525980a97561302.jpg"></p><p>插入排序可以看成是一个斗地主拿牌的过程，先手里有一张牌，拿到的第二张牌如果小于第一章牌则将其放在第一张牌前面，</p><p>再拿第三张牌，将其插入到大小合适的位置</p><p>由于数据的插入比较麻烦，每次重新插入一张牌到合适位置，都要向后移动要插入位置后面的元素，这个选择一种直接依次交换的方式，可以看动图</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*@author:2460417845@qq.com bobo*/</span><br><span class="hljs-comment">/* Date: Create in 2021-03-10 18:40:32*/</span><br><span class="hljs-comment">/*description:*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n ; i++) <span class="hljs-comment">//外层是需要比较的轮次</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = i; j &gt; <span class="hljs-number">0</span>; j--) <span class="hljs-comment">// 从下标为i的数依次与前面进行比较，选择一个合适的位置插入</span><br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j<span class="hljs-number">-1</span>]) <span class="hljs-comment">//应该下标为j前面的数都是排好序了的，如果比较到它不满足这个if判断，直接break结束就好</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> temp;<br>                temp = arr[j];<br>                arr[j] = arr[j<span class="hljs-number">-1</span>];<br>                arr[j<span class="hljs-number">-1</span>] = temp;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>&#125;;<br>    insertSort(a,<span class="hljs-number">7</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端常见面试题总结(持续更新)</title>
    <link href="/2021/03/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h2><h3 id="doctype的作用？"><a href="#doctype的作用？" class="headerlink" title="doctype的作用？"></a>doctype的作用？</h3><p>DOCTYPE是html5标准网页声明，且必须声明在HTML文档的第一行。用来告知浏览器用什么文档标准解析这个文档。</p><p>文档解析类型</p><ul><li>BackCompat：怪异模式，当没有声明DOCTYPE时就是这一模式</li><li>CSS1Compat：标准模式，浏览器使用W3C的标准解析渲染页面</li></ul><blockquote><p>IE8有一种近乎标准模式，基本被淘汰了</p></blockquote><p> 三种模式的区别</p><ul><li>标准模式：页面按照HTML与CSS的定义渲染</li><li>怪异模式：会模拟更旧的浏览器行为</li></ul><h3 id="对HTML语义化的理解？"><a href="#对HTML语义化的理解？" class="headerlink" title="对HTML语义化的理解？"></a>对HTML语义化的理解？</h3><p>元素本身传达了关于标签所包含内容类型的一些信息。看到该标签就知道是什么意思,例如<code>&lt;p&gt;</code>标签就代表段落，<code>&lt;article&gt;</code>代表正文等</p><p>HTML5提供了新的语义元素来定义网页的不同部分例如<code>&lt;header&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;section&gt;</code>、<code>aside</code>、<code>&lt;footer&gt;</code></p><h3 id="HTML5的特性"><a href="#HTML5的特性" class="headerlink" title="HTML5的特性"></a>HTML5的特性</h3><ul><li>文档类型声明为<code>&lt;!DOCTYPE HTML&gt;</code></li><li>标签语义化</li><li>支持对音视频的处理，不再使用flash</li><li>canvas/webGL画图</li><li>webSocket通信</li><li>history API</li><li>地理位置</li></ul><h3 id="src和href的区别"><a href="#src和href的区别" class="headerlink" title="src和href的区别"></a>src和href的区别</h3><ul><li>href：超文本引用，它指向一些网络资源，建立和当前元素或者说是本文档的链接关系。加载它的时候，不会停止对当前文档的处理，浏览器会继续往下走。</li></ul><p>例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;common.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上面所显示的，当浏览器加载到link标签时，会识别这是css文档，并行下载该CSS文档，但不会停止对当前页面后续内容的记载</p><ul><li>src表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。由浏览器在解析src时会停下对后续文档的处理，知道src内容加载完毕,常用在script、img、iframe标签中，建议js文件放在HTML文档的最后面。</li></ul><p>总结：href用于建立页面与引用资源之间的关系，而src会替换当前标签。遇到href,页面会并行加载后续内容;而遇到src浏览器会加载src中内容完毕后才继续往下</p><h3 id="script标签中defer和async的区别"><a href="#script标签中defer和async的区别" class="headerlink" title="script标签中defer和async的区别"></a>script标签中defer和async的区别</h3><ul><li>defer：浏览器指示脚本在文档被解析后执行，script被异步记载后并不会立即执行，而是等待文档被解析完毕后执行</li><li>async：同样是异步加载脚本，区别是脚本加载完毕后立即执行</li></ul><p>上图绿色线代表HTML解析，蓝色线代表<code>&lt;script&gt;</code>加载，而红色线代表<code>&lt;script&gt;</code>执行</p><p>由上图可见<code>&lt;script&gt;</code>标签默认是同步加载的，而defer和async是异步加载，而defer是文档加载完毕后script执行，async是·<code>&lt;script&gt;</code>加载完毕后立即执行</p><h3 id="前端存储方式"><a href="#前端存储方式" class="headerlink" title="前端存储方式"></a>前端存储方式</h3><p>主要是loaclStorage,cookies,sessionStorage、web SQL、indexedDB</p><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>cookie是HTML5前的本地存储方式，兼容性好</p><blockquote><p>特点：</p><p>1、在请求服务器时，浏览器将cookie信息放在请求头中</p><p>2、在响应时，浏览器保存响应头中的Cookie信息</p><p>3、存储大小只有4kb</p><p>4、存储数量有限，一个domain最多20条</p><p>5、不安全，因为在请求头响应头中携带cookie信息</p></blockquote><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><blockquote><p>特点：</p><p>1、声明周期为永久性的，关闭浏览器也不会销毁，除非主动销毁</p><p>2、存储大小更大，一般为5M</p><p>3、以键值对方式存储</p><p>4、只能在同源下访问</p></blockquote><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h4><p>使用方式和localStorage大致相同</p><blockquote><p>特点:</p><p>这里主要说下和localStorage的不同</p><p>1、只能在同一窗口访问</p><p>2、关闭浏览器自动销毁</p></blockquote><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h3 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h3><h4 id="标准盒子模型"><a href="#标准盒子模型" class="headerlink" title="标准盒子模型"></a>标准盒子模型</h4><p>box-sizing:content-box</p><p><img src="https://ae01.alicdn.com/kf/U83afe781c7e748cc8b664200e99fe14aC.jpg"></p><p>从上图可以看到标准 <strong><em>*</em>*W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。*\</strong>***</p><p>即指定元素的宽和高并不包括border和padding</p><blockquote><p>元素所占据的宽度 = margin-left+border-left+padding-left+width+padding-right+border-right+margin-right</p></blockquote><h4 id="怪异盒子模型-IE盒子模型"><a href="#怪异盒子模型-IE盒子模型" class="headerlink" title="怪异盒子模型(IE盒子模型)"></a>怪异盒子模型(IE盒子模型)</h4><p>box:sizing:border-box</p><p><img src="https://ae01.alicdn.com/kf/U8055704f951c49b09810817feac6de59d.jpg"></p><p>　<strong>从上图可以看到 IE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 pading。</strong></p><p>这里指定元素的宽和高则包括border的padding</p><blockquote><p>元素所占据的宽度  =margin-left+width+margin-right</p></blockquote><h3 id="CSS选择器及其优先级"><a href="#CSS选择器及其优先级" class="headerlink" title="CSS选择器及其优先级"></a>CSS选择器及其优先级</h3><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><p>详情看博客  <a href="https://blog.csdn.net/DYD850804/article/details/80997251?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;dist_request_id=cda5ce45-09c2-4559-8cde-80544da3956d&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control">https://blog.csdn.net/DYD850804/article/details/80997251?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;dist_request_id=cda5ce45-09c2-4559-8cde-80544da3956d&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control</a> 大佬写得真的好</p><ul><li><p>标签选择器，例如 p body h1等</p><p>选择的是页面上所有这种类型的标签，经常描述的是“共性”</p><p>例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>ID选择器#</p><p>针对某一个特定的标签来使用，只能使用一次。css中的ID选择器以”#”来定义。</p></li><li><p>类选择器.</p><p>类选择器可以被多个标签使用，同一个标签可以使用多个类选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classone  classtwo&quot;</span>&gt;</span>我是一个h3啊<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>通配符*</p></li></ul><p>通配符即匹配任何标签例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">*<span class="hljs-comment">/*定义通用选择器*，希望所有标签的上边距和左边距都为0*/</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">0px</span>;<br><br></code></pre></td></tr></table></figure><p>一帮情况下，尽量使用class,id js用。类上样式，id上行为</p><h4 id="高级选择器"><a href="#高级选择器" class="headerlink" title="高级选择器"></a>高级选择器</h4><ul><li><p>后代选择器 空格隔开</p><p>这里强调一下：这两个标签不一定是连续紧挨着的，只要保持一个后代的关联即可。也就是说，选择的是后代，不一定是儿子。</p></li><li><p>交集选择器 .隔开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.special</span>&#123; <span class="hljs-comment">/*注意这里没有空格*/</span><br>    <span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><p>选择的元素要求同时满足两个条件：必须是h3标签，然后必须是special标签。</p></li><li><p>并集选择器 逗号隔开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>,<span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-id">#mytitle</span>,<span class="hljs-selector-class">.one</span><span class="hljs-comment">/*定义了一个并集选择器，带有p,h1,id=&quot;mytitle&quot;,class=&quot;one&quot;的标签都内容会显示红色*/</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li>伪类选择器</li></ul><p>对于<code>&lt;a&gt;</code>标签，其对应几种不同的状态：</p><ul><li><code>link</code>：超链接点击之前</li><li><code>visited</code>：超链接点击之后</li><li><code>focus</code>：是某个标签获得焦点的时候（比如某个输入框获得焦点）</li><li><code>hover</code>：鼠标放到某个标签上的时候</li><li><code>active</code>：点击某个标签没有松鼠标时</li></ul><p>CSS允许对于元素的不同状态，定义不同的样式信息。伪类选择器又分为两种：</p><ul><li>静态伪类：只能用于超链接</li><li>动态伪类：针对所有标签都适用</li></ul><p>下面来分别讲一下这两种伪类选择器。</p><p><strong>静态伪类：</strong></p><p>用于以下两个状态（*<strong>*只能使用于超链接**</strong>）：</p><ul><li><code>link</code>：超链接点击之前</li><li><code>visited</code>：超链接点击之后</li></ul><p><strong>（2）动态伪类:</strong></p><p>用于以下几种状态（适用于所有的标签）：</p><ul><li><code>focus（聚焦，点击某个文本框后输入文字，可以定义文本框和文字的属性）</code>：是某个标签获得焦点的时候（比如某个输入框获得焦点）</li><li><code>hover（盘旋，鼠标停留在上面）</code>：鼠标放到某个标签上的时候</li><li><code>active（长按状态）</code>：点击某个标签没有松鼠标时</li></ul><p>举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style type=&quot;text/css&quot;&gt;<br>        <span class="hljs-comment">/* 伪类选择器：动态伪类*/</span><br>        <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span><br><br>        <span class="hljs-comment">/*让input文本框获取焦点时：边框：#FF6F3D这种橙色；文字：绿色；背景色：#6a6a6a这种灰色*/</span><br>            &#123;<br>            <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#FF6F3D</span>;<br>            <span class="hljs-attribute">color</span>: white;<br>            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#6a6a6a</span>;<br>        &#125;<br><br>        <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:hover</span><br><br>        <span class="hljs-comment">/*鼠标放在label标签上时显示蓝色*/</span><br>            &#123;<br>            <span class="hljs-attribute">color</span>: blue;<br>        &#125;<br><br>        <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:active</span><br><br>        <span class="hljs-comment">/*点击label标签鼠标没有松开时显示红色*/</span><br>            &#123;<br>            <span class="hljs-attribute">color</span>: red;<br>        &#125;<br>    &lt;/<span class="hljs-selector-tag">style</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><p>div的儿子p。和div的后代p的截然不同。</p><h4 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span>+<span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><p>上方的选择器意思是：选择的是h3元素后面紧挨着的第一个兄弟。</p><h4 id="序选择器"><a href="#序选择器" class="headerlink" title="序选择器"></a>序选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first-child</span>&#123;<br><span class="hljs-attribute">color</span>:red;<br>&#125;<br><span class="hljs-comment">/*设置无序列表&lt;ul&gt;中的最后一个&lt;li&gt;为红色：*/</span><br></code></pre></td></tr></table></figure><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>!important&gt;行内样式&gt;ID选择器&gt;类选择器&gt;标签&gt;通配符&gt;继承&gt;浏览器默认</p><ul><li>内联样式表的权值为 1000</li><li>ID 选择器的权值为 100</li><li>Class 类选择器的权值为 10</li><li>HTML 标签选择器的权值为 1</li></ul><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.test</span>&#123;</span><br><span class="css">            <span class="hljs-selector-tag">background-COLOR</span>:<span class="hljs-selector-id">#a00</span>;</span><br><span class="css">            <span class="hljs-selector-tag">width</span><span class="hljs-selector-pseudo">:100px</span>;</span><br>            height: 100px;<br>        &#125;<br><br><span class="css">        <span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.test2</span>&#123;</span><br><span class="css">            <span class="hljs-selector-tag">background-COLOR</span>:<span class="hljs-selector-id">#0e0</span>;</span><br><span class="css">            <span class="hljs-selector-tag">width</span><span class="hljs-selector-pseudo">:100px</span>;</span><br>            height: 100px;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test test2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 我们可以把选择器中规则对应做加法，比较权值，如果权值相同那就后面的覆盖前面的了，div.class的权值是1+10=11，而.test1 .test2的权值是10+10=20，所以div会应用.test1 .test2变成绿色</p><p>　①、!important的优先级是最高的，但出现冲突时则需比较”四位数“;</p><p>　②、优先级相同时，则采用就近原则，选择最后出现的样式;</p><p>　③、继承得来的属性，其优先级最低;</p><p>原博客链接 <a href="https://www.cnblogs.com/zxjwlh/p/6213239.html">https://www.cnblogs.com/zxjwlh/p/6213239.html</a></p><h3 id="水平垂直居中的集中实现方式"><a href="#水平垂直居中的集中实现方式" class="headerlink" title="水平垂直居中的集中实现方式"></a>水平垂直居中的集中实现方式</h3><ul><li>三种定位</li></ul><ul><li><p>绝对定位+margin负边距</p><p>必须要知道具体的宽和高</p><p><img src="https://img-blog.csdnimg.cn/2019100300223157.png" alt="图示"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">给元素设置定位<span class="hljs-selector-tag">absolute</span>，父元素设置定位<span class="hljs-selector-tag">absolute</span>或<span class="hljs-selector-tag">relative</span>，参考绝对定位原理，绝对定位是相对最近一个设置定位属性(非<span class="hljs-selector-tag">static</span>)的父级元素的，给元素设置<span class="hljs-selector-tag">left</span>: 50%, <span class="hljs-selector-tag">right</span>: 50% 后，元素现在的位置如上图所示，现在元素的位置稍微偏离正中心，容易发现距离上边界、左边界是元素自身高度的一半，使用负边界可以使元素往左上角移动。<br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>绝对定位+margin:auto</p><p>这种方案元素必须要有宽和高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><pre><code>- 绝对定位 + transform  存在兼容性问题，但是不需要给元素指定宽和高  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">.box &#123;<br>  position: relative;<br>&#125;<br>.item &#123;<br>  position: absolute;<br>  left: <span class="hljs-number">50</span>%;<br>  top: <span class="hljs-number">50</span>%;<br>  transform: translate(-<span class="hljs-number">50</span>%, -<span class="hljs-number">50</span>%);<br>&#125;<br><br></code></pre></td></tr></table></figure>  对于行内元素，通过给父级元素设定text-align属性为center。</code></pre><ul><li><p>display:flex</p><p>让其父容器实现flex布局</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex; <br>    <span class="hljs-attribute">justify-content</span>:center; <br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>JavaScript</p><p>1）获取到当前屏幕的高度；</p><p>2）获取到需要居中的div的高度；</p><p>3）用屏幕的高度减去div的高度除以2就是需要给div设计的margin-top/padding-top的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>id=<span class="hljs-string">&quot;box&quot;</span>&gt;&lt;div&gt;<br><span class="hljs-keyword">let</span> HTML = <span class="hljs-built_in">document</span>.documentElement,<br>    winW = HTML.clientWidth,<br>    winH = HTML.clientHeight,<br>    boxW = box.offsetWidth,<br>    boxH = box.offsetHeight<br>box.style.position = <span class="hljs-string">&quot;absolute&quot;</span>;<br>box.style.left = (winW-boxW)/<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>box.style.top = (winH-boxH)/<span class="hljs-number">2</span> + <span class="hljs-string">&#x27;px&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="相对定位与绝对定位"><a href="#相对定位与绝对定位" class="headerlink" title="相对定位与绝对定位"></a>相对定位与绝对定位</h3><p><strong>relative</strong>：定位是相对于自身位置定位（设置偏移量的时候，会相对于自身所在的位置偏移）。设置了 relative 的元素仍然处在文档流中，元素的宽高不变，设置偏移量也不会影响其他元素的位置。最外层容器设置为 relative 定位，在没有设置宽度的情况下，宽度是整个浏览器的宽度。</p><p><strong>absolute</strong>：定位是相对于离元素最近的设置了绝对或相对定位的父元素决定的，如果没有父元素设置绝对或相对定位，则元素相对于根元素即 html 元素定位。设置了 absolute 的元素脱了了文档流，元素在没有设置宽度的情况下，宽度由元素里面的内容决定。脱离后原来的位置相当于是空的，下面的元素会来占据位置。</p><p>总结：即相对定位是相对于自身的位置进行定位，而绝对定位是相对于最近的设置了绝对或相对定位的父级元素进行定位</p><p>补充</p><blockquote><p>static: 正常⽂档流定位，此时 top, right, bottom, left 和 z-index 属性⽆效，块级元素从上往下纵向排布，⾏级元素<br>从左向右排列。</p></blockquote><h3 id="隐藏元素的方式"><a href="#隐藏元素的方式" class="headerlink" title="隐藏元素的方式"></a>隐藏元素的方式</h3><ul><li><p><code>opacity：0</code> 将元素的透明度设为0，就看起来隐藏了，但可以进行交互</p></li><li><p><code>visibility:false</code> 依然占据空间，但不能进行数据交互</p></li><li><p><code>overflow:hidden</code>:只隐藏元素的溢出部分</p><p>补充：overflow:hidden的几个作用</p><blockquote><p>1、溢出隐藏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123; <br> <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br> <span class="hljs-attribute">background</span>: skyblue;<br> <span class="hljs-attribute">overflow</span>: hidden;      <span class="hljs-comment">/*溢出隐藏*/</span><br> <span class="hljs-attribute">white-space</span>: nowrap;<span class="hljs-comment">/*规定文本不进行换行*/</span><br> <span class="hljs-attribute">text-overflow</span>: ellipsis;<span class="hljs-comment">/*当对象内文本溢出时显示省略标记（...）*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：</p></blockquote><blockquote><p>2、清除浮动</p><p>，父级元素不设置高度时，高度由随内容增加自适应高度。当父级元素内部的子元素全部都设置浮动float之后，子元素会脱离标准流，不占位，父级元素检测不到子元素的高度，父级元素高度为0。那么问题来了，如下：</p></blockquote><blockquote><p>如上，由于父级元素没有高度，下面的元素会顶上去，造成页面的塌陷。因此，需要给父级加个overflow:hidden属性，这样父级的高度就随子级容器及子级内容的高度而自适应。如下：</p></blockquote><blockquote><p>3、解决外边距塌陷</p><p>父级元素内部有子元素，如果给子元素添加margin-top样式，那么父级元素也会跟着下来，造成外边距塌陷，如下：</p></blockquote><blockquote><p>因此，给父级元素添加overflow:hidden，就可以解决这个问题了。</p></blockquote></li></ul><ul><li><p>display:none：这个是彻底隐藏了元素，元素从文档流中消失，同时不占据空间</p></li><li><p>z-index:-9999 : 原理是将层级放到底部，这样就被覆盖了，看起来隐藏了</p></li></ul><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><h4 id="块状元素"><a href="#块状元素" class="headerlink" title="块状元素"></a>块状元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>...<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>特点：</p><ul><li>总是从新行开始</li><li>高度、行高、外边距以及内边距可以控制</li><li>宽度默认是容器的100%</li><li>可以容纳行内（内联）元素和其他块元素</li></ul><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span> 链接<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>把文本定义为强调的内容<br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>吧文本定义为语气更强的强调内容<br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>引用<br><span class="hljs-tag">&lt;<span class="hljs-name">var</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>计算机文本代码<br></code></pre></td></tr></table></figure><ul><li>和相邻内元素在一行上</li><li>不能设置高度和宽度，但在水平方向可以设置padding和margin，垂直方向无法设置</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或者其他行内元素，a特殊</li></ul><h4 id="行内块状"><a href="#行内块状" class="headerlink" title="行内块状"></a>行内块状</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;img&gt;</span><br><span class="hljs-section">&lt;input&gt;</span><br><span class="hljs-section">&lt;td&gt;</span><br></code></pre></td></tr></table></figure><p>特点</p><ul><li>和相邻行内元素(行内块)在同一行上，但是之间会有空白缝隙</li><li>默认宽度就是它本身内容的宽度</li><li>高度、行高、外边距、内边距可以控制</li></ul><h4 id="块级元素和行内元素的区别"><a href="#块级元素和行内元素的区别" class="headerlink" title="块级元素和行内元素的区别"></a>块级元素和行内元素的区别</h4><ul><li>一个块级元素独占一行，而行内元素与其他行内元素并排</li><li>块级元素可以设置宽度和高度，而行内元素不可以</li><li>块级元素的长度和宽度默认是父级容器的100%，而行内元素的宽度是内容的宽度</li></ul><h4 id="如何转换"><a href="#如何转换" class="headerlink" title="如何转换"></a>如何转换</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">dispaly</span><span class="hljs-selector-pseudo">:inline</span>; <span class="hljs-comment">/*转换成行内元素*/</span><br><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:block</span>; <span class="hljs-comment">/*转换成块级元素*/</span><br><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:inline-block</span>;<span class="hljs-comment">/*转换成行内块状元素*/</span><br></code></pre></td></tr></table></figure><h4 id="display出了这几个值还有哪些"><a href="#display出了这几个值还有哪些" class="headerlink" title="display出了这几个值还有哪些"></a>display出了这几个值还有哪些</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:none</span>;<br><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:flex</span>;<span class="hljs-comment">/*响应式布局*/</span><br></code></pre></td></tr></table></figure><h4 id="试说明z-index的工作原理"><a href="#试说明z-index的工作原理" class="headerlink" title="试说明z-index的工作原理"></a>试说明z-index的工作原理</h4><ul><li><p>文档流</p><p>值越大表明距离用户越近</p><p><img src="https://ae01.alicdn.com/kf/U83afe781c7e748cc8b664200e99fe14aC.jpg"></p></li><li><p>定位</p><p>z-index只对定位元素有作用</p><p><img src="https://ae01.alicdn.com/kf/U8055704f951c49b09810817feac6de59d.jpg"></p></li></ul><h3 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h3><ul><li>空div⽅法： <code>&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;</code></li><li>Clearfix ⽅法：上⽂使⽤.clearfix类已经提到</li><li>overflow: auto或overflow: hidden⽅法，使⽤BFC</li></ul><h3 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h3><h3 id="em-px-rem区别"><a href="#em-px-rem区别" class="headerlink" title="em/px/rem区别"></a>em/px/rem区别</h3><ul><li>px：绝对当为，页面按照像素进行展示</li><li>em：相对单位 基准点为父节点字体的大小</li><li>rem：相对当为 基准点为根节点html字体的大小</li></ul><h3 id="link和-import的区别"><a href="#link和-import的区别" class="headerlink" title="link和@import的区别"></a>link和@import的区别</h3><ul><li>link属于XHTML标签，而@import是CSS提供的</li><li>页面被加载时，link会同时被加载，而@import应用的CSS会等到页面被加载完毕再加载</li><li>link的权重高于@import</li><li>link标签的样式可以DOM操作改变 而@import不可以</li></ul><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="JS的变量提升"><a href="#JS的变量提升" class="headerlink" title="JS的变量提升"></a>JS的变量提升</h3><p>js运行时先解析代码，获取所有被声明的变量，然后再一行一行运行。将所有变量的声明语句提升到代码的头部。（var变量）或函数声明(function(){ })</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>b(); <span class="hljs-comment">//1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a)<br>&#125;<br></code></pre></td></tr></table></figure><p>将变量的声明提到最前面，所以执行顺序应该是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br><span class="hljs-built_in">console</span>.log(a);<br>a = <span class="hljs-number">1</span>;<br>b();<br></code></pre></td></tr></table></figure><p>当一个变量声明但没有赋值，这个变量就是undefined，如果一个变量没有声明，则会报错</p><blockquote><p>注意：let 和const没有变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fn = <span class="hljs-number">123</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;456&#x27;</span>)<br>&#125;<br>fn();<br><span class="hljs-comment">//执行顺序为</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;456&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> fn;<br>fn = <span class="hljs-number">123</span>;<br>fn();<span class="hljs-comment">//报错 fn is not a function</span><br></code></pre></td></tr></table></figure><p>预解析时先解析函数fn，然后再解析变量fn，后面的变量fn会把前面的函数fn覆盖，所以最后执行fn()会报错</p></blockquote><h3 id="JS-执行机制"><a href="#JS-执行机制" class="headerlink" title="JS 执行机制"></a>JS 执行机制</h3><p>JS是单线程语言</p><p>JS的执行机制为Event Loop(事件循环)</p><p>JS的任务分为同步任务和异步任务，其中在主线程执行的任务为同步任务，被主线程挂载的任务为异步任务，后者一般放在一个任务队列中(Event Quene)，</p><p>且不同类型的异步任务（分为宏任务和微任务)</p><p>JS异步执行方式为</p><ul><li>所有的同步任务都在主线程执行，形成一个执行栈</li><li>主线程之外，还有一个“任务队列”，只要异步任务有了运行结果，就在“任务队列”之中放置一个事件</li><li>不同任务执行完毕后，系统会读取“任务队列”，看看里面有哪些事件。进入执行栈，开始执行异步任务</li><li>主线程不断重复上面的三步</li></ul><p>宏任务：整体代码script，setTimeOut 、setInterval</p><blockquote><p>setTimeOut和setInterval的区别</p><p>setTimeOut只执行一个，而setInterval为设置没间隔多久执行一次</p></blockquote><p>微任务：promise.then,process.nextTick(node)</p><p><img src="https://img-blog.csdnimg.cn/20190727201859866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pENzE3ODIyMDIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// timer1</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;<br>add();<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// timer2</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>&#125;,<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>)<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// timer3</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>)<br>  &#125;, <span class="hljs-number">100</span>)<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>    i == <span class="hljs-number">99</span> &amp;&amp; resolve()<br>  &#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// timer4</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>) <br>  &#125;, <span class="hljs-number">0</span>)<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>)<br><span class="hljs-comment">//最后的执行结果为 1 4 8 7 3 6 5 2</span><br></code></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包：一个函数和对其周围状态的引用捆绑在一起，这样的组合就是闭包，</p><p>利用闭包实现变量的私有化</p><p>为什么会形成闭包：程序在访问变量时，是向底层栈一个一个找，如果找到全局执行环境里都没有对应变量，则程序抛出undefined错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(b);<br>    &#125;<br>    fn1();<br>&#125;<br>fn();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">var</span> name =<span class="hljs-string">&#x27;bobo&#x27;</span>;<br>    <span class="hljs-built_in">this</span>.getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.setName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>        name = value;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> bobo = <span class="hljs-keyword">new</span> Person()<br><span class="hljs-built_in">console</span>.log(bobo.getName()); <span class="hljs-comment">//bobo</span><br>bobo.setName(<span class="hljs-string">&#x27;Yanbo&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(bobo.getName());<span class="hljs-comment">//Yanbo</span><br><span class="hljs-built_in">console</span>.log(name)<span class="hljs-comment">//name is undefinded</span><br></code></pre></td></tr></table></figure><p>JS闭包中的坑：</p><p>1、引用的变量可能发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> result = [];<br>      <span class="hljs-keyword">for</span> （<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>； i&lt;<span class="hljs-number">10</span>; i++）&#123;<br>        result.[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.info(i)<br>        &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-comment">//最后打印的结果并不是 1 2 3 ...10 而是10 10 10 ...10</span><br><span class="hljs-comment">//因为每个闭包函数访问变量i是outer执行环境下的变量i，随着循环的结束，i已经变成10了，所以执行每个闭包函数，结果打印10， 10， ..., 10</span><br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> result = [];<br>      <span class="hljs-keyword">for</span> （<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>； i&lt;<span class="hljs-number">10</span>; i++）&#123;<br>        result.[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   <span class="hljs-built_in">console</span>.info(num);    <span class="hljs-comment">// 此时访问的num，是上层函数执行环境的num，数组有10个函数对象，每个对象的执行环境下的number都不一样</span><br>             &#125;<br>        &#125;(i)<br>     &#125;<br>     <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>2、this的指向问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object = &#123;<br>     name: <span class="hljs-string">&#x27;&#x27;</span>object<span class="hljs-string">&quot;，</span><br><span class="hljs-string">     getName： function() &#123;</span><br><span class="hljs-string">        return function() &#123;</span><br><span class="hljs-string">             console.info(this.name)</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">object.getName()()    // underfined</span><br><span class="hljs-string">// 因为里面的闭包函数是在window作用域下执行的，也就是说，this指向windows</span><br></code></pre></td></tr></table></figure><p>3、内存泄漏问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">showId</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>)<br>    el.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      aler(el.id)   <span class="hljs-comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span><br>    &#125;<br>&#125;<br>j<br><span class="hljs-comment">// 改成下面</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">showId</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>)<br>    <span class="hljs-keyword">var</span> id  = el.id<br>    el.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(id)   <span class="hljs-comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span><br>    &#125;<br>    el = <span class="hljs-literal">null</span>    <span class="hljs-comment">// 主动释放el</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JS原型链"><a href="#JS原型链" class="headerlink" title="JS原型链"></a>JS原型链</h3><h4 id="构造函数与普通函数的区别"><a href="#构造函数与普通函数的区别" class="headerlink" title="构造函数与普通函数的区别"></a>构造函数与普通函数的区别</h4><p>构造函数与其他函数的唯一区别，就在于调用它们的方式不同。不过，构造函数毕竟也是函数，不存在定义构造函数的特殊语法。任何函数，只要通过 <code>new</code> 操作符来调用，那它就可以作为构造函数；而任何函数，如果不通过 <code>new</code> 操作符来调用，那它跟普通函数也不会有什么两样。例如，前面例子中定义的 <code>Person()</code> 函数可以通过下列任何一种方式来调用</p><p>通过构造函数创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br>person.name = <span class="hljs-string">&quot;kevin&quot;</span>;<br><span class="hljs-built_in">console</span>.log(person.name);<span class="hljs-comment">//kevin</span><br></code></pre></td></tr></table></figure><p>这里的Person()就是一个构造函数，通过new创建了一个实例对象</p><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><p>每个函数都有一个prototype属性</p><p>每一个JS属性都会在创建时关联另外一个对象，每一个对象都会从原型上继承属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <br>&#125;<br>Person.prototype.name = <span class="hljs-string">&#x27;bobo&#x27;</span><br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person.name);<span class="hljs-comment">//bobo</span><br></code></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/Ud6ca447ab0ad424fb51093b040b532ccs.jpg"></p><h4 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h4><p>每个对象都有一个proto属性，指向对象的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(person.__proto__ === Person.prototype) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="contructor"><a href="#contructor" class="headerlink" title="contructor"></a>contructor</h4><p>每一个原型都有一个constructor属性指向关联的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Person === Person.prototype.constructor) <span class="hljs-comment">//true</span><br><span class="hljs-comment">//顺便学习一个ES5获取对象原型的方法</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(person)===Person.prototype)<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p><img src="https://ae01.alicdn.com/kf/U5fbc4c20bb1841638aeb74c96d568a38v.jpg"></p><p><code>console.log(Object.prototype.__proto__ === null) // true</code></p><h4 id="原型的动态性"><a href="#原型的动态性" class="headerlink" title="原型的动态性"></a>原型的动态性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> friend = <span class="hljs-keyword">new</span> Person();<br>Person.prototype.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hi&quot;</span>);<br>&#125;;<br>friend.sayHi();   <span class="hljs-comment">// &quot;hi&quot;（没有问题！）</span><br></code></pre></td></tr></table></figure><p>如果是重写整个原型对象，则会有问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br><span class="hljs-keyword">var</span> friend = <span class="hljs-keyword">new</span> Person();<br><br>Person.prototype = &#123;<br>    <span class="hljs-title">constructor</span>: <span class="hljs-title">Person</span>,<br>    <span class="hljs-title">name</span> : &quot;<span class="hljs-title">Stone</span>&quot;,<br>    <span class="hljs-title">age</span> : 28,<br>    <span class="hljs-title">job</span> : &quot;<span class="hljs-title">Software</span> <span class="hljs-title">Engineer</span>&quot;,<br>    <span class="hljs-title">sayName</span> : <span class="hljs-title">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;;<br><br>friend.sayName();   <span class="hljs-comment">// Uncaught TypeError: friend.sayName is not a function</span><br></code></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br>Person.prototype = &#123;<br>    <span class="hljs-title">constructor</span>: <span class="hljs-title">Person</span>,<br>    <span class="hljs-title">name</span> : &quot;<span class="hljs-title">Stone</span>&quot;,<br>    <span class="hljs-title">age</span> : 28,<br>    <span class="hljs-title">job</span> : &quot;<span class="hljs-title">Software</span> <span class="hljs-title">Engineer</span>&quot;,<br>    <span class="hljs-title">friends</span> : [&quot;<span class="hljs-title">ZhangSan</span>&quot;, &quot;<span class="hljs-title">LiSi</span>&quot;],<br>    <span class="hljs-title">sayName</span> : <span class="hljs-title">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person();<br><br>person1.friends.push(<span class="hljs-string">&quot;WangWu&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person1.friends);    <span class="hljs-comment">// &quot;ZhangSan,LiSi,WangWu&quot;</span><br><span class="hljs-built_in">console</span>.log(person2.friends);    <span class="hljs-comment">// &quot;ZhangSan,LiSi,WangWu&quot;</span><br><span class="hljs-built_in">console</span>.log(person1.friends === person2.friends);  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>当在原型中添加引用类型值时，所有对象共享这个引用类型值</p><p>解决方法：构造函数与原型结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, job</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.job = job;<br>    <span class="hljs-built_in">this</span>.friends = [<span class="hljs-string">&quot;ZhangSan&quot;</span>, <span class="hljs-string">&quot;LiSi&quot;</span>];<br>&#125;<br><br>Person.prototype = &#123;<br>    <span class="hljs-title">constructor</span> : <span class="hljs-title">Person</span>,<br>    <span class="hljs-title">sayName</span> : <span class="hljs-title">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Stone&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&quot;Software Engineer&quot;</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Sophie&quot;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&quot;English Teacher&quot;</span>);<br><br>person1.friends.push(<span class="hljs-string">&quot;WangWu&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person1.friends);    <span class="hljs-comment">// &quot;ZhangSan,LiSi,WangWu&quot;</span><br><span class="hljs-built_in">console</span>.log(person2.friends);    <span class="hljs-comment">// &quot;ZhangSan,LiSi&quot;</span><br><span class="hljs-built_in">console</span>.log(person1.friends === person2.friends);    <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(person1.sayName === person2.sayName);    <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h3><p>基本数据类型，<code>Number</code>,<code>String</code>,<code>Boolean</code>,<code>undeined</code>,<code>null</code>,</p><p>引用数据类型：Object，包括(Function,Array,Date)</p><p>ES6新增的Symbol数据类型</p><p>NaN是Number中的特殊值</p><h4 id="null与undefined的区别"><a href="#null与undefined的区别" class="headerlink" title="null与undefined的区别"></a>null与undefined的区别</h4><p>null表示为空，代表此处不应该有值的存在，⼀个对象可以是null，代表是个空对象，⽽null本身也是对象</p><p>undefined表示没有定义，在使用var 声明变量但未对其加初始化时，这个变量就是undefined。</p><h3 id="JS-call-和apply"><a href="#JS-call-和apply" class="headerlink" title="JS call()和apply()"></a>JS call()和apply()</h3><p><code>call()</code>和<code>apply()</code>用来重新定义函数的执行环境，也就是改变this指向，</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>用一个给定的this值和单独给出的一个或多个参数来调用一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Product</span>(<span class="hljs-params">name, price</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.price = price;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Food</span>(<span class="hljs-params">name, price</span>) </span>&#123;<br>  Product.call(<span class="hljs-built_in">this</span>, name, price);<br>  <span class="hljs-built_in">this</span>.category = <span class="hljs-string">&#x27;food&#x27;</span>;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Food(<span class="hljs-string">&#x27;cheese&#x27;</span>, <span class="hljs-number">5</span>).name);<br><span class="hljs-comment">// expected output: &quot;cheese&quot;</span><br><br></code></pre></td></tr></table></figure><p>这里Product函数本来是在全局作用域下的，在全局作用域下指向应该指向window，我们通过call方法，让Product的this指向，在new 创建一个新的对象时，this会指向这个新的对象，</p><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p>apply和call方法类似，call()函数接收的是参数列表，而aplly()接收的是一个参数数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];<br><br><span class="hljs-keyword">const</span> max = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-literal">null</span>, numbers);<br><br><span class="hljs-built_in">console</span>.log(max);<br><span class="hljs-comment">// expected output: 7</span><br><br><span class="hljs-keyword">const</span> min = <span class="hljs-built_in">Math</span>.min.apply(<span class="hljs-literal">null</span>, numbers);<br><br><span class="hljs-built_in">console</span>.log(min);<br><span class="hljs-comment">// expected output: 2</span><br><br></code></pre></td></tr></table></figure><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h3><p>this的指向在函数定义时不能确定，在函数执行时才能确定this的指向问题</p><ul><li><p>默认情况下，this指向window(默认绑定)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">name = <span class="hljs-string">&quot;Bale&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;;<br>sayName(); <span class="hljs-comment">//&quot;Bale&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>隐式绑定</p><p>如果函数被调⽤的位置存在上下⽂对象时，那么函数是被隐式绑定的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log( <span class="hljs-built_in">this</span>.name );<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>name: <span class="hljs-string">&quot;Messi&quot;</span>,<br>f: f<br>&#125;;<br>obj.f(); <span class="hljs-comment">//被调⽤的位置恰好被对象obj拥有，因此结果是Messi</span><br></code></pre></td></tr></table></figure><ul><li>显式绑定</li></ul><p>即通过call，apply，bind</p></li></ul><ul><li><p>new调用构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">console</span>.log(name);<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Messi&#x27;</span>); <span class="hljs-comment">//Messi</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="JS参数传递"><a href="#JS参数传递" class="headerlink" title="JS参数传递"></a>JS参数传递</h3><h4 id="基本数据类型按值传递"><a href="#基本数据类型按值传递" class="headerlink" title="基本数据类型按值传递"></a>基本数据类型按值传递</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">x</span>) </span>&#123;<br>x = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(x);<br>&#125;<br>test(a); <span class="hljs-comment">// 10</span><br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h4 id="复杂数据类型按引用传递"><a href="#复杂数据类型按引用传递" class="headerlink" title="复杂数据类型按引用传递"></a>复杂数据类型按引用传递</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;<br>a: <span class="hljs-number">1</span>,<br>b: <span class="hljs-number">2</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">x</span>) </span>&#123;<br>x.a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(x);<br>&#125;<br>test(a); <span class="hljs-comment">// &#123; a: 10, b: 2 &#125;</span><br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// &#123; a: 10, b: 2 &#125;</span><br></code></pre></td></tr></table></figure><p>函数的实参和形参公用一个堆内存</p><p>如何解决？</p><p>先将该引用类型值深克隆一份</p><h3 id="async、await"><a href="#async、await" class="headerlink" title="async、await"></a>async、await</h3><p>async/await是基于promise实现的，就是通过看起来是同步的方式实现异步的代码</p><p>async函数返回的时一个Promise对象，并且是隐式返回的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 传入参数 n，表示这个函数执行的时间（毫秒）</span><br><span class="hljs-comment"> * 执行的结果是 n + 200，这个值将用于下一步骤</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">takeLongTime</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> resolve(n + <span class="hljs-number">200</span>), n);<br>    &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step1</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step1 with <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step2</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step2 with <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step3</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step3 with <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(n);<br>&#125;<br></code></pre></td></tr></table></figure><p>基于promise.then实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doIt</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;doIt&quot;</span>);<br>    <span class="hljs-keyword">const</span> time1 = <span class="hljs-number">300</span>;<br>    step1(time1)<br>        .then(<span class="hljs-function"><span class="hljs-params">time2</span> =&gt;</span> step2(time2))<br>        .then(<span class="hljs-function"><span class="hljs-params">time3</span> =&gt;</span> step3(time3))<br>        .then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`result is <span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>            <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;doIt&quot;</span>);<br>        &#125;);<br>&#125;<br><br>doIt();<br><br><span class="hljs-comment">// c:\var\test&gt;node --harmony_async_await .</span><br><span class="hljs-comment">// step1 with 300</span><br><span class="hljs-comment">// step2 with 500</span><br><span class="hljs-comment">// step3 with 700</span><br><span class="hljs-comment">// result is 900</span><br><span class="hljs-comment">// doIt: 1507.251ms</span><br></code></pre></td></tr></table></figure><p>基于async、awaite实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doIt</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;doIt&quot;</span>);<br>    <span class="hljs-keyword">const</span> time1 = <span class="hljs-number">300</span>;<br>    <span class="hljs-keyword">const</span> time2 = <span class="hljs-keyword">await</span> step1(time1);<br>    <span class="hljs-keyword">const</span> time3 = <span class="hljs-keyword">await</span> step2(time2);<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> step3(time3);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`result is <span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;doIt&quot;</span>);<br>&#125;<br><br>doIt();<br></code></pre></td></tr></table></figure><h3 id="解析字符串和字符串强制类型转换的区别"><a href="#解析字符串和字符串强制类型转换的区别" class="headerlink" title="解析字符串和字符串强制类型转换的区别"></a>解析字符串和字符串强制类型转换的区别</h3><h4 id="解析字符串parseInt-中含有非数字字符，解析按照从左到右的顺序，遇到非数字型字符串解析就会停止"><a href="#解析字符串parseInt-中含有非数字字符，解析按照从左到右的顺序，遇到非数字型字符串解析就会停止" class="headerlink" title="解析字符串parseInt()中含有非数字字符，解析按照从左到右的顺序，遇到非数字型字符串解析就会停止"></a>解析字符串parseInt()中含有非数字字符，解析按照从左到右的顺序，遇到非数字型字符串解析就会停止</h4><h4 id="字符串强制类型转换不允许出现非数字字符，否则会失败并返回NaN"><a href="#字符串强制类型转换不允许出现非数字字符，否则会失败并返回NaN" class="headerlink" title="字符串强制类型转换不允许出现非数字字符，否则会失败并返回NaN"></a>字符串强制类型转换不允许出现非数字字符，否则会失败并返回NaN</h4><h3 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h3><h4 id="直接通过Object创建"><a href="#直接通过Object创建" class="headerlink" title="直接通过Object创建"></a>直接通过Object创建</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>person.name = <span class="hljs-string">&#x27;bobo&#x27;</span>;<br>person.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>name: <span class="hljs-string">&#x27;bobo&#x27;</span>;<br>    sayName: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.sayName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span>(<span class="hljs-params">name,age,job</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    o.name = name;<br>    o.age = age;<br>    a.job.job;<br>    o.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = createPerson(<span class="hljs-string">&#x27;bobo&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;student&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age,job</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.job = job;<br>    <span class="hljs-built_in">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Robot</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;bobo&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;student&#x27;</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;bo&#x27;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;gamer&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(person1 <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(Person2 <span class="hljs-keyword">instanceof</span> Robot);<span class="hljs-comment">//false</span><br><span class="hljs-comment">//补充：构造函数与普通函数的区别：构造函数是用来创建新的对象(通过new关键字)，如果是像普通函数一样调用的话，它的作用就相当于普通函数</span><br><span class="hljs-comment">//例如：</span><br>Person(<span class="hljs-string">&#x27;zzx&#x27;</span>,<span class="hljs-number">20</span>,teacher);<br>sayName();<span class="hljs-comment">//&#x27;zzx&#x27;</span><br><span class="hljs-comment">//调用时，this指向window</span><br></code></pre></td></tr></table></figure><h4 id="组合使用构造函数模式与原型模式"><a href="#组合使用构造函数模式与原型模式" class="headerlink" title="组合使用构造函数模式与原型模式"></a>组合使用构造函数模式与原型模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, job</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.job = job;<br>    <span class="hljs-built_in">this</span>.friends = [<span class="hljs-string">&#x27;wc&#x27;</span>, <span class="hljs-string">&#x27;rt&#x27;</span>];<br>&#125;<br><br>Person.prototype = &#123;<br>    <span class="hljs-title">constructor</span>: <span class="hljs-title">Person</span>,<br>    <span class="hljs-title">sayName</span>: <span class="hljs-title">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//用原型定义共享的方法和属性，构造函数用于定义原型属性</span><br></code></pre></td></tr></table></figure><h4 id="寄生创建函数模式"><a href="#寄生创建函数模式" class="headerlink" title="寄生创建函数模式"></a>寄生创建函数模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, job</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>    o.name = name;<br>    o.age = age;<br>    o.job = job;<br>    o.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> o;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;zzx&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;Programmer&#x27;</span>);<br>person1.sayName();<br><span class="hljs-comment">//封装创建对象的代码</span><br></code></pre></td></tr></table></figure><h3 id="JS实现继承的几种方法"><a href="#JS实现继承的几种方法" class="headerlink" title="JS实现继承的几种方法"></a>JS实现继承的几种方法</h3><p>定义父类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义一个动物类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Animal&#x27;</span>;<br>    <span class="hljs-comment">//实例方法</span><br>    <span class="hljs-built_in">this</span>.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;正在睡觉&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//原型方法</span><br>Animal.prototype.eat = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">food</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;正在吃&#x27;</span> + food);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params"></span>)</span>&#123;<br>    Cat.prototype = <span class="hljs-keyword">new</span> Animal();<br>    Cat.prototype.name = <span class="hljs-string">&#x27;cat&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>致命缺点：来自原型对象的所有属性被所以实例共享；创造子类实例时，无法向父类构造函数传参</p><h4 id="2、构造继承"><a href="#2、构造继承" class="headerlink" title="2、构造继承"></a>2、构造继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    Animal.call(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Tom&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> cat = <span class="hljs-keyword">new</span> Cat();<br><span class="hljs-built_in">console</span>.log(cat.name);<br><span class="hljs-built_in">console</span>.log(cat.sleep());<br><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Animal); <span class="hljs-comment">// false 注意这</span><br><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Cat); <span class="hljs-comment">// tru</span><br></code></pre></td></tr></table></figure><p>只能继承实例属性和方法，不能继承原型属性和方法</p><h4 id="3、实例继承"><a href="#3、实例继承" class="headerlink" title="3、实例继承"></a>3、实例继承</h4><p>缺点：只是父类的实例，不是子类的实例</p><h4 id="4、拷贝继承"><a href="#4、拷贝继承" class="headerlink" title="4、拷贝继承"></a>4、拷贝继承</h4><p>效率较低，内存占用高 不可枚举</p><h4 id="5、组合继承"><a href="#5、组合继承" class="headerlink" title="5、组合继承"></a>5、组合继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    Animal.call(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Tom&#x27;</span>;<br>&#125;<br>Cat.prototype = <span class="hljs-keyword">new</span> Animal();<br>Cat.prototype.constructor = Cat;<span class="hljs-comment">//修改构造函数指向</span><br><span class="hljs-comment">// Test Code</span><br><span class="hljs-keyword">var</span> cat = <span class="hljs-keyword">new</span> Cat();<br><span class="hljs-built_in">console</span>.log(cat.name);<br><span class="hljs-built_in">console</span>.log(cat.sleep());<br><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Animal); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Cat); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>特点：</p><ol><li>弥补了方式2的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法</li><li>既是子类的实例，也是父类的实例</li><li>不存在引用属性共享问题</li><li>可传参</li><li>函数可复用</li></ol><p>缺点：</p><ol><li>调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</li></ol><h4 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h4><p>实现较复杂</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>当访问一个变量时，编译器在执行这段代码时，会现在当前作用域查找，如果没有找到，则向父级作用域进行查找，知道全局作用域为止，而作用域链，就是当前当前作用域与上层作用域一系列变量对象的组成，保证当前执行的作用域对符合权限的变量、函数的有序访问。</p><h2 id="http部分"><a href="#http部分" class="headerlink" title="http部分"></a>http部分</h2><h3 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h3><ul><li>数据传输方式不同：GET通过URL传递数据，而Post的数据通过请求体传输数据，因此post的安全性更高    </li><li>GET只允许ASCII码，而POST无限制</li><li>GET只读，不会更改服务器的数据，</li><li>GET无害，POST可能会重复提交表单</li></ul><h3 id="post与put的区别"><a href="#post与put的区别" class="headerlink" title="post与put的区别"></a>post与put的区别</h3><p>PUT 和POST⽅法的区别是,PUT⽅法是幂等的：连续调⽤⼀次或者多次的效果相同（⽆副作⽤），⽽POST⽅法是⾮幂等的</p><p>例如：使用post提交一篇博客可能重复提交多次，而put只会提交一次</p><h3 id="put和patch的区别"><a href="#put和patch的区别" class="headerlink" title="put和patch的区别"></a>put和patch的区别</h3><p>PUT和PATCH都是更新资源，⽽PATCH⽤来对已知资源进⾏局部更新。即更改部分数据</p><h3 id="http请求报文"><a href="#http请求报文" class="headerlink" title="http请求报文"></a>http请求报文</h3><ul><li>请求行</li><li>请求头部</li><li>空行</li><li>请求体</li></ul><p><img src="https://img.imgdb.cn/item/603b06f55f4313ce25816428.jpg"></p><p>请求⾏包括：请求⽅法字段、URL字段、HTTP协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。</p><p>请求头部:请求头部由关键字/值对组成，每⾏⼀对，关键字和值⽤英⽂冒号“:”分隔User-Agent：产⽣请求的浏览器类型。</p><p>Accept：客户端可识别的内容类型列表。</p><p>Host：请求的主机名，允许多个域名同处⼀个IP地址，即虚拟主机。</p><p>请求体: post put等请求携带的数据</p><h3 id="http响应报文"><a href="#http响应报文" class="headerlink" title="http响应报文"></a>http响应报文</h3><ul><li>响应行：由协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。</li><li>响应头：响应部⾸组成</li><li>空行</li><li>响应体：服务器响应的数据</li></ul><h3 id="http常见状态码"><a href="#http常见状态码" class="headerlink" title="http常见状态码"></a>http常见状态码</h3><ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求已被成功接收、理解、接受。<ul><li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li><li>201 Created 请求已经被实现，⽽且有⼀个新的资源已经依据请求的需要⽽建⽴</li><li>202 Accepted 请求已接受，但是还没执⾏，不保证完成请求</li><li>204 No content，表示请求成功，但响应报⽂不含实体的主体部分</li><li>206 Partial Content，进⾏范围请求</li></ul></li><li><h2 id="3xx：重定向–要完成请求必须进行更进一步的操作。"><a href="#3xx：重定向–要完成请求必须进行更进一步的操作。" class="headerlink" title="3xx：重定向–要完成请求必须进行更进一步的操作。"></a>3xx：重定向–要完成请求必须进行更进一步的操作。</h2></li><li>4xx：客户端错误–请求有语法错误或请求无法实现。<ul><li>400 bad request，请求报⽂存在语法错误 ✨</li><li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息 ✨</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝</li><li>404 not found，表示在服务器上没有找到请求的资源</li><li>408 Request timeout, 客户端请求超时</li><li>409 Confict, 请求的资源可能引起冲突</li></ul></li><li>5xx：服务器端错误–服务器未能实现合法的请求。<ul><li>500 internal sever error，表示服务器端在执⾏请求时发⽣了错误 ✨</li><li>501 Not Implemented 请求超出服务器能⼒范围，例如服务器不⽀持当前请求所需要的某个功能，或者请求是服务<br>器不⽀持的某个⽅法</li><li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，⽆法处理请求</li><li>505 http version not supported 服务器不⽀持，或者拒绝⽀持在请求中使⽤的 HTTP 版本</li></ul></li></ul><h2 id="Vue-部分"><a href="#Vue-部分" class="headerlink" title="Vue 部分"></a>Vue 部分</h2><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><p>MVVM的全称是Model-View-View-Model</p><p>Model层：数据层</p><p>View层：视图层</p><p>View-Model层：业务逻辑层</p><ul><li>在Vue中，Model层与View不进行数据交互，而是通过View-Model进行同步</li><li>Model与View-Model之间的交互是双向的，</li><li>ViewModel通过双向数据绑定将Model和View之间联系起来</li></ul><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><p>Vue采用虚拟DOM代替对真实DOM的操作，最后通过某种机制完成对真实DOM的更新</p><p>虚拟DOM：是通过JS进行模拟的，把DOM的变化放在JS层来做，尽量减少对DOM的操作，对过diff算法，算出最小差异，然后修改真实DOM，</p><p>Vue中DOM操作流程</p><ul><li>在内存中构建DOM树</li><li>将内存中的虚拟DOM渲染成真实DOM</li><li>数据改变之后，将之前的虚拟DOM树结合新的数据生成新的DOM树</li><li>通过diff算法进行新老DOM树的对比，不必全部重绘</li><li>重新进行渲染</li></ul><h3 id="V-for-key值的作用"><a href="#V-for-key值的作用" class="headerlink" title="V-for key值的作用"></a>V-for key值的作用</h3><ul><li>和diff算法有关，有key值的话，只需插入到对应位置即可，不会改变元素的走向</li><li>为了避免一些出错：新增数据，如果没有设置key，选中的状态就会变成新增的那条</li></ul><h3 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h3><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><p>计算属性通过其他属性算出一个新的数据，然后把新的数据缓存下来，它调用的是缓存中的数据，极大提高了程序的性能，和methods不同，methods没有缓存的概念，不管数据是否发生变化，methods都会重新调用</p><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>一个对象，键是data对应的数据，值是对应的回调函数。当data发送变化时，就会产生一个回调，watch监听依赖是单个的，他每次监听只能监听一个变量的改变。</p><h3 id="Vue-双向绑定的实现原理"><a href="#Vue-双向绑定的实现原理" class="headerlink" title="Vue 双向绑定的实现原理"></a>Vue 双向绑定的实现原理</h3><p>Vue在创建vm的时候，会将数据配置到在实例之中，然后通过Object.defineProperty对数据进行操作，为数据动态添加getter和setter方法，当获取数据时调用getter方法，修改数据时调用setter方法，从而进一步调用vm中的watch方法，将更改后的数据渲染到视图中</p><h3 id="this-nextTick"><a href="#this-nextTick" class="headerlink" title="this.$nextTick( )"></a>this.$nextTick( )</h3><p>就是DOM渲染完毕后再执行后面的回调函数，created()中使用的方法时，dom还没有渲染，如果此时在该钩子函数中进行dom赋值数据（或者其它dom操作）时无异于徒劳，所以，此时this.$nextTick()就会被大量使用，而与created()对应的是mounted()的钩子函数则是在dom完全渲染后才开始渲染数据，所以在mounted()中操作dom基本不会存在渲染问题。</p><h3 id="Vue中常用的声明周期"><a href="#Vue中常用的声明周期" class="headerlink" title="Vue中常用的声明周期"></a>Vue中常用的声明周期</h3><p>初始化阶段</p><blockquote><h4 id="beforecCreated"><a href="#beforecCreated" class="headerlink" title="beforecCreated"></a>beforecCreated</h4><p>不能获取数据，dom元素也没有渲染出来</p><h4 id="created"><a href="#created" class="headerlink" title="created"></a>created</h4><p>此钩子函数，数据已经挂载，在还没有渲染出DOM节点，可以做一个初始化相关的操作，ajax请求等</p><h4 id="beforeMounted"><a href="#beforeMounted" class="headerlink" title="beforeMounted"></a>beforeMounted</h4><p>dom节点马上就要渲染出来了，和created大致相同</p><h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h4><p>此时，dom节点已经被渲染出来，数据已经挂载，可以获取到真实dom</p></blockquote><p>运行中阶段</p><blockquote><h4 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h4><p>数据发生更改单dom还没有被重新渲染，千万不能在此阶段进行数据更改，不然会死循环</p><h4 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h4><p>这个钩子函数获取到的是更新后的数据，并可以获取到更改后渲染的真实dom</p></blockquote><p>销毁阶段</p><blockquote><h4 id="beforeDestory"><a href="#beforeDestory" class="headerlink" title="beforeDestory"></a>beforeDestory</h4><p>切换路由的时候，组件就要被销毁，发送在销毁前</p><h4 id="destoryed"><a href="#destoryed" class="headerlink" title="destoryed"></a>destoryed</h4><p>此时双向数据绑定，watcher已经被全部移除，但是还存在真实dom</p></blockquote><h3 id="vue中的组件通信"><a href="#vue中的组件通信" class="headerlink" title="vue中的组件通信"></a>vue中的组件通信</h3><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><p>父组件中</p><p><img src="https://img-blog.csdnimg.cn/20181218175420153.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/201812181754339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW5qaWFuX3pob3U=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>子组件中：</p><p><img src="https://img-blog.csdnimg.cn/20181218174742995.png" alt="在这里插入图片描述"></p><p>Prop 是单向绑定的：当父组件的属性变化时，将传递给子组件，但是反过来不会。即子组件通过props接收传递过来的数据，实现单向数据流</p><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><p>父组件中：</p><p><img src="https://img-blog.csdnimg.cn/20181218175910857.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181218183034315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW5qaWFuX3pob3U=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>子组件部分</p><p><img src="https://img-blog.csdnimg.cn/20181218174525607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW5qaWFuX3pob3U=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181218174544865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW5qaWFuX3pob3U=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>父组件给子组件绑定一个自定义事件，当子组件触发这个程序的时候，相当于父组件的方法被执行，</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql基础(持续更新)</title>
    <link href="/2021/02/08/mysql/"/>
    <url>/2021/02/08/mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql学习笔记"><a href="#Mysql学习笔记" class="headerlink" title="Mysql学习笔记"></a>Mysql学习笔记</h1><p>Mysql是一种关系型数据库</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 登录数据库 <br>mysql -uroot -p&quot;your password&quot;<br>-- 查看数据库<br>show databases<br>-- 操作数据库<br>use 数据库名<br>-- 退出数据库<br>exit;<br>-- 创建数据库<br>creat database test<br>-- 查看数据库中所以数据表<br>show tables<br>-- 创建数据表<br>CREATE TABLE pet (<br>    name VARCHAR(20),<br>    owner VARCHAR(20),<br>    species VARCHAR(20),<br>    sex CHAR(1),<br>    birth DATE,<br>    death DATE<br>);<br>-- 查看数据表的详细结构<br>describe pet;<br>-- 往数据表中添加数据<br>INSERT INTO pet values(&#39;puff&#39;,&#39;bobo&#39;,&#39;dog&#39;,&#39;m&#39;,&#39;1999-03-30&#39;,NULL);<br>-- 删除数据<br>delete from pet where name &#x3D; &#39;puff&#39;<br>-- 修改数据<br>update pet set name&#x3D;&quot;clear_puff&quot; where owner&#x3D;&quot;bobo&quot;;<br>-- 查看数据<br>select * from pet<br></code></pre></td></tr></table></figure><h2 id="MySQL常用数据类型"><a href="#MySQL常用数据类型" class="headerlink" title="MySQL常用数据类型"></a>MySQL常用数据类型</h2><p>大致支持数值 日期/事件 字符串类型</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 byte</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left"><strong>INT或INTEGER</strong></td><td align="left">4 bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left"><strong>FLOAT</strong></td><td align="left">4 bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left"><strong>DOUBLE</strong></td><td align="left">8 bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><h3 id="事件-日期类型"><a href="#事件-日期类型" class="headerlink" title="事件/日期类型"></a>事件/日期类型</h3><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left"><strong>DATE</strong></td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left"><strong>TIME</strong></td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left"><strong>YEAR</strong></td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left"><strong>DATETIME</strong></td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left"><strong>TIMESTAMP</strong></td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left"><strong>CHAR</strong></td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left"><strong>VARCHAR</strong></td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left"><strong>TEXT</strong></td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><h2 id="mysql-建表约束"><a href="#mysql-建表约束" class="headerlink" title="mysql 建表约束"></a>mysql 建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><h4 id="primary-key"><a href="#primary-key" class="headerlink" title="primary key"></a>primary key</h4><p>值唯一且不为空，用它就能确定一张表的一条记录，例如学生的学号唯一的且不为空</p><h4 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user2(<br>    id int,<br>    name varchar(20),<br>    password varchar(20),<br>    primary key(id,name)<br>);<br>-- 联合主键只要两个加起来不相等就可以，例如,即id，name不能都相同，但联合主键任何组件都不能为空<br>insert into user2 value(1,&#39;张三&#39;，&#39;123&#39;)<br>insert into user2 value(1，&#39;李四&#39;,&#39;123&#39;)<br></code></pre></td></tr></table></figure><h4 id="自增约束"><a href="#自增约束" class="headerlink" title="自增约束"></a>自增约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建方式<br>create table user1(<br>    id int primary key auto_increment,<br>    name varchar(20)<br>);<br>-- 插入值<br>insert into user1(name) value(&#39;张三&#39;); <br>得到张三的name值为1 依次在后面插入值后面的id依次递增<br></code></pre></td></tr></table></figure><p>当刚开始建表是忘记添加主键约束时，我们可以使用<code>alter table user4 add primarty key(id);</code></p><p>使用<code>alter table user4 drop primary key</code> 删除主键约束</p><p>通过修改一个字段的方式修改主键约束 <code>alter table user4 modify id int primary key</code></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>涉及两个表，一个主表，一个副表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 班级表<br>create table classes(<br>  id int primary key,<br>    name varchar(20),<br>);<br>-- 学生表<br>create table students(<br>    id int primary key,<br>    name varchar(20),<br>    class_id int , <br>    foreign key(class_id) references classes(id)<br>);<br>insert into classes value(1,&#39;一班&#39;);<br>insert into classes value(2,&#39;二班&#39;);<br>insert into classes value(3,&#39;三班&#39;);<br>insert into classes value(4,&#39;四班&#39;);<br>insert into students value(1001,&#39;张三&#39;,1);<br>insert into students value(1002,&#39;张三&#39;,2);<br>insert into students value(1003,&#39;张三&#39;,3);<br>insert into students value(1004,&#39;张三&#39;,4);<br>-- 如果插入<br>insert into students value(1005,&#39;李四&#39;,5);<br>-- 是不可以的，因为class_id 为5的在classes表中没有<br>-- 如果主表中的记录被附表所引用，那么这一项记录在主表中不可以被删除<br></code></pre></td></tr></table></figure><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>约束修饰的字段的值不可以重复 可以为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user2(<br>    id int,<br>    name varchar(20),<br>    unique(id,name) -- 这种表示两个键在一起不能重复<br>    -- 方式1<br>);<br>alter table user2 add unique(id); -- 方式2<br>alter table user2 modify id int unique;<br>alter table user2 drop index user7 --; 移除<br><br></code></pre></td></tr></table></figure><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p>修饰的字段不能为空，但可以重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE user1(<br>    id INT,<br>    name VARCHAR(20),<br>    age INT DEFAULT 10<br>);<br>ALTER TABLE user1 MODIFY age INT<br></code></pre></td></tr></table></figure><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p>当我们插入字段值的时候，如果没有传则使用默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user1(<br>    id int,<br>    name varchar,<br>    age int default<br>);<br>insert into user2(id,name) values(1,&#39;张三&#39;);<br></code></pre></td></tr></table></figure><h2 id="数据库三大设计范式"><a href="#数据库三大设计范式" class="headerlink" title="数据库三大设计范式"></a>数据库三大设计范式</h2><h3 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式(1NF)"></a>第一范式(1NF)</h3><p>数据表中的所有字段都是不可分割的原子值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student2(<br>    id int primary key,<br>    name varchar(20),<br>    address varchar(30)<br>);<br>insert into student2 values(2,&#39;李四&#39;,&#39;重庆市南岸区成华大道&#39;);<br>-- 这里的adress可以继续拆分成privice,country,detail 满足第二范式<br>create table student3(<br>    id int primary key,<br>    name varchar(20),<br>    country varchar(5),<br>    privince varchar(10),<br>    city varchar(10),<br>    detail varchar(20),<br>);<br>-- 这里字段就不可再拆分了，满足第一范式<br></code></pre></td></tr></table></figure><h3 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式(2NF)"></a>第二范式(2NF)</h3><p>满足第一范式基础上，除主键外的每一列必须完全依赖于主键</p><p>如果要出现不完全依赖，只可能发生联合主键外的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 订单表<br>create table order(<br>product_id int,<br>    customer_id int,<br>    product_name varchar(20),<br>  customer_name varchar(20),<br>    primary key(product_id,customer_id)<br>);<br>-- 上表中，出主键以外的其他列，只依赖于主键的部分字段，例如，product_name只关联与product_id customer_name只关联与customer_id<br>所以不满足于第二范式<br>将上述表进行拆分<br>create table myorder(<br>    order_id int primary key;<br>    product_id int,<br>    customer_id int<br>);<br>create table product(<br>    id int primary key,<br>    name varchar(20)<br>);<br>create table customer(<br>    id int primary key,<br>    name varchar(20)  <br>);<br></code></pre></td></tr></table></figure><h3 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h3><p>必须先满足第二范式，除开主键列的其他列之间不能有传递依赖关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE myorder (<br>    order_id INT PRIMARY KEY,<br>    product_id INT,<br>    customer_id INT,<br>    customer_phone VARCHAR(15)<br>);<br>-- 表中的 customer_phone 有可能依赖于 order_id 、 customer_id 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。<br></code></pre></td></tr></table></figure><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="创建一个新的数据库和表"><a href="#创建一个新的数据库和表" class="headerlink" title="创建一个新的数据库和表"></a>创建一个新的数据库和表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database select_test;<br>use select_test;<br>-- 创建学生表<br>create table student(<br>    no varchar(20) primary key,<br>    name varchar(20) not null,<br>    sex varchar(10) not null,<br>    birthday DATE,<br>    class varchar(20)<br>    -- profession varchar(20) not null,<br>    -- department varchar(20) not null<br>);<br>-- 创建教师表<br>create table teacher(<br>    no varchar(20) primary key,<br>    name varchar(20) not null,<br>    sex varchar(10) not null,<br>    birthday date,<br>    profession  varchar(20) not null, -- 职称<br>    department varchar(20) not null -- 部分<br>);<br>-- 创建课程表<br>create table course(<br>    no varchar(20) primary key,<br>    name varchar(20) not null,<br>    t_no varchar(20) not null, -- 教师编号<br>    foreign key(t_no) references teacher(no)<br>);<br>-- 成绩表<br>create table score(<br>    s_no varchar(20) not null, -- 学生id<br>    c_no varchar(20) not null, -- 课程id<br>    degree decimal, -- 成绩,<br>    foreign key(s_no) references student(no),<br>    foreign key(c_no) references course(no),<br>    primary key(s_no,c_no)<br>);<br></code></pre></td></tr></table></figure><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询指定字段<br>select name from student;<br>-- 去重查询<br>select distinct department from teacher;<br>-- 查询指定范围字段<br>select * from score where degree&gt;&#x3D;80 and degree&lt;&#x3D;90;<br>-- and表示且，都要满足，or表示或<br>-- 查询的结果按升序或降序排序<br>select * from student order by degree asc;<br>select * from student order by degree desc;<br>-- 统计班级人数<br>select count(*) from student where class &#x3D;&#39;95031&#39;;<br>-- 查询指定条数数据<br>select * from score order by degree desc limit 3,5;<br><br>-- 计算平均数<br>select AVG(degree) from score where c_no &#x3D; &#39;3-105&#39;,<br>select AVG(degree) from score where c_no &#x3D; &#39;3-245&#39;, <br>select AVG(degree) from score where c_no &#x3D; &#39;6-166&#39;<br><br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 分组查询<br>select c_no,AVG(degree) from score group by c_no;<br>-- 模糊查询<br>-- 查询选课人数大于2的课程的平均分<br>select c_no,AVG(degree) from score group by c_no having count(s_no)&gt;&#x3D;2;<br>-- 查询选课人数大于2且课程号以3开头的课程<br>select c_no,AVG(degree) from score group by c_no having count(s_no)&gt;&#x3D;2 and c_no like &#39;3%&#39;<br></code></pre></td></tr></table></figure><h3 id="多表查询练习"><a href="#多表查询练习" class="headerlink" title="多表查询练习"></a>多表查询练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询所有所有学生的name,学生在score表中对应的c_no和degree<br>select name,c_no,degree from student,score where student.no &#x3D; degree.s_no;<br>-- 查询所有学生的no，课程名称和成绩<br>select student.name as s_name,course.name as c_name,degree from student,score,course where student.no &#x3D; score.s_no and score.c_no &#x3D; course.no; -- 这里的student中的name与course中的name出现了重名，所以需要用到别名<br>-- any 表示至少<br>-- 查询选修编号为&quot;3-105&quot;课程且成绩至少高于选修编号为&quot;3-245&quot;的同学的Cno,Sn和degree，并且degree按从高到底次序排序<br>select * from score where cno&#x3D;&#39;3-105&#39; and degree&gt;any(degree from score where cno&#x3D;&#39;3-245&#39;) order by degree desc;<br>-- all 表示所有<br>-- 查询选修编号为&quot;3-105&quot;课程且成绩且高于选修编号为&quot;3-245&quot;的同学的Cno,Sn和degree，并且degree按从高到底次序排序<br>select * from score where cno&#x3D;&#39;3-105&#39; and degree&gt;all(degree from score where cno&#x3D;&#39;3-245&#39;) order by degree desc;<br>-- union<br>-- MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。<br>-- UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）<br>select tname as name,tsex as sex,tbirthday as birthday from teacher<br>union<br>select sname,ssex,sbirthday form student;<br>-- 注意 第二排不用起别名，会与第一排一一对应下来<br>-- 复制表中的数据做条件查询<br>-- 查询成绩比课程平均成绩低的成绩的成绩表<br> select * from score a where degree&lt;(select avg(degree) from score b where a.c_no&#x3D;b.c_no);<br></code></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询所有任课老师的Tanme和department<br>select * from course;<br>-- 查询至少有两名男生的班号<br>select class from student where s_sex&#x3D;&#39;男&#39; group by class having count(*)&gt;1;<br>not like 模糊查询取反<br>--   <br></code></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建person表<br>create table person(<br>    id int,<br>    name varchar(20),<br>    cardID int<br>);<br>-- 创建card表<br>create table card(<br>    id int,<br>    name varchar(20)<br>);<br></code></pre></td></tr></table></figure><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>inner join 或者join</p><p>内联查询，其实就是两张表中的数据，通过某个字段相对查询出相关记录数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from person inner join card on person.cardId&#x3D;card.id;<br>+------+------+--------+------+--------+<br>| id   | name | cardID | id   | name   |<br>+------+------+--------+------+--------+<br>|    1 | 张三 |      1 |    1 | 饭卡   |<br>|    2 | 李四 |      3 |    3 | 农行卡 |<br>+------+------+--------+------+--------+<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/08/ncLI14TdwevOCoX.png" alt="image.png"></p><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><ul><li><p>左连接 left join或者left outer join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * form person left join card on person.cardId&#x3D;card.id;<br>得到结果<br>+------+------+--------+------+--------+<br>| id   | name | cardID | id   | name   |<br>+------+------+--------+------+--------+<br>|    1 | 张三 |      1 |    1 | 饭卡   |<br>|    2 | 李四 |      3 |    3 | 农行卡 |<br>|    3 | 王五 |      6 | NULL | NULL   |<br>+------+------+--------+------+--------+<br></code></pre></td></tr></table></figure><p>会吧左边表的所有数据提取出来，而右边表的数据，如果有相等的，就显示出来，如果没有，就补上NULL</p></li></ul><p>  <img src="https://i.loli.net/2021/02/08/s3ODAZvEWqfSFV8.png" alt="image.png"></p><p>  有链接 right join或者right outer join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> select * from person right join card on person.cardId &#x3D; card.id;<br>+------+------+--------+------+--------+<br>| id   | name | cardID | id   | name   |<br>+------+------+--------+------+--------+<br>|    1 | 张三 |      1 |    1 | 饭卡   |<br>|    2 | 李四 |      3 |    3 | 农行卡 |<br>| NULL | NULL |   NULL |    2 | 建行卡 |<br>| NULL | NULL |   NULL |    4 | 工商卡 |<br>| NULL | NULL |   NULL |    5 | 邮政卡 |<br></code></pre></td></tr></table></figure><p>有连接则把右边数据提取出来，左边表的数据，如果有相等的，就显示出来，如果没有，就补上null</p><p><img src="https://i.loli.net/2021/02/08/be2RouZG8Ft9YMf.png" alt="image.png"></p><ul><li>完全外连接 full join 或者full outer join</li></ul><p>mysql不支持全外连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 如果要实现全连接<br>select * from person full join card on person.cardId &#x3D; card.id<br>union<br>select * from person right join card on person.cardId &#x3D; card.id;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>mysql中，事务其实是一个最小的不可分割的工作单元。事务能够保证一个业务的完整性</p><h3 id="autocommit"><a href="#autocommit" class="headerlink" title="autocommit"></a>autocommit</h3><p>自动提交</p><p>手动提交</p><p>事物回滚</p><p>例如我们a向b进行转账</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update user set money-100 where name&#x3D;&#39;a&#39;;<br>update user set money+100 where name&#x3D;&#39;b&#39;;<br>-- 多条sql语句，要么出现同时成功，要么同时失败<br>-- 转账过程中如果出现错误 则可以使用rollback进行撤销<br></code></pre></td></tr></table></figure><p>mysql中 如何控制事务?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select @@autocommit;<br>+--------------+<br>| @@autocommit |<br>+--------------+<br>|            1 |<br>+--------------+<br> set autocommit&#x3D;1<br>-- 默认事务开启的作用<br>-- 当我能去执行一个sql语句时，效果会立即体现出来，且不能回滚(即生效了不能使用rollback进行撤销)<br> set autocommit&#x3D;0;<br>-- 则关闭了mysql的自动提交，此时可以使用rollback撤销提交<br>-- 如果输入了commit语句，此时rollback就没有作用了，<br></code></pre></td></tr></table></figure><h3 id="start-transaction"><a href="#start-transaction" class="headerlink" title="start transaction"></a>start transaction</h3><p>当自动提交开启时，可以使用begin手动开启事务，使用rollback可以事物回滚</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">begin;<br>update user set money-100 where name&#x3D;&#39;a&#39;;<br>update user set money+100 where name&#x3D;&#39;b&#39;;<br>rollback;<br>可以进行事物回滚<br></code></pre></td></tr></table></figure><p>commit即是一个事务失效，此时不能rollback</p><h3 id="事务的4大特征ACID"><a href="#事务的4大特征ACID" class="headerlink" title="事务的4大特征ACID"></a>事务的4大特征ACID</h3><ul><li>A 原子性:事务是最小的单位，不可以再分割</li><li>C 一致性:事务要求，同一事务中的sql语句，必须保证同时成功或者同时失败</li><li>I 隔离性:事务1和事务2之间具有隔离性，</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">read uncommited; 读未提交的<br><br>-- 事务对数据进行操作，在操作的过程中，事务没有被提交，但是b可以看见a操作的结果<br><br>-- 赃读：一个事务读取到了另外一个事务中没有提交的数据，就叫做赃读，实际开发中是不允许赃读的<br><br>read commited; 读已经提交的<br>-- 虽然只能读取到另一个事务提交的数据，但还是会出现问题，就是<br>-- 读取同一个表的数据，发现前后不一致<br>-- 不可重复读<br>repeatable read; 可以重复读（默认）<br>-- 幻读 事务a和事务b同时操作一张表，事务a提交的数据，不能被事务b读到，造成幻读<br>serializale;串行化<br>-- 当表被一个事务操作时，其他事务不可以进行写操作<br>-- 一个事务操作未提交时，此时会进入排队状态，直到事务结束之后，才可以执行事务<br>-- 串行化带来的问题：性能差<br></code></pre></td></tr></table></figure><p>隔离级别越高，性能越差，mysql默认隔离级别是<code>repeatable read</code></p><ul><li>持久性 事务一旦结束，就不可以返回</li></ul><h3 id="事务开启的方式"><a href="#事务开启的方式" class="headerlink" title="事务开启的方式"></a>事务开启的方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 1、修改默认提交<br>set autocommit&#x3D;0;<br>2、 begin<br>3、 start transaction<br>事务手动后提交 commit<br>事务手动回滚 rollback<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise学习(完结)</title>
    <link href="/2021/01/26/promise%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/26/promise%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Promise是什么"><a href="#Promise是什么" class="headerlink" title="Promise是什么"></a>Promise是什么</h2><p>Promise是JS中进行异步编程的新解决方案</p><p>从语法上讲：Promise是一个构造函数，从功能上讲：Promise对象用来封装一个异步操作并可以获取其成功/失败的结果值</p><p>在ES6以前，采用的是回调函数解决方案，即以一个函数作为另一个函数的参数</p><p>应用场景：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-number">1</span>、<span class="hljs-built_in">fs</span>文件操作<br><span class="hljs-number">2</span>、数据库操作<br><span class="hljs-number">3</span>、ajax<br><span class="hljs-number">4</span>、定时器<br></code></pre></td></tr></table></figure><h3 id="为什么要使用Promise"><a href="#为什么要使用Promise" class="headerlink" title="为什么要使用Promise"></a>为什么要使用Promise</h3><p>因为使用回调函数会存在回调地狱的问题，不便于阅读和异常处理</p><p><strong>使用Promise支持链式调用可以解决回调地狱的问题</strong></p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>启动异步任务=》返回Promise对象=》给Promise对象绑定回调函数</p><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;</span>Promise初体验<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击抽奖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rand</span>(<span class="hljs-params">m, n</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.random() * (n - m + <span class="hljs-number">1</span>)) + m - <span class="hljs-number">1</span></span><br>        &#125;<br><span class="javascript">        <span class="hljs-comment">//获取元素对象</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#btn&#x27;</span>);</span><br><span class="javascript">        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//////////通过回调函数实现</span></span><br><span class="javascript">            <span class="hljs-comment">//获取从1到100的随机数</span></span><br><span class="javascript">            <span class="hljs-comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="javascript">            <span class="hljs-comment">//     let n = rand(1,100);</span></span><br><span class="javascript">            <span class="hljs-comment">//     console.log(n)</span></span><br><span class="javascript">            <span class="hljs-comment">//     if(n&lt;=30)</span></span><br><span class="javascript">            <span class="hljs-comment">//         alert(&#x27;恭喜你中奖了！&#x27;);</span></span><br><span class="javascript">            <span class="hljs-comment">//     else&#123;</span></span><br><span class="javascript">            <span class="hljs-comment">//         alert(&#x27;很遗憾。您未中奖&#x27;)</span></span><br><span class="javascript">            <span class="hljs-comment">//     &#125;</span></span><br><span class="javascript">            <span class="hljs-comment">// &#125;,1000)</span></span><br><span class="javascript">            <span class="hljs-comment">///////////////用promise进行封装</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>((resolve,</span><br>                reject<br><span class="javascript">                ) =&gt; &#123; <span class="hljs-comment">//promise实例化时构造函数的参数是一个函数，并且有两个参数//resolve: 解决 函数类型数据       //reject :拒绝 函数类型数据</span></span><br><span class="javascript">                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">let</span> n = rand(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(n)</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">30</span>)</span><br><span class="javascript">                        resolve(n); <span class="hljs-comment">//将Promise对象设置为成功</span></span><br><span class="javascript">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        reject(n); <span class="hljs-comment">//将promise对象设置为失败</span></span><br>                    &#125;<br>                &#125;, 1000);<br>            &#125;)<br><span class="javascript">            p.then(<span class="hljs-function">(<span class="hljs-params">vlaue</span>) =&gt;</span> &#123; <span class="hljs-comment">//调用.then方法，成功调用第一个回调函数代码，失败调用第二个回调函数中的代码</span></span><br><span class="javascript">                alert(<span class="hljs-string">`中奖了号码为<span class="hljs-subst">$&#123;vlaue&#125;</span>`</span>)  </span><br><span class="javascript">            &#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;</span><br><span class="javascript">                alert(<span class="hljs-string">`由于你的号码为<span class="hljs-subst">$&#123;reason&#125;</span>再接再厉`</span>)</span><br>            &#125;)<br><br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实例2-进行函数封装-使其返回一个Promise对象"><a href="#实例2-进行函数封装-使其返回一个Promise对象" class="headerlink" title="实例2 进行函数封装 使其返回一个Promise对象"></a>实例2 进行函数封装 使其返回一个Promise对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 封装一个函数mimeReadFile读取文件内容</span><br><span class="hljs-comment">// 参数：path文件路径</span><br><span class="hljs-comment">// 返回值：promise对象</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mimeReadFile</span>(<span class="hljs-params">path</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123; <span class="hljs-comment">//返回一个promise对象</span><br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).readFile(path, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (err) reject(err);<br>            resolve(data);<br>        &#125;)<br>    &#125;)<br>&#125;<br>mimeReadFile(<span class="hljs-string">&#x27;./resource/hhh.txt&#x27;</span>).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value.toString())<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="手写promise"><a href="#手写promise" class="headerlink" title="手写promise"></a>手写promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">//声明构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Promise</span>(<span class="hljs-params">executor</span>) </span>&#123;<br>    <span class="hljs-comment">//添加属性</span><br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;pending&#x27;</span>;<br>    <span class="hljs-built_in">this</span>.PromiseResult = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">this</span>.callbacks = [];<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span>; <span class="hljs-comment">//这里的this指向Promise</span><br>    <span class="hljs-comment">//声明reslove，reject这两个函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-comment">//保证promise对象的状态只能修改一次</span><br>        <span class="hljs-keyword">if</span> (self.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) <span class="hljs-keyword">return</span><br>        <span class="hljs-comment">//修改对象状态(promiseState)</span><br>        <span class="hljs-comment">//而这里的this指向window</span><br>        self.PromiseState = <span class="hljs-string">&#x27;fullfilled&#x27;</span><br>        <span class="hljs-comment">//修改结果值(promiseResult)</span><br>        self.PromiseResult = data;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            self.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                item.onResolved(data)<br>            &#125;)<br>        &#125;)<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reject</span>(<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (self.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) <span class="hljs-keyword">return</span><br>        self.PromiseState = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br>        self.PromiseResult = data;<br>        <span class="hljs-comment">//调用成功的回调函数</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            self.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                item.onRejected(data)<br>            &#125;)<br>        &#125;)<br><br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        executor(resolve, reject);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        reject(e);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//添加then方法</span><br><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            onRejected = <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">throw</span> reason;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            onResolved = <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-keyword">return</span> value &#125;<br>        &#125;<br>        <span class="hljs-comment">//封装函数</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">let</span> result = type(self.PromiseResult);<br>                <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>                    result.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                        resolve(v);<br>                    &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                        reject(r)<br>                    &#125;)<br>                &#125;<br>                <span class="hljs-keyword">else</span> resolve(result)<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (e) &#123;<br>                reject(e)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;fullfilled&#x27;</span>) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                callback(onResolved)<br>            &#125;)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                callback(onRejected)<br>            &#125;)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>            <span class="hljs-comment">//保存回调函数</span><br>            <span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>                onResolved: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                    <span class="hljs-comment">//成功执行回调函数</span><br>                    callback(onResolved)<br>                &#125;,<br>                onRejected: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                    callback(onRejected)<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-built_in">Promise</span>.prototype.catch = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onRejected</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.then(<span class="hljs-literal">undefined</span>, onRejected)<br>&#125;<br><span class="hljs-comment">//封装Promise.resolve</span><br><span class="hljs-built_in">Promise</span>.resolve = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>            value.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                resolve(v)<br>            &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                reject(r)<br>            &#125;)<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            resolve(value)<br>        &#125;<br>    &#125;);<br>&#125;<br><span class="hljs-comment">//封装Promise.reject</span><br><span class="hljs-built_in">Promise</span>.reject = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        reject(reason)<br>    &#125;)<br>&#125;<br><span class="hljs-comment">//封装Promisr.all方法</span><br><span class="hljs-built_in">Promise</span>.all = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>            promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                count++;<br>                arr[i] = v;<br>                <span class="hljs-comment">//得知对象状态为成功，</span><br>                <span class="hljs-comment">//每个都为成功时才调</span><br>                <span class="hljs-keyword">if</span> (count === promises.length) &#123;<br>                    resolve(arr);<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-comment">//封装Promise.race方法</span><br><span class="hljs-built_in">Promise</span>.race = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>            promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                resolve(v);<br>            &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                reject(r);<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h2><h3 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h3><p>函数的返回值为promise对象，promise对象的结果由async函数的执行的返回值决定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-keyword">let</span> result = main();<br><span class="hljs-built_in">console</span>.log(result)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/27/EFIZPByW9a6hLAY.png" alt="image.png"></p><p>如果返回的是一个非Promise类型的数据，PromiseState为<code>fulfilled</code>，PromiseResult如返回值相同</p><p>如果返回的是一个Promise对象，则PromiseState与返回的Promise的状态相同，且PromiseResult也相同</p><p>如果是抛出错误，则PromiseState为rejected，PromiseState是抛出错误的参数</p><h3 id="await函数"><a href="#await函数" class="headerlink" title="await函数"></a>await函数</h3><p>await右侧的表达式一般是promise对象</p><p>如果表达式是promise对象，await返回的是promise成功的值</p><p>如果表达式是其他值，直接将此值作为await的返回值  </p><p>这里await必须写在async函数中，但await可由可无</p><h3 id="如何async与await写出优雅代码"><a href="#如何async与await写出优雅代码" class="headerlink" title="如何async与await写出优雅代码"></a>如何async与await写出优雅代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> mineReadFile(<span class="hljs-string">&#x27;./resource/1.txt&#x27;</span>);<br>        <span class="hljs-keyword">let</span> data2 = <span class="hljs-keyword">await</span> mineReadFile(<span class="hljs-string">&#x27;./resource/2.txt&#x27;</span>);<br>        <span class="hljs-keyword">let</span> data3 = <span class="hljs-keyword">await</span> mineReadFile(<span class="hljs-string">&#x27;./resource/3.txt&#x27;</span>);<br>    &#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>        <span class="hljs-built_in">console</span>.log(e)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//前提是mineReadFile返回值一个promise类型的对象</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//封装AJAX请求为promise对象</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendAJAX</span>(<span class="hljs-params">url</span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>                xhr.responseType = <span class="hljs-string">&#x27;json&#x27;</span>;<br>                xhr.open(<span class="hljs-string">&quot;GET&quot;</span>, url);<br>                xhr.send();<br>                <span class="hljs-comment">//处理结果</span><br>                xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>)&#123;<br>                        <span class="hljs-comment">//判断成功</span><br>                        <span class="hljs-keyword">if</span>(xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>)&#123;<br>                            <span class="hljs-comment">//成功的结果</span><br>                            resolve(xhr.response);<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            reject(xhr.status);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">let</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#btn&#x27;</span>);<br>        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">let</span> joker = <span class="hljs-keyword">await</span> sendAJAX(<span class="hljs-string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);<br>            <span class="hljs-built_in">console</span>.log(joker.result);<br>        &#125;)<br></code></pre></td></tr></table></figure><p>axios已经将各种ajax请求的返回值封装成promise对象，实际开发过程中不需要我们手动去进行封装</p>]]></content>
    
    
    <categories>
      
      <category>前端工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础(持续更新)</title>
    <link href="/2021/01/26/vue/"/>
    <url>/2021/01/26/vue/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue介绍"><a href="#Vue介绍" class="headerlink" title="Vue介绍"></a>Vue介绍</h2><ul><li>Vue是一套用于构建用户列表的<strong>渐进式框架</strong>,</li><li>Vue 被设计为可以自底向上逐层应用，Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</li><li>Vue能够为复杂的单页应用提供驱动</li></ul><p>Vue构成包括核心库和扩展插件</p><p>为什么是渐进式框架，和Angular不同，Vue提供的是一整套的解决方案，可以和其它库兼容</p><h2 id="Vue的引入"><a href="#Vue的引入" class="headerlink" title="Vue的引入"></a>Vue的引入</h2><ul><li><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code></li><li>通过Vue-cli</li></ul><h2 id="Vue入门"><a href="#Vue入门" class="headerlink" title="Vue入门"></a>Vue入门</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    鼠标悬停几秒钟查看此处动态绑定的提示信息！<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app2 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-2&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;页面加载于 &#x27;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当data里面的是html是，使用<code>&lt;div v-html = &quot;message&quot;&gt;&lt;/div&gt;</code></p><h3 id="v-bind绑定元素节点的属性"><a href="#v-bind绑定元素节点的属性" class="headerlink" title="v-bind绑定元素节点的属性"></a>v-bind绑定元素节点的属性</h3><p>通过<code>v-bind</code> 是vue才带有的指令，指令带有前缀<code>v-</code>以表示是vue提供的attribute，将这个元素节点的 <code>title</code> 属性 和 Vue 实例的 <code>message</code> 值保持一致</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-3&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app3 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-3&#x27;</span>,<br>  data: &#123;<br>    seen: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>可以通过设置<code>app3.seen</code>的值可以控制DOM元素的显示或隐藏</p><h3 id="通过v-for对数组进行遍历"><a href="#通过v-for对数组进行遍历" class="headerlink" title="通过v-for对数组进行遍历"></a>通过v-for对数组进行遍历</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span>&gt;</span><br>      &#123;&#123; todo.text &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app4 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-4&#x27;</span>,<br>  data: &#123;<br>    todos: [<br>      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学习 JavaScript&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学习 Vue&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;整个牛项目&#x27;</span> &#125;<br>    ]<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="v-on绑定事件"><a href="#v-on绑定事件" class="headerlink" title="v-on绑定事件"></a>v-on绑定事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-5&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reverseMessage&quot;</span>&gt;</span>反转消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app5 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-5&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;Hello Vue.js!&#x27;</span><br>  &#125;,<br>  methods: &#123;<br>    reverseMessage: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.message = <span class="hljs-built_in">this</span>.message.split(<span class="hljs-string">&#x27;&#x27;</span>).reverse().join(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="如何停止事件："><a href="#如何停止事件：" class="headerlink" title="如何停止事件："></a>如何停止事件：</h4><p>方法1：使用原生js的阻止冒泡:<code>event.stopPropagation</code></p><p>方法2：通过Vue提供的事件修饰符</p><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><h3 id="v-model双向数据绑定"><a href="#v-model双向数据绑定" class="headerlink" title="v-model双向数据绑定"></a>v-model双向数据绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-6&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app6 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-6&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="vue组件系统"><a href="#vue组件系统" class="headerlink" title="vue组件系统"></a>vue组件系统</h2><p><img src="https://cn.vuejs.org/images/components.png" alt="Component Tree"></p><p>当要构建大型应用时，可以通过组件化进行构建，如下面例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-7&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      现在我们为每个 todo-item 提供 todo 对象</span><br><span class="hljs-comment">      todo 对象是变量，即其内容可以是动态的。</span><br><span class="hljs-comment">      我们也需要为每个组件提供一个“key”，稍后再</span><br><span class="hljs-comment">      作详细解释。</span><br><span class="hljs-comment">    --&gt;</span><br>    &lt;todo-item<br>      v-for=&quot;item in groceryList&quot;<br>      v-bind:todo=&quot;item&quot;<br>      v-bind:key=&quot;item.id&quot;<br>    &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">todo-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.component(<span class="hljs-string">&#x27;todo-item&#x27;</span>, &#123; <span class="hljs-comment">//生成todo-item组件</span><br>  props: [<span class="hljs-string">&#x27;todo&#x27;</span>],<br>  template: <span class="hljs-string">&#x27;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&#x27;</span>,<br>  data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">return</span>&#123;<br>          name:<span class="hljs-string">&quot;鹿晗&quot;</span><br>      &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">var</span> app7 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-7&#x27;</span>,<br>  data: &#123;<br>    groceryList: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;蔬菜&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;奶酪&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;随便其它什么人吃的东西&#x27;</span> &#125;<br>    ]<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="Vue的脚手架"><a href="#Vue的脚手架" class="headerlink" title="Vue的脚手架"></a>Vue的脚手架</h2><ul><li>脚手架是通过webpack搭建的</li><li>使用ES6的语法</li><li>打包和压缩JS为一个文件</li><li>项目文件在环境中进行编译</li><li>页面可以自动刷新</li></ul><p>通过Vue脚手架创建的项目结构</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://i.loli.net/2021/01/22/bnYUZuk9x4cPQRA.png" alt="image.png"></p><p>通过Vue脚手架创建的项目结构如上所示</p><h4 id="1、build文件夹"><a href="#1、build文件夹" class="headerlink" title="1、build文件夹"></a>1、build文件夹</h4><p>主要是打包的一些webpack配置文件，Vue的打包是基于Webpack的，webpack的知识后面也需要学习</p><h4 id="2、config文件夹"><a href="#2、config文件夹" class="headerlink" title="2、config文件夹"></a>2、config文件夹</h4><p>主要是一些项目的配置文件</p><h4 id="3、node——modules文件夹"><a href="#3、node——modules文件夹" class="headerlink" title="3、node——modules文件夹"></a>3、node——modules文件夹</h4><p>不用多说了，就是各种包</p><h4 id="4、Src文件夹"><a href="#4、Src文件夹" class="headerlink" title="4、Src文件夹"></a>4、Src文件夹</h4><p>最重要，assets存放静态文件，components文件夹下存放的各种组件，其中App.vue是根组件</p><h4 id="5、main-js文件"><a href="#5、main-js文件" class="headerlink" title="5、main.js文件"></a>5、main.js文件</h4><p>绑定了index.html，也引入了根组件</p><p>6、index.html</p><p>整个html的入口</p><p>router文件夹后面再补充</p><h3 id="Css作用域"><a href="#Css作用域" class="headerlink" title="Css作用域"></a>Css作用域</h3><p>在各个组件中，如果不设置script 的scoped则会造成各个组件样式的覆盖和继承，通过scoped可以让样式在自己的组件中生效</p><h2 id="Vue传值"><a href="#Vue传值" class="headerlink" title="Vue传值"></a>Vue传值</h2><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><p>通过v-bind进行属性传值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">Users</span> <span class="hljs-attr">v-bind:users</span>=<span class="hljs-string">&quot;users&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Users</span>&gt;</span> <br><span class="hljs-comment">&lt;!--父组件通过在绑定属性向子组件传值--&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">子组件通过 props:[<span class="hljs-string">&quot;users&quot;</span>]拿到<br> props: &#123; <span class="hljs-comment">//这样写更严谨</span><br>    users: &#123;<br>      type: <span class="hljs-built_in">Array</span>,<br>      required: <span class="hljs-literal">true</span>,<br>    &#125;,<br></code></pre></td></tr></table></figure><p>传值：<code>string</code>,<code>number</code>,<code>boolean </code>传值时，两个组件的值互相不影响</p><p>传引用：<code>array</code>,<code>object</code> 传引用时，改变一个地方的值其他地方也会跟着变化</p><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><p>通过事件进行传值</p><p>比如说通过改变子组件的一个值实现父组件值的修改</p><p>首先我们在子组件中定义一个方法，注册一个事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">methods:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&quot;titleChange&quot;</span>,<span class="hljs-string">&quot;子向父组件传值&quot;</span>);<span class="hljs-comment">//注册一个事件,前面一个是方法名，后面一个是传递的值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在父组件的子组件标签中绑定一方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">app-header</span> <span class="hljs-attr">v-on:titleChange</span>=<span class="hljs-string">&quot;updateTitle($event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-header</span>&gt;</span> 绑定的事件名必须和子组件中注册的方法名一致，<br>然后实现这个方法<br>updateTitle(title)&#123;<br>this.title = title;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://i.loli.net/2021/01/23/xqg56OBoVRmhapP.png" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">beforeCreate:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件实例化之前执行的函数&quot;</span>)<br>  &#125;,<br>  created:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件实例化加载完毕，单页面还没显示&quot;</span>)<br>  &#125;,<br>  beforeMount:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件挂载前，页面仍未显示，但虚拟DOM已经配置&quot;</span>)<br>  &#125;,<br>  mounted:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件挂载后,此方法执行后，页面显示&quot;</span>)<br>  &#125;,<br>  beforeUpdate:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件更新前，页面仍未更新，但虚拟DOM已经配置&quot;</span>)<br>  &#125;,<br>  updated:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件更新，此方法执行后，页面显示&quot;</span>)<br>  &#125;,<br>  beforeDestroy:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件销毁前&quot;</span>)<br>  &#125;,<br>  destroyed: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params"></span>) </span>&#123;<br>      alert(<span class="hljs-string">&quot;组件销毁&quot;</span>)<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><p>使用路由不会造成当前html的刷新</p><p>首先需要安装裸游模块</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">npm install vue-router --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p>再在main.js中引入组件，映入router</p><p>使用VueRouter中间件</p><p>创建router实例对象，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  routes:[<br>    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">component</span>:home&#125;,<br>    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/helloworld&#x27;</span>,<span class="hljs-attr">component</span>:HelloWorld&#125;,<br>  ],<br>  mode:<span class="hljs-string">&quot;history&quot;</span> <span class="hljs-comment">//消除#号</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span> =<span class="hljs-string">&quot;/&quot;</span>&gt;</span>跳转到根组件<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> //这样不会造成页面的刷新<br></code></pre></td></tr></table></figure><h2 id="使用vue-resource"><a href="#使用vue-resource" class="headerlink" title="使用vue-resource"></a>使用vue-resource</h2><p>vue里面自带了请求http的包，但目前使用最多的还是axios</p><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//自定义指令</span><br>Vue.directive(<span class="hljs-string">&#x27;rainbow&#x27;</span>,&#123; <span class="hljs-comment">//rainbow是指令的名字</span><br>    <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el,binding,vnode</span>)</span>&#123;<br>      el.style.color = <span class="hljs-string">&#x27;#&#x27;</span>+<span class="hljs-built_in">Math</span>.random().toString(<span class="hljs-number">16</span>).slice(<span class="hljs-number">2</span>,<span class="hljs-number">8</span>)<br>    &#125;<br>&#125;)<br><span class="hljs-comment">//带值</span><br>Vue.directive(<span class="hljs-string">&#x27;theme&#x27;</span>,&#123;<br>  <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el,binding,vnode</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(binding.value==<span class="hljs-string">&#x27;wide&#x27;</span>)&#123;<br>      el.style.maxWidth = <span class="hljs-string">&quot;1260px&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(binding.value == <span class="hljs-string">&#x27;narrow&#x27;</span>)&#123;<br>      el.style.maxWidth = <span class="hljs-string">&quot;500px&quot;</span><br>    &#125;<br>  &#125;<br>&#125;)<br><span class="hljs-comment">//带参数</span><br>Vue.directive(<span class="hljs-string">&#x27;theme&#x27;</span>,&#123;<br>  <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el,binding,vnode</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(binding.value==<span class="hljs-string">&#x27;wide&#x27;</span>)&#123;<br>      el.style.maxWidth = <span class="hljs-string">&quot;1260px&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(binding.value == <span class="hljs-string">&#x27;narrow&#x27;</span>)&#123;<br>      el.style.maxWidth = <span class="hljs-string">&quot;500px&quot;</span><br>    &#125;<br>      <span class="hljs-keyword">if</span>(binding.arg ==<span class="hljs-string">&#x27;column&#x27;</span>)&#123;<br>          el.style.background = <span class="hljs-string">&quot;6677cc&quot;</span>;<br>          el.style.padding = 10px;<br>      &#125;<br>  &#125;<br>&#125;)<br>&lt;div v-theme:cloumn = <span class="hljs-string">&quot;narrow&quot;</span>&gt;&lt;/div&gt;<br>然后在标签上直接使用该指令即可<br>上面是在全局，也可以在当前组件生效一个自定义过滤器，只设置当前组件的Vue实例的filters属性即可<br></code></pre></td></tr></table></figure><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.filter(<span class="hljs-string">&quot;touppercase&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123; <span class="hljs-comment">//第一个参数是过滤器的名字，第二个参数是具体实现的方法</span><br>  <span class="hljs-keyword">return</span> value.toUpperCase();<br>&#125;)<br>   &lt;h2 v-rainbow&gt;&#123;&#123;blog.title |touppercase&#125;&#125;&lt;<span class="hljs-regexp">/h2&gt; /</span><span class="hljs-regexp">/如何使用</span><br></code></pre></td></tr></table></figure><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><p>在路由模块上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>[<br>    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/blog/:id&quot;</span>,<span class="hljs-attr">component</span>:SingleBlog&#125;<br>]<br>再通过<span class="hljs-built_in">this</span>.$route.params即可拿到路由后面跟的参数<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6的一些新特性(持续更新)</title>
    <link href="/2021/01/26/ES6/"/>
    <url>/2021/01/26/ES6/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够说出使用let关键字声明变量的特点</li><li>能够使用解构赋值从数组中提取值</li><li>能够说出箭头函数拥有的特性</li><li>能够使用剩余参数接收剩余的函数参数</li><li>能够使用拓展运算符拆分数组</li><li>能够说出模板字符串拥有的特性</li></ul><h2 id="ES6相关概念（★★）"><a href="#ES6相关概念（★★）" class="headerlink" title="ES6相关概念（★★）"></a>ES6相关概念（★★）</h2><h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p><p>![](C:/Users/Yanbo/Desktop/WEB学习/前端就业班资料/07-10 JavaScript网页编程/04-JavaScript高级资料/JavaScript 高级_day05/4-笔记/images/es-version.png)</p><h3 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h2><h3 id="let（★★★）"><a href="#let（★★★）" class="headerlink" title="let（★★★）"></a>let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p><h4 id="变量不允许重复声明"><a href="#变量不允许重复声明" class="headerlink" title="变量不允许重复声明"></a>变量不允许重复声明</h4><p>重复声明会报错</p><h4 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; <br>     <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br> &#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// a is not defined</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// a is not defined 报错</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; <br>    tmp = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>    <span class="hljs-keyword">let</span> tmp; <br>&#125; <br></code></pre></td></tr></table></figure><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> arr = [];<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>     arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>         <span class="hljs-built_in">console</span>.log(i); <br>     &#125;<br> &#125;<br> arr[<span class="hljs-number">0</span>](); <br> arr[<span class="hljs-number">1</span>]();<br><span class="hljs-comment">//都是打印2</span><br><br></code></pre></td></tr></table></figure><p>![](C:/Users/Yanbo/Desktop/WEB学习/前端就业班资料/07-10 JavaScript网页编程/04-JavaScript高级资料/JavaScript 高级_day05/4-笔记/images/let面试题.png)</p><p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i); <br>    &#125;<br>&#125;<br>arr[<span class="hljs-number">0</span>]();<br>arr[<span class="hljs-number">1</span>]();<br><br></code></pre></td></tr></table></figure><p>![](C:/Users/Yanbo/Desktop/WEB学习/前端就业班资料/07-10 JavaScript网页编程/04-JavaScript高级资料/JavaScript 高级_day05/4-笔记/images/let面试题2.png)</p><p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>let关键字就是用来声明变量的</li><li>使用let关键字声明的变量具有块级作用域</li><li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li><li>防止循环变量变成全局变量</li><li>使用let关键字声明的变量没有变量提升</li><li>使用let关键字声明的变量具有暂时性死区特性</li></ul><h3 id="const（★★★）"><a href="#const（★★★）" class="headerlink" title="const（★★★）"></a>const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p><h4 id="潜规则：常量变量名一般要大写"><a href="#潜规则：常量变量名一般要大写" class="headerlink" title="潜规则：常量变量名一般要大写"></a>潜规则：常量变量名一般要大写</h4><h4 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; <br>     <span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br> &#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// a is not defined</span><br></code></pre></td></tr></table></figure><h4 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI; <span class="hljs-comment">// Missing initializer in const declaration</span><br></code></pre></td></tr></table></figure><h4 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.14</span>;<br>PI = <span class="hljs-number">100</span>; <span class="hljs-comment">// Assignment to constant variable.</span><br><br><span class="hljs-keyword">const</span> ary = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>];<br>ary[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br>ary[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(ary); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;]; </span><br>ary = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]; <span class="hljs-comment">// Assignment to constant variable.</span><br><br></code></pre></td></tr></table></figure><p>对于数组和对象的元素修改，不能修改其地址值，但是元素值是可以修改的</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>const声明的变量是一个常量</li><li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li><li>声明 const时候必须要给定值</li></ul><h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul><li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li><li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li><li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li></ul><p>![](C:/Users/Yanbo/Desktop/WEB学习/前端就业班资料/07-10 JavaScript网页编程/04-JavaScript高级资料/JavaScript 高级_day05/4-笔记/images/var&amp;let&amp;const区别.png)</p><h3 id="解构赋值（★★★）"><a href="#解构赋值（★★★）" class="headerlink" title="解构赋值（★★★）"></a>解构赋值（★★★）</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">let</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">//1</span><br> <span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">//2</span><br> <span class="hljs-built_in">console</span>.log(c)<span class="hljs-comment">//3</span><br><span class="hljs-comment">//如果解构不成功，变量的值为undefined</span><br></code></pre></td></tr></table></figure><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;; <br><span class="hljs-keyword">let</span> &#123; name, age &#125; = person;<br><span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">// &#x27;zhangsan&#x27; </span><br><span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// 20</span><br><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>: myName, <span class="hljs-attr">age</span>: myAge&#125; = person; <span class="hljs-comment">// myName myAge 属于别名</span><br><span class="hljs-built_in">console</span>.log(myName); <span class="hljs-comment">// &#x27;zhangsan&#x27; </span><br><span class="hljs-built_in">console</span>.log(myAge); <span class="hljs-comment">// 20</span><br><br></code></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h3 id="对象简化"><a href="#对象简化" class="headerlink" title="对象简化"></a>对象简化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;波波&#x27;</span>;<br><span class="hljs-keyword">let</span> change = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hhh&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">const</span> school = &#123;<br>    name,<br>    change,<br>    <span class="hljs-function"><span class="hljs-title">improve</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="箭头函数（★★★）"><a href="#箭头函数（★★★）" class="headerlink" title="箭头函数（★★★）"></a>箭头函数（★★★）</h3><p>ES6中新增的定义函数的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">() =&gt; &#123;&#125; <span class="hljs-comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span><br><span class="hljs-keyword">const</span> fn = <span class="hljs-function">() =&gt;</span> &#123;&#125;<span class="hljs-comment">//代表把一个函数赋值给fn</span><br></code></pre></td></tr></table></figure><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号，语句的执行结果就是函数的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123; <br>    <span class="hljs-keyword">return</span> num1 + num2; <br>&#125;<br><span class="hljs-comment">//es6写法</span><br><span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">num1, num2</span>) =&gt;</span> num1 + num2; <br><br></code></pre></td></tr></table></figure><p>如果形参只有一个，可以省略小括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params">v</span>) </span>&#123;<br>     <span class="hljs-keyword">return</span> v;<br> &#125; <br><span class="hljs-comment">//es6写法</span><br> <span class="hljs-keyword">const</span> fn = <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v;<br><br></code></pre></td></tr></table></figure><p>箭头函数不绑定this关键字，this始终指向函数声明时所在作用域下的this 的值，利用call()方法也不能改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>&#125; <br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params"></span>) </span>&#123; <br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//this 指向 是obj对象</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123; <br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span><br>     &#125; <br> &#125; <br> <span class="hljs-keyword">const</span> resFn = fn.call(obj); <br> resFn();<br><br></code></pre></td></tr></table></figure><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li><li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li><li>箭头函数不能作为构造函数实例化</li><li>不能使用arguments变量</li><li>this不适合与this有关的回调，事件回调，对象的方法</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>age: <span class="hljs-number">20</span>,<br>say: <span class="hljs-function">() =&gt;</span> &#123;<br>alert(<span class="hljs-built_in">this</span>.age)<br>&#125;<br>&#125;<br><br>obj.say();<span class="hljs-comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span><br></code></pre></td></tr></table></figure><h3 id="剩余参数（★★）"><a href="#剩余参数（★★）" class="headerlink" title="剩余参数（★★）"></a>剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p><p>可以给函数形参传默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a,b,c=<span class="hljs-number">0</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br></code></pre></td></tr></table></figure><p>与解构赋值配合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params">&#123;host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,username,password,port&#125;</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(host);<br>    <span class="hljs-built_in">console</span>.log(username);<br>    <span class="hljs-built_in">console</span>.log(password);<br>    <span class="hljs-built_in">console</span>.log(port);<br>&#125;<br>connct(&#123;<br>    host:<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    username:<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password:<span class="hljs-string">&#x27;root&#x27;</span>,<br>    port:<span class="hljs-number">3306</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span> (<span class="hljs-params">first, ...args</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(first); <span class="hljs-comment">// 10</span><br>     <span class="hljs-built_in">console</span>.log(args); <span class="hljs-comment">// [20, 30] </span><br> &#125;<br> sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br><br></code></pre></td></tr></table></figure><h4 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> students = [<span class="hljs-string">&#x27;wangwu&#x27;</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-string">&#x27;lisi&#x27;</span>];<br><span class="hljs-keyword">let</span> [s1, ...s2] = students; <br><span class="hljs-built_in">console</span>.log(s1);  <span class="hljs-comment">// &#x27;wangwu&#x27; </span><br><span class="hljs-built_in">console</span>.log(s2);  <span class="hljs-comment">// [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span><br><br></code></pre></td></tr></table></figure><h2 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h2><h3 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a,b...arg</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//1</span><br>    <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//2</span><br>    <span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//[3,4,5,6]</span><br>&#125;<br>fn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><h3 id="Array-的扩展方法（★★）"><a href="#Array-的扩展方法（★★）" class="headerlink" title="Array 的扩展方法（★★）"></a>Array 的扩展方法（★★）</h3><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ary = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>...ary  <span class="hljs-comment">// 1, 2, 3</span><br><span class="hljs-built_in">console</span>.log(...ary);    <span class="hljs-comment">// 1 2 3,相当于下面的代码</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h5 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 方法一 </span><br> <span class="hljs-keyword">let</span> ary1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <span class="hljs-keyword">let</span> ary2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br> <span class="hljs-keyword">let</span> ary3 = [...ary1, ...ary2];<br> <span class="hljs-comment">// 方法二 </span><br> ary1.push(...ary2);<br></code></pre></td></tr></table></figure><h5 id="将伪数组或可遍历对象转换为真正的数组"><a href="#将伪数组或可遍历对象转换为真正的数组" class="headerlink" title="将伪数组或可遍历对象转换为真正的数组"></a>将伪数组或可遍历对象转换为真正的数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> oDivs = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>); <br>oDivs = [...oDivs];<br></code></pre></td></tr></table></figure><h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//定义一个集合</span><br><span class="hljs-keyword">let</span> arrayLike = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    length: <span class="hljs-number">3</span><br>&#125;; <br><span class="hljs-comment">//转成数组</span><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-built_in">Array</span>.from(arrayLike); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></code></pre></td></tr></table></figure><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arrayLike = &#123; <br>    <span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;length&quot;</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">let</span> newAry = <span class="hljs-built_in">Array</span>.from(arrayLike, <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item *<span class="hljs-number">2</span>)<span class="hljs-comment">//[2,4]</span><br><br></code></pre></td></tr></table></figure><p>注意：如果是对象，那么属性需要写对应的索引</p><h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ary = [&#123;<br>     id: <span class="hljs-number">1</span>,<br>     name: <span class="hljs-string">&#x27;张三&#x27;</span><br> &#125;, &#123; <br>     id: <span class="hljs-number">2</span>,<br>     name: <span class="hljs-string">&#x27;李四&#x27;</span><br> &#125;]; <br> <span class="hljs-keyword">let</span> target = ary.find(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item.id == <span class="hljs-number">2</span>);<span class="hljs-comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span><br><br></code></pre></td></tr></table></figure><h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ary = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>];<br><span class="hljs-keyword">let</span> index = ary.findIndex(<span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> value &gt; <span class="hljs-number">9</span>); <br><span class="hljs-built_in">console</span>.log(index); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">2</span>) <span class="hljs-comment">// true </span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">4</span>) <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">`zhangsan`</span>;<br><br></code></pre></td></tr></table></figure><h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;张三&#x27;</span>; <br><span class="hljs-keyword">let</span> sayHello = <span class="hljs-string">`hello,my name is <span class="hljs-subst">$&#123;name&#125;</span>`</span>; <span class="hljs-comment">// hello, my name is zhangsan 拼接字符串方式</span><br></code></pre></td></tr></table></figure><h5 id="模板字符串中可以直接换行"><a href="#模板字符串中可以直接换行" class="headerlink" title="模板字符串中可以直接换行"></a>模板字符串中可以直接换行</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> result = &#123; <br>    name: <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <br>    age: <span class="hljs-number">20</span>,<br>    sex: <span class="hljs-string">&#x27;男&#x27;</span> <br>&#125; <br><span class="hljs-keyword">let</span> html = <span class="hljs-string">` &lt;div&gt;</span><br><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">&lt;/div&gt; `</span>;<br><br></code></pre></td></tr></table></figure><h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;哈哈哈哈 追不到我吧 我就是这么强大&#x27;</span>;<br> &#125;; <br> <span class="hljs-keyword">let</span> greet = <span class="hljs-string">`<span class="hljs-subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;<br> <span class="hljs-built_in">console</span>.log(greet); <span class="hljs-comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span><br><br></code></pre></td></tr></table></figure><h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul><li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;<br>str.startsWith(<span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-comment">// true </span><br>str.endsWith(<span class="hljs-string">&#x27;!&#x27;</span>)       <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;x&#x27;</span>.repeat(<span class="hljs-number">3</span>)      <span class="hljs-comment">// &quot;xxx&quot; </span><br><span class="hljs-string">&#x27;hello&#x27;</span>.repeat(<span class="hljs-number">2</span>)  <span class="hljs-comment">// &quot;hellohello&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Set-集合-数据结构（★★）"><a href="#Set-集合-数据结构（★★）" class="headerlink" title="Set (集合)数据结构（★★）"></a>Set (集合)数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值，自动去重。</p><p>Set本身是一个构造函数，用来生成  Set  数据结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br></code></pre></td></tr></table></figure><p>Set函数可以接受一个数组作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]);<span class="hljs-comment">//&#123;1, 2, 3, 4&#125;</span><br><span class="hljs-comment">//转换为数组</span><br><span class="hljs-keyword">let</span> arr = [...s] <span class="hljs-comment">//通过展开运算符</span><br></code></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>s.size;<span class="hljs-comment">//size属性，得到</span><br> s.add(<span class="hljs-number">1</span>).add(<span class="hljs-number">2</span>).add(<span class="hljs-number">3</span>); <span class="hljs-comment">// 向 set 结构中添加值 </span><br> s.delete(<span class="hljs-number">2</span>)             <span class="hljs-comment">// 删除 set 结构中的2值   </span><br> s.has(<span class="hljs-number">1</span>)                <span class="hljs-comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span><br> s.clear()               <span class="hljs-comment">// 清除 set 结构中的所有值</span><br> <span class="hljs-comment">//注意：删除的是元素的值，不是代表的索引</span><br></code></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">s.forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(value))<br><br></code></pre></td></tr></table></figure><h3 id="Map数据结构"><a href="#Map数据结构" class="headerlink" title="Map数据结构"></a>Map数据结构</h3><h4 id="实例方法-1"><a href="#实例方法-1" class="headerlink" title="实例方法"></a>实例方法</h4><p>Map对象保存键值对，并且能够记住键的原始插入顺序，任何值都可以作为一个键或一个值</p><p>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of"><code>for...of</code></a> 循环在每次迭代后会返回一个形式为[key，value]的数组。</p><p><code>Map.prototype.clear() </code>移除Map对象的所有键/值对 。</p><p><code>Map.prototype.clear()</code>如果 <code>Map</code> 对象中存在该元素，则移除它并返回 *<code>true</code>*；否则如果该元素不存在则返回 <code>*false*</code>。随后调用 <code>Map.prototype.has(key)</code> 将返回 <code>false</code></p><p><code>Map.prototype.forEach(callbackFn[,thisArg])</code>按插入顺序，为 <code>Map</code>对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。</p><p><code>Map.prototype.get(key)</code> 返回键对应的值，如果不存在，则返回undefined。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/has"><code>Map.prototype.has(key)</code></a>返回一个布尔值，表示Map实例是否包含键对应的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br><br><span class="hljs-keyword">let</span> keyObj = &#123;&#125;; <span class="hljs-comment">//可以是字符串，方法，对象</span><br><span class="hljs-keyword">let</span> keyFunc = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;<br><span class="hljs-keyword">let</span> keyString = <span class="hljs-string">&#x27;a string&#x27;</span>;<br><br><span class="hljs-comment">// 添加键</span><br>myMap.set(keyString, <span class="hljs-string">&quot;和键&#x27;a string&#x27;关联的值&quot;</span>);<br>myMap.set(keyObj, <span class="hljs-string">&quot;和键keyObj关联的值&quot;</span>);<br>myMap.set(keyFunc, <span class="hljs-string">&quot;和键keyFunc关联的值&quot;</span>);<br><br>myMap.size; <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 读取值</span><br>myMap.get(keyString);    <span class="hljs-comment">// &quot;和键&#x27;a string&#x27;关联的值&quot;</span><br>myMap.get(keyObj);       <span class="hljs-comment">// &quot;和键keyObj关联的值&quot;</span><br>myMap.get(keyFunc);      <span class="hljs-comment">// &quot;和键keyFunc关联的值&quot;</span><br><br>myMap.get(<span class="hljs-string">&#x27;a string&#x27;</span>);   <span class="hljs-comment">// &quot;和键&#x27;a string&#x27;关联的值&quot;</span><br>                         <span class="hljs-comment">// 因为keyString === &#x27;a string&#x27;</span><br>myMap.get(&#123;&#125;);           <span class="hljs-comment">// undefined, 因为keyObj !== &#123;&#125;</span><br>myMap.get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;); <span class="hljs-comment">// undefined, 因为keyFunc !== function () &#123;&#125;</span><br><br><span class="hljs-comment">////////////******///////////</span><br><span class="hljs-keyword">let</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>myMap.set(<span class="hljs-literal">NaN</span>, <span class="hljs-string">&quot;not a number&quot;</span>);<br><br>myMap.get(<span class="hljs-literal">NaN</span>); <span class="hljs-comment">// &quot;not a number&quot;</span><br><br><span class="hljs-keyword">let</span> otherNaN = <span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br>myMap.get(otherNaN); <span class="hljs-comment">// &quot;not a number&quot;</span><br></code></pre></td></tr></table></figure><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><p>通过for..of</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>myMap.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;zero&quot;</span>);<br>myMap.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;one&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> myMap) &#123;<br>  <span class="hljs-built_in">console</span>.log(key + <span class="hljs-string">&quot; = &quot;</span> + value);<br>&#125;<br><span class="hljs-comment">// 将会显示两个log。一个是&quot;0 = zero&quot;另一个是&quot;1 = one&quot;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> myMap.keys()) &#123;<br>  <span class="hljs-built_in">console</span>.log(key);<br>&#125;<br><span class="hljs-comment">// 将会显示两个log。 一个是 &quot;0&quot; 另一个是 &quot;1&quot;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> myMap.values()) &#123;<br>  <span class="hljs-built_in">console</span>.log(value);<br>&#125;<br><span class="hljs-comment">// 将会显示两个log。 一个是 &quot;zero&quot; 另一个是 &quot;one&quot;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> myMap.entries()) &#123;<br>  <span class="hljs-built_in">console</span>.log(key + <span class="hljs-string">&quot; = &quot;</span> + value);<br>&#125;<br><span class="hljs-comment">// 将会显示两个log。 一个是 &quot;0 = zero&quot; 另一个是 &quot;1 = one&quot;</span><br></code></pre></td></tr></table></figure><h4 id="通过forEach"><a href="#通过forEach" class="headerlink" title="通过forEach()"></a>通过forEach()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">myMap.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, key</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(key + <span class="hljs-string">&quot; = &quot;</span> + value);<br>&#125;)<br><span class="hljs-comment">// 将会显示两个logs。 一个是 &quot;0 = zero&quot; 另一个是 &quot;1 = one&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Symbol关键字"><a href="#Symbol关键字" class="headerlink" title="Symbol关键字"></a>Symbol关键字</h3><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。是一种类似于字符串的数据类型</p><h4 id="Symbol的特点"><a href="#Symbol的特点" class="headerlink" title="Symbol的特点"></a>Symbol的特点</h4><ul><li>Symbol的值是唯一的，用来解决命名冲突的问题</li><li>Symbol值不能与其他数据进行运算</li><li>Symbol定义的对象属性不能使用for…in遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</li></ul><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建Symbol</span><br><span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Symbol</span>();<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;第一个&#x27;</span>);<br><span class="hljs-keyword">let</span> s3 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;第二个&#x27;</span>)<br><span class="hljs-comment">//s2不等于s3</span><br><span class="hljs-comment">//Symbol.for 创建</span><br><span class="hljs-keyword">let</span> s4 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">let</span> s5 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-comment">//s4等于s5</span><br><span class="hljs-comment">//////////////////////////////////////////</span><br><span class="hljs-comment">//对象添加Symbol类型数据</span><br><span class="hljs-keyword">let</span> game = &#123;<br>    <br>&#125;<br><span class="hljs-keyword">let</span> methods = &#123;<br>    up:<span class="hljs-built_in">Symbol</span>(),<br>    down:<span class="hljs-built_in">Symbol</span>()<br>&#125;<br>game[methods.up] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我可以上升&quot;</span>);<br>&#125;<br>game[methods.down] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我可以快速下降&quot;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(game);<br><span class="hljs-comment">//方法2</span><br><span class="hljs-keyword">let</span> youxi = &#123;<br>    name:<span class="hljs-string">&quot;狼人杀&quot;</span>,<br>    [<span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;zibao&#x27;</span>)]:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我可以发言&#x27;</span>);<br>    &#125;,<br>    [<span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;zibao&#x27;</span>)]:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我可以自爆&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(youxi);<br></code></pre></td></tr></table></figure><h4 id="Symbol内置属性"><a href="#Symbol内置属性" class="headerlink" title="Symbol内置属性"></a>Symbol内置属性</h4><p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><p>引用数据类型：对象(Object)、数组(Array)、函数(Function)。</p><h2 id="迭代器（iterator）"><a href="#迭代器（iterator）" class="headerlink" title="迭代器（iterator）"></a>迭代器（iterator）</h2><p>迭代器是一个接口，为各种不同的数据提供统一的访问机制。任何数据结构只要部署iterator结构，就可以完成遍历操作</p><p>ES6新增for of，迭代器为for of服务 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//声明一个对象</span><br>        <span class="hljs-keyword">const</span> banji = &#123;<br>            name: <span class="hljs-string">&quot;终极一班&quot;</span>,<br>            stus: [<br>                <span class="hljs-string">&#x27;xiaoming&#x27;</span>,<br>                <span class="hljs-string">&#x27;xiaoning&#x27;</span>,<br>                <span class="hljs-string">&#x27;xiaotian&#x27;</span>,<br>                <span class="hljs-string">&#x27;knight&#x27;</span><br>            ],<br>            [<span class="hljs-built_in">Symbol</span>.iterator]() &#123;<br>                <span class="hljs-comment">//索引变量</span><br>                <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br>                <span class="hljs-comment">//</span><br>                <span class="hljs-keyword">let</span> _this = <span class="hljs-built_in">this</span>;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    next: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                        <span class="hljs-keyword">if</span> (index &lt; _this.stus.length) &#123;<br>                            <span class="hljs-keyword">const</span> result = &#123; <span class="hljs-attr">value</span>: _this.stus[index], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;;<br>                            <span class="hljs-comment">//下标自增</span><br>                            index++;<br>                            <span class="hljs-comment">//返回结果</span><br>                            <span class="hljs-keyword">return</span> result;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;;<br>                        &#125;<br>                    &#125;<br>                &#125;;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//遍历这个对象 </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> banji) &#123;<br>            <span class="hljs-built_in">console</span>.log(v);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>生成器其实就是一个特殊的函数，异步编程的一种解决方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> * <span class="hljs-title">gen</span>(<span class="hljs-params">arg</span>)</span>&#123; <span class="hljs-comment">//声明方式</span><br>    <span class="hljs-built_in">console</span>.log(arg);<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;2&#x27;</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;3&#x27;</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello generator&quot;</span>);<br>&#125;<br><span class="hljs-keyword">let</span> interator = gen(<span class="hljs-string">&#x27;AAA&#x27;</span>);  <span class="hljs-comment">//生成器可以传参，next也可以传参</span><br><span class="hljs-built_in">console</span>.log(inerator.next()); <span class="hljs-comment">//执行方式  返回yield后面的字面量</span><br><span class="hljs-built_in">console</span>.log(inerator.next(<span class="hljs-string">&#x27;BBB&#x27;</span>)); <span class="hljs-comment">//执行方式  &#x27;BBB&#x27;作为第一个yield的返回结果</span><br><span class="hljs-built_in">console</span>.log(inerator.next(<span class="hljs-string">&#x27;CCC&#x27;</span>)); <span class="hljs-comment">//执行方式  &#x27;CCC&#x27;将作为第二个yield的返回结果</span><br><span class="hljs-built_in">console</span>.log(inerator.next()); <span class="hljs-comment">//执行方式 </span><br><br></code></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//生成器函数在异步编程</span><br><span class="hljs-comment">//1s后输出111 2s后输出222 3s后输出333</span><br>        <span class="hljs-comment">//通过回调函数实现(回调地狱)</span><br>        <span class="hljs-comment">// setTimeout(()=&gt;&#123;</span><br>        <span class="hljs-comment">//     console.log(111);</span><br>        <span class="hljs-comment">//     setTimeout(()=&gt;&#123;</span><br>        <span class="hljs-comment">//         console.log(222);</span><br>        <span class="hljs-comment">//     &#125;,2000);</span><br>        <span class="hljs-comment">//     setTimeout(()=&gt;&#123;</span><br>        <span class="hljs-comment">//         console.log(333);</span><br>        <span class="hljs-comment">//     &#125;,3000);</span><br>        <span class="hljs-comment">// &#125;,1000);</span><br>        <span class="hljs-comment">///////////////////////////////////////</span><br>        <span class="hljs-comment">//通过生成器</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">one</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br>            &#125;,<span class="hljs-number">1000</span>)<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">two</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>)<br>            &#125;,<span class="hljs-number">2000</span>)<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">three</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">333</span>)<br>            &#125;,<span class="hljs-number">3000</span>)<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> * <span class="hljs-title">gen</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">yield</span> one();<br>            <span class="hljs-keyword">yield</span> two();<br>            <span class="hljs-keyword">yield</span> three();<br>        &#125;<br>        <span class="hljs-keyword">let</span> iterator = gen();<br>        iterator.next();<br>        iterator.next();<br>        iterator.next();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//模拟获取  用户数据  订单数据  商品数据 </span><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUsers</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;用户数据&#x27;</span>;<br>               <span class="hljs-comment">//调用 next 方法, 并且将数据传入</span><br>               iterator.next(data);<br>           &#125;, <span class="hljs-number">1000</span>);<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOrders</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;订单数据&#x27;</span>;<br>               iterator.next(data);<br>           &#125;, <span class="hljs-number">1000</span>)<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;商品数据&#x27;</span>;<br>               iterator.next(data);<br>           &#125;, <span class="hljs-number">1000</span>)<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> * <span class="hljs-title">gen</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-keyword">let</span> users = <span class="hljs-keyword">yield</span> getUsers();<br>           <span class="hljs-keyword">let</span> orders = <span class="hljs-keyword">yield</span> getOrders();<br>           <span class="hljs-keyword">let</span> goods = <span class="hljs-keyword">yield</span> getGoods();<br>       &#125;<br><br>       <span class="hljs-comment">//调用生成器函数</span><br>       <span class="hljs-keyword">let</span> iterator = gen();<br>       iterator.next();<br><br></code></pre></td></tr></table></figure><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>Promise是ES6引入的异步编程的新解决方案。语法上Promise是一个构造函数，用来封装异步操作并可以获取其成功或者失败的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> status = <span class="hljs-literal">false</span>;<br>     <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolove, reject</span>) </span>&#123;<br>         <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>             <span class="hljs-keyword">if</span> (status) &#123;<br>                 <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;数据库用户数据读取成功&#x27;</span>;<br>                 resolove(data);<br>             &#125;<br>             <span class="hljs-keyword">else</span>&#123;<br>                 <span class="hljs-keyword">let</span> err = <span class="hljs-string">&#x27;读取失败&#x27;</span>;<br>                 reject(err);<br>             &#125;<br>         &#125;, <span class="hljs-number">1000</span>);<br>     &#125;);<br>     p.then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>         <span class="hljs-built_in">console</span>.log(value);<br>     &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) </span>&#123;<br>         <span class="hljs-built_in">console</span>.error(reason);<br>     &#125;)<br><br></code></pre></td></tr></table></figure><p>Promise的then属性，当Promise对象调用第一个function时调用第一个函数，调用第二个function时调用第二个函数</p><h3 id="应用1：Node-js读取文件"><a href="#应用1：Node-js读取文件" class="headerlink" title="应用1：Node.js读取文件"></a>应用1：Node.js读取文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入 fs 模块</span><br> <span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// fs.readFile(&#x27;./resources/hahaha.txt&#x27;,(err,data)=&gt;&#123;</span><br><span class="hljs-comment">//     if(err) </span><br><span class="hljs-comment">//         throw err;</span><br><span class="hljs-comment">//     console.log(data.toString());</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//****************使用Promise进行封装************************\\</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)</span>&#123;<br>    fs.readFile(<span class="hljs-string">&#x27;./resources/hahaha.txts&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(err) reject(err);<br>        resolve(data)<br>    &#125;);<br>&#125;);<br>p.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123; <span class="hljs-comment">//成功时</span><br>    <span class="hljs-built_in">console</span>.log(value.toString());<br>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)</span>&#123; <span class="hljs-comment">//失败时</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;文件读取失败&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Promise-的then"><a href="#Promise-的then" class="headerlink" title="Promise 的then"></a>Promise 的then</h3><p>then()方法的返回结果是Promise对象，对象状态由回调函数的执行结果决定</p><p>1、如果或回调函数中的返回的结果是非Promise类型的属性，状态为成功，则返回的状态为(resolved)成功，返回的值为return值</p><p>2、如果返回值是Promise对象，则返回的状态为上面return的Promise对象的状态</p><p>3、如果是抛出错误，则返回的状态为失败，返回值是失败值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建 promise 对象</span><br>       <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span>&#123;<br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               resolve(<span class="hljs-string">&#x27;用户数据&#x27;</span>);<br>               <span class="hljs-comment">// reject(&#x27;出错啦&#x27;);</span><br>           &#125;, <span class="hljs-number">1000</span>)<br>       &#125;);<br><br>       <span class="hljs-comment">//调用 then 方法  then方法的返回结果是 Promise 对象, 对象状态由回调函数的执行结果决定</span><br>       <span class="hljs-comment">//1. 如果回调函数中返回的结果是 非 promise 类型的属性, 状态为成功, 返回值为对象的成功的值</span><br><br>       <span class="hljs-comment">// const result = p.then(value =&gt; &#123;</span><br>       <span class="hljs-comment">//     console.log(value);</span><br>       <span class="hljs-comment">//     //1. 非 promise 类型的属性</span><br>       <span class="hljs-comment">//     // return &#x27;iloveyou&#x27;;</span><br>       <span class="hljs-comment">//     //2. 是 promise 对象</span><br>       <span class="hljs-comment">//     // return new Promise((resolve, reject)=&gt;&#123;</span><br>       <span class="hljs-comment">//     //     // resolve(&#x27;ok&#x27;);</span><br>       <span class="hljs-comment">//     //     reject(&#x27;error&#x27;);</span><br>       <span class="hljs-comment">//     // &#125;);</span><br>       <span class="hljs-comment">//     //3. 抛出错误</span><br>       <span class="hljs-comment">//     // throw new Error(&#x27;出错啦!&#x27;);</span><br>       <span class="hljs-comment">//     throw &#x27;出错啦!&#x27;;</span><br>       <span class="hljs-comment">// &#125;, reason=&gt;&#123;</span><br>       <span class="hljs-comment">//     console.warn(reason);</span><br>       <span class="hljs-comment">// &#125;);</span><br><br>       <span class="hljs-comment">//链式调用</span><br>       p.then(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><br>       &#125;).then(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><br>       &#125;);<br></code></pre></td></tr></table></figure><h3 id="Promise-的catch"><a href="#Promise-的catch" class="headerlink" title="Promise 的catch"></a>Promise 的catch</h3><p>用来实现失败时执行，其实用then也能做，相当于一个语法糖</p><p>//Promise更详细的课程在后面学习</p><h1 id="jsES6中的类和对象"><a href="#jsES6中的类和对象" class="headerlink" title="jsES6中的类和对象"></a>jsES6中的类和对象</h1><h2 id="创建类和对象"><a href="#创建类和对象" class="headerlink" title="创建类和对象"></a>创建类和对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uanme</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;Liudehua&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(ldh.uname);<br></code></pre></td></tr></table></figure><ol><li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li><li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li><li>多个函数方法之间不需要添加逗号分隔</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li></ol><h2 id="类中添加方法"><a href="#类中添加方法" class="headerlink" title="类中添加方法"></a>类中添加方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uanme</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">sing</span>(<span class="hljs-params">songName</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(songName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constuctor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">money</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br>son.money;<br></code></pre></td></tr></table></figure><p>子类使用super关键字访问父类的方法，这里调用父类的函数，可以是构造函数，可以是普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义了父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>&#125;<br> &#125;<br><span class="hljs-comment">//子元素继承父类</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(x, y); <span class="hljs-comment">//使用super调用了父类中的构造函数</span><br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    son.sum(); <span class="hljs-comment">//结果为3</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong> </p><ol><li>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</li><li>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</li><li>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</li></ol><p>super.父类方法名()可调用父类的普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 父类有加法方法</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>   &#125;<br> &#125;<br> <span class="hljs-comment">// 子类继承父类加法方法 同时 扩展减法方法</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-comment">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span><br>   <span class="hljs-built_in">super</span>(x, y);<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">subtract</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x - <span class="hljs-built_in">this</span>.y);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);<br>son.subtract(); <span class="hljs-comment">//2</span><br>son.sum();<span class="hljs-comment">//8</span><br></code></pre></td></tr></table></figure><h2 id="ES6中的注意点"><a href="#ES6中的注意点" class="headerlink" title="ES6中的注意点"></a>ES6中的注意点</h2><p>ES6必须先定义类，再才能实例化</p><p>类里面共有的属性和方法一定要加this</p><p>类里面的this指向问题：constructor里面的this指向创建的对象 方法中的this指向调用者</p><p>##TAB选项栏案例</p><p>#构造函数与原型（ES6之前）</p><p>##对象的三种创建方式–复习</p><ol><li><p>字面量方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br></code></pre></td></tr></table></figure></li><li><p>new关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure></li><li><p>构造函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure><h2 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h2></li></ol><h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(ldh.uname);<span class="hljs-comment">//实例成员只能通过实例化的对象来访问</span><br></code></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>ES6的静态成员通过static关键字，静态成员只能由类进行访问，它属于类，而不属于对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">Phone</span></span>&#123;<br>    <span class="hljs-keyword">static</span> name = <span class="hljs-string">&#x27;手机&#x27;</span>;<br><span class="hljs-function"><span class="hljs-title">call</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> nakiya = <span class="hljs-keyword">new</span> Phone();<br>Phone.name;<span class="hljs-comment">//手机</span><br>nakiya.name;<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br>Star.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(Star.sex);<span class="hljs-comment">//静态成员只能通过构造函数来访问</span><br></code></pre></td></tr></table></figure><h2 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h2><p>存在浪费内存的问题：每创建一个对象都要单独开辟一个空间</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106141737235.png" alt="image-20210106141737235"></p><h2 id="构造函数原型prototype"><a href="#构造函数原型prototype" class="headerlink" title="构造函数原型prototype"></a>构造函数原型prototype</h2><p>每一个构造函数都有一个prototype属性，指向另一个对象。这个prototype本身都是一个对象，这个对象的所以属性和方法，都会被构造函数所拥有</p><p>把那些不变的方法，直接定义在prototype对象上，这样所有对象的实例可以共享这些方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>   <span class="hljs-comment">//  this.sing = function() &#123;</span><br>     <span class="hljs-comment">//console.log(&#x27;我会唱歌&#x27;);</span><br>    &#125;<br>&#125;<br>Star.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//在原型对象上添加一个共有的方法</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br>ldh.sing();<br></code></pre></td></tr></table></figure><p>公共属性定义在构造函数里，公共方法放在原型对象里面</p><h2 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型 _proto_"></a>对象原型 <code>_proto_</code></h2><p>对象有一个属性<code>_proto_</code>指向构造函数的prototype原型对象，之所以可以使用构造函数prototype原型对象的属性和方法 ，就是因为对象有<code>_proto</code>_存在</p><p>​    <img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106143345685.png" alt="image-20210106143345685"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106143416554.png" alt="image-20210106143416554"></p><p>方法的查找规则：首先看ldh对象身上是否有sing方法，如果有就执行这个对象上的sing</p><p>如果没有sing这个方法，应为_proto_的存在，就去构造函数原型对象prototype身上查找</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。<br>如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。<br>如果还没有就查找原型对象的原型（<span class="hljs-built_in">Object</span>的原型对象）。<br>依此类推一直找到 <span class="hljs-built_in">Object</span> 为止（<span class="hljs-literal">null</span>）。<br>__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。<br></code></pre></td></tr></table></figure><h2 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h2><p>对象原型(<em>proto</em>)和构造函数(<em>prototype</em>)原型对象里面都有一个属性constructor属性，constructor指向构造函数本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//如果我们这样写就有问题：</span><br>Star.prototype = &#123;<br>    <span class="hljs-comment">//如果我们修改了原来的原型对象，给原型对象赋值的是一个新的对象，则必须手动让construcor指向原来的构造函数</span><br>    <span class="hljs-title">constructor</span>:<span class="hljs-title">Star</span>,//重要<br>    <span class="hljs-title">sing</span>:<span class="hljs-title">function</span>(<span class="hljs-params"></span>)&#123;<br>&#125;,<br>    movie:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106145224927.png" alt="image-20210106145224927"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106150011894.png" alt="image-20210106150011894"></p><p>原型链的作用就在于一个对象可以一层接着一层向上查找</p><p>JavaScript 成员查找机制 按照原型链的方向进行查找</p><p>1、当访问一个对象的属性（或者方法时），先查找这个对象本身有无该属性</p><p>2、如果没有就查找它的原型(<code>_proto_</code>指向的<code>prototype</code>原型对象)</p><p>3、如果还没有就查找原型对象的原型（object原型对象）</p><p>4、还是查找不到则到了最顶层null</p><p>原型对象中的this指向问题</p><p>1、在构造函数中，this指向对象实例</p><p>2、在原型对象中，原型对象函数中this指向实例对象</p><h2 id="get和set关键字"><a href="#get和set关键字" class="headerlink" title="get和set关键字"></a>get和set关键字</h2><p>get在读取属性值时会调用，set在修改属性值时会调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br>         <span class="hljs-keyword">get</span> <span class="hljs-title">price</span>() &#123;<br>             <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;价格属性被读取&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;呵呵呵&quot;</span>;<br>         &#125;<br>         <span class="hljs-keyword">set</span> <span class="hljs-title">price</span>(<span class="hljs-params">newVal</span>) &#123;<br>             <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;价格被修改&quot;</span>);<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> Phone();<br>     <span class="hljs-built_in">console</span>.log(s.price);<br>     s.price = <span class="hljs-string">&#x27;free&#x27;</span>;<br></code></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://i.loli.net/2021/01/14/8RuJGQS9hecarmE.png" alt="image.png"></p><h2 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h2><p>通过原型对象，对原来的内置对象进行扩展自定义方法，比如给数组增加自定义求偶数的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.prototype);<br><span class="hljs-built_in">Array</span>.prototype.sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt; <span class="hljs-built_in">this</span>.length;i++)&#123;<br>        sum+=<span class="hljs-built_in">this</span>[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr.sum();<br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="call-方法"><a href="#call-方法" class="headerlink" title="call()方法"></a>call()方法</h2><p>可以修改函数的this指向</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106214107229.png" alt="image-20210106214107229"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">x,y</span>)</span>&#123;<br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hahaha&quot;</span>);<br>         <span class="hljs-built_in">console</span>.log(x+y);<br>     &#125;<br>     <span class="hljs-keyword">var</span> o =&#123;<br>         name : <span class="hljs-string">&#x27;andy&#x27;</span><br>     &#125;<br>     <span class="hljs-comment">// fn.call(); 可以调用函数</span><br>     fn.call(o,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">//改变了函数的this指向 此时函数的this指向了o这个对象</span><br></code></pre></td></tr></table></figure><h2 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h2><p><code>Number.EPSILON</code>是JavaScript表示的最小精度，只要小于这个数，则代表这两个数相等</p><p>二进制和八进制</p><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 <code>0b</code>和<code>0o</code>表示。</p><p><code>Number.isFinite() </code>与<code> Number.isNaN()</code></p><p><code>Number.isFinite()</code> 用来检查一个数值是否为有限的<br><code>Number.isNaN()</code> 用来检查一个值是否为 NaN</p><p><code>Number.parseInt()</code> 与 <code>Number.parseFloat()</code></p><p>ES6 将全局方法 parseInt和 parseFloat，移植到 Number对象上面，使用不变。</p><p><code>Math.trunc</code></p><p>用于去除一个数的小数部分，返回整数部分。</p><p><code>Number.isInteger</code></p><p><code>Number.isInteger()</code> 用来判断一个数值是否为整数</p><h2 id="对象方法扩展"><a href="#对象方法扩展" class="headerlink" title="对象方法扩展"></a>对象方法扩展</h2><p><code>Object.is</code>判断两个值是否完全相等</p><p>两个NaN也是相等的，用===返回false</p><p><code>Object.assign</code>用于对象的合并</p><p><code>Object.assign(obj1,obj2)</code>   <code>obj2</code>合并<code>obj1</code> </p><p><code>Object.SetPrototypeof</code> 设置原型对象</p><p><code>Object.getPrototypeof</code> 获取原型对象</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>模块化是指一个大的程序文件，拆分成许多小的文件，然后将小的文件合并</p><p>模块化的好处：</p><ul><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ul><p>暴露方法</p><h3 id="分别暴露"><a href="#分别暴露" class="headerlink" title="分别暴露"></a>分别暴露</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> shool = <span class="hljs-string">&#x27;尚硅谷&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">teach</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;哈哈哈&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="统一暴露"><a href="#统一暴露" class="headerlink" title="统一暴露"></a>统一暴露</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">let</span> shool = <span class="hljs-string">&#x27;尚硅谷&#x27;</span>; <br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">teach</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;哈哈哈&quot;</span>);<br>&#125;<br><span class="hljs-keyword">export</span>&#123;shool,teach&#125;;<br></code></pre></td></tr></table></figure><h3 id="默认暴露"><a href="#默认暴露" class="headerlink" title="默认暴露"></a>默认暴露</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    school :<span class="hljs-string">&#x27;ATGUIGU&#x27;</span>,<br>    change: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;哈哈哈&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通用导入方式"><a href="#通用导入方式" class="headerlink" title="通用导入方式"></a>通用导入方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m1 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/js/m1.js&quot;</span> <span class="hljs-comment">//m1是别名，重名时也可以这样用</span><br></code></pre></td></tr></table></figure><h3 id="解构赋值形势"><a href="#解构赋值形势" class="headerlink" title="解构赋值形势"></a>解构赋值形势</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;shool,teach&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/js/m1.js&quot;</span><br></code></pre></td></tr></table></figure><p>并且可以直接用</p><h3 id="默认暴露时如何导入"><a href="#默认暴露时如何导入" class="headerlink" title="默认暴露时如何导入"></a>默认暴露时如何导入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> m3&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/js/m1.js&quot;</span><br></code></pre></td></tr></table></figure><h3 id="简便导入"><a href="#简便导入" class="headerlink" title="简便导入"></a>简便导入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> m3 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/js/m1.js&quot;</span>; <span class="hljs-comment">//只针对默认暴露才行，直接写别名</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node.js(持续更新)</title>
    <link href="/2021/01/15/node%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/15/node%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js基础"><a href="#Node-js基础" class="headerlink" title="Node.js基础"></a>Node.js基础</h1><h2 id="npm包管理"><a href="#npm包管理" class="headerlink" title="npm包管理"></a>npm包管理</h2><h3 id="基于CommonJS规范"><a href="#基于CommonJS规范" class="headerlink" title="基于CommonJS规范"></a>基于CommonJS规范</h3><ul><li>内置的Node.js：在node.js官方文档可以看到</li><li>第三方的Node.js：通过npm进行安装</li><li>自定义的Node.js模块  ：通过common.js规范暴露导入</li></ul><h3 id="NPM-Node-Package-Manager"><a href="#NPM-Node-Package-Manager" class="headerlink" title="NPM: Node Package Manager"></a>NPM: Node Package Manager</h3><h4 id="全局安装package"><a href="#全局安装package" class="headerlink" title="全局安装package"></a>全局安装package</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ npm install <span class="hljs-keyword">forever</span> <span class="hljs-comment">--global (-g)</span><br>$ <span class="hljs-keyword">forever</span><br>$ npm uninstall <span class="hljs-keyword">forever</span> <span class="hljs-comment">--global</span><br>$ <span class="hljs-keyword">forever</span><br></code></pre></td></tr></table></figure><p><strong>全局安装包的目录</strong></p><p>Windows</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\你</span>的用户名<span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\R</span>oaming<span class="hljs-symbol">\n</span>pm<span class="hljs-symbol">\n</span>ode_modules<br></code></pre></td></tr></table></figure><h4 id="本地安装package"><a href="#本地安装package" class="headerlink" title="本地安装package"></a>本地安装package</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> ~/desktop<br><span class="hljs-variable">$</span> mkdir <span class="hljs-built_in">gp</span><span class="hljs-literal">-project</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> <span class="hljs-built_in">gp</span><span class="hljs-literal">-project</span><br><span class="hljs-variable">$</span> npm install underscore<br><span class="hljs-variable">$</span> npm list (<span class="hljs-built_in">ls</span>)<br></code></pre></td></tr></table></figure><h4 id="package-json初始化"><a href="#package-json初始化" class="headerlink" title="package.json初始化"></a>package.json初始化</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">pwd</span><br><span class="hljs-variable">$</span> npm init <span class="hljs-literal">-y</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> package.json<br></code></pre></td></tr></table></figure><h4 id="使用package-json"><a href="#使用package-json" class="headerlink" title="使用package.json"></a>使用package.json</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> npm install underscore -<span class="hljs-literal">-save</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> package.json<br><span class="hljs-variable">$</span> npm install lodash -<span class="hljs-literal">-save</span><span class="hljs-literal">-dev</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> package.json<br><span class="hljs-variable">$</span> <span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> node_modules<br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br><span class="hljs-variable">$</span> npm install<br><span class="hljs-variable">$</span> npm uninstall underscore -<span class="hljs-literal">-save</span><br><span class="hljs-variable">$</span> npm list | grep underscore<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> package.json<br></code></pre></td></tr></table></figure><h4 id="安装指定版本的包"><a href="#安装指定版本的包" class="headerlink" title="安装指定版本的包"></a>安装指定版本的包</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>pwd<br><span class="hljs-variable">$ </span>npm list<br><span class="hljs-variable">$ </span>npm info underscore<br><span class="hljs-variable">$ </span>npm view underscore versions<br><span class="hljs-variable">$ </span>npm install underscore<span class="hljs-variable">@1</span>.<span class="hljs-number">8.0</span><br><span class="hljs-variable">$ </span>npm list<br><span class="hljs-variable">$ </span>npm uninstall underscore<br><span class="hljs-variable">$ </span>npm list<br></code></pre></td></tr></table></figure><h5 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h5><p>如何分析，例如13.4.6分为major: 13, minor：4，patch：6</p><p><img src="https://i.loli.net/2021/01/15/RG2jPpcAf1tzrw8.png" alt="捕获.PNG"></p><p>这里^代表的只管理主版本号</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210115173728200.png" alt="image-20210115173728200"></p><p>~表示只管理主版本号和次版本号</p><p>不指定版本，直接写*表示最新版本</p><p>如果没有~和^表示版本号固定，写的啥就是啥</p><h4 id="更新本地安装的包"><a href="#更新本地安装的包" class="headerlink" title="更新本地安装的包"></a>更新本地安装的包</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> npm info underscore<br><span class="hljs-symbol">$</span> npm view underscore versions   查看版本<br><span class="hljs-symbol">$</span> npm install underscore@<span class="hljs-number">1.4</span><span class="hljs-number">.4</span> --save-dev<br><span class="hljs-symbol">$</span> npm list | grep gulp<br><span class="hljs-symbol">$</span> npm outdated <span class="hljs-comment">//~2.0.0表示patch, ^2.0.0表示minor * 表示xx最新版本</span><br><span class="hljs-symbol">$</span> npm list | grep gulp<br><span class="hljs-symbol">$</span> npm update<br></code></pre></td></tr></table></figure><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm cache clean <span class="hljs-comment">--force</span><br></code></pre></td></tr></table></figure><p>更多请参考老师的博客<a href="https://lurongtao.gitee.io/felixbooks-gp19-node.js/basics/01-Node.js%E5%9F%BA%E7%A1%80.html">https://lurongtao.gitee.io/felixbooks-gp19-node.js/basics/01-Node.js%E5%9F%BA%E7%A1%80.html</a></p><h2 id="node-js内置模块"><a href="#node-js内置模块" class="headerlink" title="node.js内置模块"></a>node.js内置模块</h2><h3 id="url方法"><a href="#url方法" class="headerlink" title="url方法"></a>url方法</h3><p>记录js日志的工具log4js</p><h4 id="parse方法"><a href="#parse方法" class="headerlink" title="parse方法"></a>parse方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-keyword">const</span> log4js = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;log4js&quot;</span>);<br>log4js.configure(&#123;<br>    appenders: &#123; <span class="hljs-attr">cheese</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;cheese.log&quot;</span> &#125; &#125;,<br>    categories: &#123; <span class="hljs-attr">default</span>: &#123; <span class="hljs-attr">appenders</span>: [<span class="hljs-string">&quot;cheese&quot;</span>], <span class="hljs-attr">level</span>: <span class="hljs-string">&quot;error&quot;</span> &#125; &#125;<br>  &#125;);<span class="hljs-comment">//配置</span><br><span class="hljs-keyword">var</span> logger = log4js.getLogger(<span class="hljs-string">&#x27;cheese&#x27;</span>);<br>logger.level = <span class="hljs-string">&quot;debug&quot;</span>;<br><span class="hljs-keyword">const</span> urlString = <span class="hljs-string">&#x27;http://www.baidu.com:443/path/index.html?id=2#tag=3&#x27;</span>;<br>logger.debug(url.parse(urlString));<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">[2021-01-15T21:08:33.877] [DEBUG] cheese - Url &#123;<br>  protocol: &#x27;http:&#x27;,<br>  slashes: true,<br>  auth: null,<br>  host: &#x27;www.baidu.com:443&#x27;,<br>  port: &#x27;443&#x27;,<br>  hostname: &#x27;www.baidu.com&#x27;,<br>  hash: &#x27;#tag=3&#x27;,<br>  search: &#x27;?id=2&#x27;,<br>  query: &#x27;id=2&#x27;,<br>  pathname: &#x27;/path/index.html&#x27;,<br>  path: &#x27;/path/index.html?id=2&#x27;,<br>  href: &#x27;http://www.baidu.com:443/path/index.html?id=2#tag=3&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  protocol: <span class="hljs-string">&#x27;http:&#x27;</span>,<br>  slashes: <span class="hljs-literal">true</span>,<br>  auth: <span class="hljs-literal">null</span>,<br>  host: <span class="hljs-string">&#x27;www.baidu.com:443&#x27;</span>,<br>  port: <span class="hljs-string">&#x27;443&#x27;</span>,<br>  hostname: <span class="hljs-string">&#x27;www.baidu.com&#x27;</span>,<br>  hash: <span class="hljs-string">&#x27;#tag=3&#x27;</span>,<br>  search: <span class="hljs-string">&#x27;?id=2&#x27;</span>,<br>  query: <span class="hljs-string">&#x27;id=2&#x27;</span>,<br>  pathname: <span class="hljs-string">&#x27;/path/index.html&#x27;</span>,<br>  path: <span class="hljs-string">&#x27;/path/index.html?id=2&#x27;</span>,<br>  href: <span class="hljs-string">&#x27;http://www.baidu.com:443/path/index.html?id=2#tag=3&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[2021-01-15T21:14:30.478] [DEBUG] cheese - http://www.baidu.com:443/path/index.html?id=2#tag=3<br></code></pre></td></tr></table></figure><h4 id="resolve方法"><a href="#resolve方法" class="headerlink" title="resolve方法"></a>resolve方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<br><span class="hljs-keyword">var</span> a = url.resolve(<span class="hljs-string">&#x27;/one/two/three&#x27;</span>, <span class="hljs-string">&#x27;four&#x27;</span>)<br><span class="hljs-keyword">var</span> b = url.resolve(<span class="hljs-string">&#x27;http://example.com/&#x27;</span>, <span class="hljs-string">&#x27;/one&#x27;</span>)<br><span class="hljs-keyword">var</span> c = url.resolve(<span class="hljs-string">&#x27;http://example.com/one&#x27;</span>, <span class="hljs-string">&#x27;/two&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(a + <span class="hljs-string">&quot;,&quot;</span> + b + <span class="hljs-string">&quot;,&quot;</span> + c)<br></code></pre></td></tr></table></figure><p>结果：<code>/one/two/four,http://example.com/one,http://example.com/two</code></p><h4 id="URLSearchParams方法"><a href="#URLSearchParams方法" class="headerlink" title="URLSearchParams方法"></a>URLSearchParams方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> urlParms = <span class="hljs-keyword">new</span> URLSearchParams(url.parse(urlString).search);<br><span class="hljs-built_in">console</span>.log(urlParms.get(<span class="hljs-string">&#x27;id&#x27;</span>));<span class="hljs-comment">//获取Url的相关参数</span><br></code></pre></td></tr></table></figure><h3 id="http方法"><a href="#http方法" class="headerlink" title="http方法"></a>http方法</h3><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> logger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../utils/log&#x27;</span>)<br><span class="hljs-keyword">const</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)<br><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> https = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;https&#x27;</span>)<br><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// const url = request.url</span><br>  <span class="hljs-comment">// logger.debug(response)</span><br>  <span class="hljs-comment">// debugger;</span><br>  <span class="hljs-comment">// let data = &#x27;&#x27;</span><br>  <span class="hljs-comment">// request.on(&#x27;data&#x27;, (chunk) =&gt; &#123;</span><br>  <span class="hljs-comment">//   data += chunk</span><br>  <span class="hljs-comment">// &#125;)</span><br>  <span class="hljs-comment">// request.on(&#x27;end&#x27;, () =&gt; &#123;</span><br>    <br>  <span class="hljs-comment">// &#125;)</span><br><br>  https.get(<span class="hljs-string">&#x27;https://www.xiaomiyoupin.com/mtop/mf/cat/list&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;&#x27;</span><br>    result.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>      data += chunk<br>    &#125;)<br>    result.on(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      response.writeHead(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span><br>      &#125;)<br>      response.write(data)<br>      response.end()<br>    &#125;)<br>  &#125;)<br><br>&#125;)<br><br>server.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;localhost:8080&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)<br><br><span class="hljs-keyword">const</span> postData = querystring.stringify(&#123;<br>  province: <span class="hljs-string">&#x27;上海&#x27;</span>,<br>  city: <span class="hljs-string">&#x27;上海&#x27;</span>,<br>  district: <span class="hljs-string">&#x27;宝山区&#x27;</span>,<br>  address: <span class="hljs-string">&#x27;同济支路199号智慧七立方3号楼2-4层&#x27;</span>,<br>  latitude: <span class="hljs-number">43.0</span>,<br>  longitude: <span class="hljs-number">160.0</span>,<br>  message: <span class="hljs-string">&#x27;求购一条小鱼&#x27;</span>,<br>  contact: <span class="hljs-string">&#x27;13666666&#x27;</span>,<br>  type: <span class="hljs-string">&#x27;sell&#x27;</span>,<br>  time: <span class="hljs-number">1571217561</span><br>&#125;)<br><br><span class="hljs-keyword">const</span> options = &#123;<br>  protocol: <span class="hljs-string">&#x27;http:&#x27;</span>,<br>  hostname: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  method: <span class="hljs-string">&#x27;post&#x27;</span>,<br>  port: <span class="hljs-number">3000</span>,<br>  path: <span class="hljs-string">&#x27;/data&#x27;</span>,<br>  headers: &#123;<br>    <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>    <span class="hljs-string">&#x27;Content-Length&#x27;</span>: Buffer.byteLength(postData)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> request = http.request(options, <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <br>  &#125;)<br>  request.write(postData)<br>  request.end()<br><br>  res.end()<br>&#125;)<br><br>server.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax(持续更新)</title>
    <link href="/2021/01/13/Ajax/"/>
    <url>/2021/01/13/Ajax/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>它是浏览器提供的一套方法，可以实现页面无刷新更新数据</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>页面上拉加载更多数据</li><li>列表数据无刷新分页</li><li>表单项离开焦点数据验证</li><li>搜索文字自动提示</li></ul><p>Ajax运行原理</p><p><img src="https://i.loli.net/2021/01/14/SOE7DUVIvBPLZex.png" alt="image-20210111200420944.png"></p><h2 id="XML-简介（历史）"><a href="#XML-简介（历史）" class="headerlink" title="XML 简介（历史）"></a>XML 简介（历史）</h2><p>xml 可扩展标记语言，XML被设计用来传输和存储数据，HTML有预定义标签，而XML没有</p><p>XML被用来Ajax与后端交换数据，现在使用的是<code>json</code>数据</p><h2 id="Ajax的特点"><a href="#Ajax的特点" class="headerlink" title="Ajax的特点"></a>Ajax的特点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>无需刷新页面而与服务器端进行通信</li><li>允许根据用户事件来更新部分页面内容</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>没有浏览历史，不可以回退</li><li>存在跨域问题</li><li>对搜索引擎不太友好，因为是动态创建的，所以爬虫不到</li></ul><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>规定了浏览器与万维网服务器之间互相通信的规则</p><p> 分为请求报文和响应报文</p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p><img src="https://i.loli.net/2021/01/14/A6WEXixneogLvw5.png" alt="image.png"></p><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p><img src="https://i.loli.net/2021/01/14/wcLuIHv14StglZB.png" alt="image.png"></p><h2 id="express基本使用"><a href="#express基本使用" class="headerlink" title="express基本使用"></a>express基本使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2. 创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3. 创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应</span><br>    response.send(<span class="hljs-string">&#x27;HELLO EXPRESS&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//4. 监听端口启动服务</span><br>app.listen(<span class="hljs-number">8001</span>, <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务已经启动, 8001 端口监听中....&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="AJAX请求基本操作"><a href="#AJAX请求基本操作" class="headerlink" title="AJAX请求基本操作"></a>AJAX请求基本操作</h2><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//创建对象</span><br>            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>            <span class="hljs-comment">//初始化 设置请求方法和url</span><br>            xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:8001/server&#x27;</span>);<br>            <span class="hljs-comment">//发送</span><br>            xhr.send();<br>            <span class="hljs-comment">//事件绑定 处理服务端的结果</span><br>            xhr.onreadystatechange =<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>)&#123; <span class="hljs-comment">//当为4时 服务端返回了所以结果</span><br>                    <span class="hljs-keyword">if</span>(xhr.status&gt;=<span class="hljs-number">200</span>&amp;&amp;xhr.status&lt;<span class="hljs-number">300</span>)<br>                        <span class="hljs-comment">//处理结果</span><br>                        <span class="hljs-built_in">console</span>.log(xhr.status);<br>                        <span class="hljs-built_in">console</span>.log(xhr.statusText);<br>                        <span class="hljs-built_in">console</span>.log(xhr.getAllResponseHeaders());<br>                        <span class="hljs-built_in">console</span>.log(xhr.response);<br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p>和get请求基本一样，要在服务端要定义<code>app.post</code></p><h3 id="如何接收服务端响应的json数据格式的数据"><a href="#如何接收服务端响应的json数据格式的数据" class="headerlink" title="如何接收服务端响应的json数据格式的数据"></a>如何接收服务端响应的json数据格式的数据</h3><p>通过Ajax设置接收的数据格式为<code>xhr.responseType = &#39;json&#39;</code>，即可直接得到json数据格式的数据，node.js响应的只能是字符串或者是buffer</p><h3 id="如何解决IE缓存问题"><a href="#如何解决IE缓存问题" class="headerlink" title="如何解决IE缓存问题"></a>如何解决IE缓存问题</h3><p><code>xhr.open(&quot;GET&quot;,&#39;http://127.0.0.1:8000/ie?t=&#39;+Data.now())</code></p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 超时</span><br>xhr.timeout = <span class="hljs-number">2000</span>；<br>xhr.ontimeout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-string">&quot;请求超时&quot;</span>);<br>&#125;<br><span class="hljs-comment">//网络异常</span><br>xhr.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-string">&quot;你的网络似乎出了问题&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><p>用<code>xhr.abort()</code>方法可以取消请求</p><h3 id="重复请求"><a href="#重复请求" class="headerlink" title="重复请求"></a>重复请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">      <span class="hljs-comment">//获取元素对象</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">let</span> x = <span class="hljs-literal">null</span>;</span><br><span class="javascript">      <span class="hljs-comment">//标识变量</span></span><br><span class="javascript">      <span class="hljs-keyword">let</span> isSending = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 是否正在发送AJAX请求</span></span><br><span class="javascript">      btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">//判断标识变量</span></span><br><span class="javascript">          <span class="hljs-keyword">if</span>(isSending) x.abort();<span class="hljs-comment">// 如果正在发送, 则取消该请求, 创建一个新的请求</span></span><br><span class="javascript">          x = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript">          <span class="hljs-comment">//修改 标识变量的值</span></span><br><span class="javascript">          isSending = <span class="hljs-literal">true</span>;</span><br><span class="javascript">          x.open(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br>          x.send();<br><span class="javascript">          x.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">              <span class="hljs-keyword">if</span>(x.readyState === <span class="hljs-number">4</span>)&#123;</span><br><span class="javascript">                  <span class="hljs-comment">//修改标识变量</span></span><br><span class="javascript">                  isSending = <span class="hljs-literal">false</span>;</span><br>              &#125;<br>          &#125;<br>      &#125;<br><br><span class="javascript">      <span class="hljs-comment">// abort</span></span><br><span class="javascript">      btns[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>          x.abort();<br>      &#125;<br></code></pre></td></tr></table></figure><p>通过一个状态表示即可进行判断</p><h2 id="JQuery-Ajax"><a href="#JQuery-Ajax" class="headerlink" title="JQuery-Ajax"></a>JQuery-Ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          $.get(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>              <span class="hljs-built_in">console</span>.log(data);<br>          &#125;,<span class="hljs-string">&#x27;json&#x27;</span>);<br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          $.post(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>              <span class="hljs-built_in">console</span>.log(data);<br>          &#125;);<br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          $.ajax(&#123;<br>              <span class="hljs-comment">//url</span><br>              url: <span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,<br>              <span class="hljs-comment">//参数</span><br>              data: &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;,<br>              <span class="hljs-comment">//请求类型</span><br>              type: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>              <span class="hljs-comment">//响应体结果</span><br>              dataType: <span class="hljs-string">&#x27;json&#x27;</span>,<br>              <span class="hljs-comment">//成功的回调</span><br>              success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>                  <span class="hljs-built_in">console</span>.log(data);<br>              &#125;,<br>              <span class="hljs-comment">//超时时间</span><br>              timeout: <span class="hljs-number">2000</span>,<br>              <span class="hljs-comment">//失败的回调</span><br>              error: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;出错啦!!&#x27;</span>);<br>              &#125;,<br>              <span class="hljs-comment">//头信息</span><br>              headers: &#123;<br>                  c:<span class="hljs-number">300</span>,<br>                  d:<span class="hljs-number">400</span><br>              &#125;<br>          &#125;);<br>      &#125;);<br></code></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>目前最热门的Ajax请求库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">// https://github.com/axios/axios</span><br><span class="hljs-comment">// get方法</span><br>        <span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);<br><br>        <span class="hljs-comment">//配置 baseURL</span><br>        axios.defaults.baseURL = <span class="hljs-string">&#x27;http://127.0.0.1:8000&#x27;</span>;<br><br>        btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//GET 请求</span><br>            axios.get(<span class="hljs-string">&#x27;/axios-server&#x27;</span>, &#123;<br>                <span class="hljs-comment">//url 参数</span><br>                params: &#123;<br>                    id: <span class="hljs-number">100</span>,<br>                    vip: <span class="hljs-number">7</span><br>                &#125;,<br>                <span class="hljs-comment">//请求头信息</span><br>                headers: &#123;<br>                    name: <span class="hljs-string">&#x27;atguigu&#x27;</span>,<br>                    age: <span class="hljs-number">20</span><br>                &#125;<br>            &#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(value);<br>            &#125;);<br>        &#125;<br><span class="hljs-comment">//post方法</span><br>        btns[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            axios.post(<span class="hljs-string">&#x27;/axios-server&#x27;</span>, &#123;<br>                username: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>                password: <span class="hljs-string">&#x27;admin&#x27;</span><br>            &#125;, &#123;<br>                <span class="hljs-comment">//url </span><br>                params: &#123;<br>                    id: <span class="hljs-number">200</span>,<br>                    vip: <span class="hljs-number">9</span><br>                &#125;,<br>                <span class="hljs-comment">//请求头参数</span><br>                headers: &#123;<br>                    height: <span class="hljs-number">180</span>,<br>                    weight: <span class="hljs-number">180</span>,<br>                &#125;<br>            &#125;);<br>        &#125;<br>    <br>        btns[<span class="hljs-number">2</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            axios(&#123;<br>                <span class="hljs-comment">//请求方法</span><br>                method : <span class="hljs-string">&#x27;POST&#x27;</span>,<br>                <span class="hljs-comment">//url</span><br>                url: <span class="hljs-string">&#x27;/axios-server&#x27;</span>,<br>                <span class="hljs-comment">//url参数</span><br>                params: &#123;<br>                    vip:<span class="hljs-number">10</span>,<br>                    level:<span class="hljs-number">30</span><br>                &#125;,<br>                <span class="hljs-comment">//头信息</span><br>                headers: &#123;<br>                    a:<span class="hljs-number">100</span>,<br>                    b:<span class="hljs-number">200</span><br>                &#125;,<br>                <span class="hljs-comment">//请求体参数</span><br>                data: &#123;<br>                    username: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>                    password: <span class="hljs-string">&#x27;admin&#x27;</span><br>                &#125;<br>            &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>                <span class="hljs-comment">//响应状态码</span><br>                <span class="hljs-built_in">console</span>.log(response.status);<br>                <span class="hljs-comment">//响应状态字符串</span><br>                <span class="hljs-built_in">console</span>.log(response.statusText);<br>                <span class="hljs-comment">//响应头信息</span><br>                <span class="hljs-built_in">console</span>.log(response.headers);<br>                <span class="hljs-comment">//响应体</span><br>                <span class="hljs-built_in">console</span>.log(response.data);<br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//文档地址</span><br>      <span class="hljs-comment">//https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch</span><br>      <br>      <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br><br>      btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          fetch(<span class="hljs-string">&#x27;http://127.0.0.1:8000/fetch-server?vip=10&#x27;</span>, &#123;<br>              <span class="hljs-comment">//请求方法</span><br>              method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>              <span class="hljs-comment">//请求头</span><br>              headers: &#123;<br>                  name:<span class="hljs-string">&#x27;atguigu&#x27;</span><br>              &#125;,<br>              <span class="hljs-comment">//请求体</span><br>              body: <span class="hljs-string">&#x27;username=admin&amp;password=admin&#x27;</span><br>          &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>              <span class="hljs-comment">// return response.text();</span><br>              <span class="hljs-keyword">return</span> response.json();<br>          &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>              <span class="hljs-built_in">console</span>.log(response);<br>          &#125;);<br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>由Netscape公司提出，是浏览器的一种安全策略</p><p>同源：协议，域名，端口号必须相同，违背同源策略就是跨域</p><h3 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h3><h3 id="使用Jsonp"><a href="#使用Jsonp" class="headerlink" title="使用Jsonp"></a>使用Jsonp</h3><script>本身具有跨域特性，但是跨域返回的必须是js代码。这样前端浏览器才能解析### 使用JQuery### 使用CORS不需要在客服端做任何特殊操作，完全在服务端中进行处理，支持get和post请求。跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有哪有访问权限访问哪些资源<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">Access-Control-Allow-Origin: &lt;origin&gt; | *<br>    <span class="hljs-comment">//*表示通配符，表示所以网站都可以跨域访问</span><br>Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header <span class="hljs-comment">//这样浏览器就能够通过getResponseHeader访问X-My-Custom-Header和 X-Another-Custom-Header 响应头了。</span><br>Access-Control-Max-Age: &lt;delta-seconds&gt; <span class="hljs-comment">//delta-seconds 参数表示preflight请求的结果在多少秒内有效。</span><br>Access-Control-Allow-Methods: &lt;method&gt;[, &lt;method&gt;]* 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法。<br>Access-Control-Allow-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]* <span class="hljs-comment">//Access-Control-Allow-Headers 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css(持续更新)</title>
    <link href="/2021/01/12/css/"/>
    <url>/2021/01/12/css/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:red;<br>     <span class="hljs-comment">/*这是另一个注释*/</span><br>    <span class="hljs-attribute">text-align</span>:center;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="id和class选择器"><a href="#id和class选择器" class="headerlink" title="id和class选择器"></a>id和class选择器</h2><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p><p>HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。</p><p>以下的样式规则应用于元素属性 id=”para1”</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*#是id选择器*/</span><br><span class="hljs-selector-id">#para1</span><br>&#123;<br>    <span class="hljs-attribute">text-align</span>:center;<br>    <span class="hljs-attribute">color</span>:red;<br>&#125;<br><span class="hljs-comment">/* ID属性不要以数字开头，数字开头的ID在 Mozilla/Firefox 浏览器中不起作用。*/</span><br></code></pre></td></tr></table></figure><h2 id="CSS创建"><a href="#CSS创建" class="headerlink" title="CSS创建"></a>CSS创建</h2><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><p>即从外部引入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">head</span>&gt;<br>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;<br>&lt;/<span class="hljs-selector-tag">head</span>&gt;<br><span class="hljs-comment">/*浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .css 扩展名进行保存。*/</span><br></code></pre></td></tr></table></figure><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">hr</span> &#123;<span class="hljs-attribute">color</span>:sienna;&#125;</span><br><span class="css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">20px</span>;&#125;</span><br><span class="css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;images/back40.gif&quot;</span>);&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：</p><p><code>&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt;</code></p><h2 id="多重样式优先级（！！！重要）"><a href="#多重样式优先级（！！！重要）" class="headerlink" title="多重样式优先级（！！！重要）"></a>多重样式优先级（！！！重要）</h2><p><strong>内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式</strong></p><p>优先级是浏览器是通过判断哪些属性值与元素最相关以决定并应用到该元素上的。优先级仅由选择器组成的匹配规则决定的。优先级就是分配给指定的CSS声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。</p><h3 id="css-7-种选择器："><a href="#css-7-种选择器：" class="headerlink" title="css 7 种选择器："></a>css 7 种选择器：</h3><ul><li>id选择器</li><li>类选择器</li><li>伪类选择器</li><li>属性选择器</li><li>伪元素选择器</li><li>通配选择器</li><li>标签选择器</li></ul><p>CSS 优先规则：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">内联样式 &gt; <span class="hljs-built_in">id</span> 选择器 &gt; 类选择器 = 伪类选择器 = 属性选择器 &gt; 标签选择器 = 伪元素选择器<br></code></pre></td></tr></table></figure><h3 id="important-规则例外"><a href="#important-规则例外" class="headerlink" title="!important 规则例外"></a>!important 规则例外</h3><p>当 !important 规则被应用在一个样式声明中时,该样式声明会覆盖CSS中任何其他的声明, 无论它处在声明列表中的哪里. 尽管如此, !important规则还是与优先级毫无关系.使用 !important 不是一个好习惯，因为它改变了你样式表本来的级联规则，从而使其难以调试。</p><p>一些经验法则：</p><ul><li><strong>Always</strong> 要优化考虑使用样式规则的优先级来解决问题而不是 <code>!important</code></li><li><strong>Only</strong> 只在需要覆盖全站或外部 css（例如引用的 ExtJs 或者 YUI ）的特定页面中使用 <code>!important</code></li><li><strong>Never</strong> 永远不要在全站范围的 css 上使用<code> !important</code></li><li><strong>Never</strong> 永远不要在你的插件中使用 <code>!important</code></li></ul><h3 id="权重计算"><a href="#权重计算" class="headerlink" title="权重计算:"></a>权重计算:<img src="https://www.runoob.com/wp-content/uploads/2017/06/jc6_002_thumb.png" alt="img"></h3><p>解释：</p><ul><li> \1. 内联样式表的权值最高 1000；</li><li> \2. ID 选择器的权值为 100</li><li> \3. Class 类选择器的权值为 10</li><li> \4. HTML 标签选择器的权值为 1</li></ul><h3 id="CSS-优先级法则："><a href="#CSS-优先级法则：" class="headerlink" title="CSS 优先级法则："></a>CSS 优先级法则：</h3><ul><li> A 选择器都有一个权值，权值越大越优先；</li><li> B 当权值相等时，后出现的样式表设置要优于先出现的样式表设置；</li><li> C 创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；</li><li> D 继承的CSS 样式不如后来指定的CSS 样式；</li><li>E 在同一组属性设置中标有“!important”规则的优先级最大；示例如下：<a href="https://c.runoob.com/codedemo/3049">https://c.runoob.com/codedemo/3049</a><br> 结果：在Firefox 下显示为蓝色；在IE 6 下显示为红色；</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2017/06/css_weight.png" alt="img"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="所以css背景属性"><a href="#所以css背景属性" class="headerlink" title="所以css背景属性"></a>所以css背景属性</h3><table><thead><tr><th><a href="https://www.runoob.com/cssref/css3-pr-background.html">background</a></th><th>简写属性，作用是将背景属性设置在一个声明中。</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/pr-background-attachment.html">background-attachment</a></td><td>背景图像是否固定或者随着页面的其余部分滚动。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-background-color.html">background-color</a></td><td>设置元素的背景颜色。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-background-image.html">background-image</a></td><td>把图像设置为背景。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-background-position.html">background-position</a></td><td>设置背景图像的起始位置。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-background-repeat.html">background-repeat</a></td><td>设置背景图像是否及如何重复。</td></tr></tbody></table><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="文本的对齐方式"><a href="#文本的对齐方式" class="headerlink" title="文本的对齐方式"></a>文本的对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">text-align</span>:center;&#125; <span class="hljs-comment">/*标题居中*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.date</span> &#123;<span class="hljs-attribute">text-align</span>:right;&#125;<span class="hljs-comment">/*时间居右*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.main</span> &#123;<span class="hljs-attribute">text-align</span>:justify;&#125;<span class="hljs-comment">/*左右外边距对其*/</span><br></code></pre></td></tr></table></figure><h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><p>text-decoration 属性用来设置或删除文本的装饰。从设计的角度看 text-decoration属性主要是用来删除链接的下划线：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">text-decoration</span>:none;&#125; <span class="hljs-comment">/*删除下划线*/</span><br><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">text-decoration</span>:overline;&#125;<span class="hljs-comment">/*居上线*/</span><br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">text-decoration</span>:line-through;&#125;<span class="hljs-comment">/*冲过中间线*/</span><br><span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">text-decoration</span>:underline;&#125;<span class="hljs-comment">/*下划线*/</span><br></code></pre></td></tr></table></figure><h3 id="文本转换"><a href="#文本转换" class="headerlink" title="文本转换"></a>文本转换</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.uppercase</span> &#123;<span class="hljs-attribute">text-transform</span>:uppercase;&#125; <span class="hljs-comment">/*大写*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.lowercase</span> &#123;<span class="hljs-attribute">text-transform</span>:lowercase;&#125;<span class="hljs-comment">/*小写*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.capitalize</span> &#123;<span class="hljs-attribute">text-transform</span>:capitalize;&#125;<span class="hljs-comment">/*首字母大写*/</span><br></code></pre></td></tr></table></figure><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">text-indent</span>:<span class="hljs-number">50px</span>;&#125; <span class="hljs-comment">/*第一行缩进50px*/</span><br></code></pre></td></tr></table></figure><h3 id="所有css文本属性"><a href="#所有css文本属性" class="headerlink" title="所有css文本属性"></a>所有css文本属性</h3><table><thead><tr><th><a href="https://www.runoob.com/cssref/pr-text-color.html">color</a></th><th>设置文本颜色</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/pr-text-direction.html">direction</a></td><td>设置文本方向。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-letter-spacing.html">letter-spacing</a></td><td>设置字符间距</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-line-height.html">line-height</a></td><td>设置行高</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-text-align.html">text-align</a>·</td><td>对齐元素中的文本</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-text-decoration.html">text-decoration</a></td><td>向文本添加修饰</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-text-indent.html">text-indent</a></td><td>缩进元素中文本的首行</td></tr><tr><td><a href="https://www.runoob.com/cssref/css3-pr-text-shadow.html">text-shadow</a></td><td>设置文本阴影</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-text-transform.html">text-transform</a></td><td>控制元素中的字母</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-unicode-bidi.html">unicode-bidi</a></td><td>设置或返回文本是否被重写</td></tr></tbody></table><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><table><thead><tr><th><a href="https://www.runoob.com/cssref/pr-font-font.html">font</a></th><th>在一个声明中设置所有的字体属性</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/pr-font-font-family.html">font-family</a></td><td>指定文本的字体系列</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-font-font-size.html">font-size</a></td><td>指定文本的字体大小</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-font-font-style.html">font-style</a></td><td>指定文本的字体样式</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-font-font-variant.html">font-variant</a></td><td>以小型大写字体或者正常字体显示文本。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-font-weight.html">font-weight</a></td><td>指定字体的粗细。</td></tr></tbody></table><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#000000</span>;&#125;      <span class="hljs-comment">/* 未访问链接*/</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#00FF00</span>;&#125;  <span class="hljs-comment">/* 已访问链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF00FF</span>;&#125;  <span class="hljs-comment">/* 鼠标移动到链接上 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#0000FF</span>;&#125;  <span class="hljs-comment">/* 鼠标点击时 */</span><br><span class="hljs-comment">/*a:hover 必须跟在 a:link 和 a:visited后面a:active 必须跟在 a:hover后面*/</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--text-decoration 属性主要用于删除链接中的下划线：--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">text-decoration</span> 属性主要用于删除链接中的下划线：html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">text-decoration</span>:none;&#125;    <span class="hljs-comment">/* unvisited link */</span></span><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">text-decoration</span>:none;&#125; <span class="hljs-comment">/* visited link */</span></span><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">text-decoration</span>:underline;&#125;   <span class="hljs-comment">/* mouse over link */</span></span><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">text-decoration</span>:underline;&#125;  <span class="hljs-comment">/* selected link */</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/css/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>This is a link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>注意:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> hover必须在:link和 a:visited之后定义才有效.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>注意:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;<span class="hljs-name">active</span></span>必须在hover之后定义是有效的.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>在 HTML中，有两种类型的列表：</p><ul><li>无序列表 <strong>ul</strong> - 列表项标记用特殊图形（如小黑点、小方框等）</li><li>有序列表 <strong>ol</strong> - 列表项的标记有数字或字母</li></ul><p>list-style-type属性指定列表项标记的类型是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.a</span> &#123;<span class="hljs-attribute">list-style-type</span>: circle;&#125;<br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.b</span> &#123;<span class="hljs-attribute">list-style-type</span>: square;&#125;<br> <br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.c</span> &#123;<span class="hljs-attribute">list-style-type</span>: upper-roman;&#125;<br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.d</span> &#123;<span class="hljs-attribute">list-style-type</span>: lower-alpha;&#125;<br><span class="hljs-selector-tag">ul</span><br>&#123;<br>    <span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;sqpurple.gif&#x27;</span>);<span class="hljs-comment">/*要指定列表项标记的图像，使用列表样式图像属性：*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="css列表属性"><a href="#css列表属性" class="headerlink" title="css列表属性"></a>css列表属性</h3><table><thead><tr><th><a href="https://www.runoob.com/cssref/pr-list-style.html">list-style</a></th><th>简写属性。用于把所有用于列表的属性设置于一个声明中</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/pr-list-style-image.html">list-style-image</a></td><td>将图像设置为列表项标志。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-list-style-position.html">list-style-position</a></td><td>设置列表中列表项标志的位置。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-list-style-type.html">list-style-type</a></td><td>设置列表项标志的类型。</td></tr></tbody></table><p>##css盒子模型(重要！！！)</p><p><img src="https://www.runoob.com/images/box-model.gif" alt="CSS box-model"></p><ul><li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li></ul><p><img src="https://www.runoob.com/images/lamp.gif" alt="Remark"><strong>重要:</strong> 当您指定一个 CSS 元素的宽度和高度属性时，你只是设置内容区域的宽度和高度。要知道，完整大小的元素，你还必须添加内边距，边框和边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">25px</span> solid green;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">25px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>300px (宽)<br>+ 50px (左 + 右填充)<br>+ 50px (左 + 右边框)<br>+ 50px (左 + 右边距)<br>= 450px</p><p>最终元素的总宽度计算公式是这样的：总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距</p><p>元素的总高度最终计算公式是这样的：总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><h3 id="border-style"><a href="#border-style" class="headerlink" title="border-style :"></a>border-style :</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">none:</span> 默认无边框<br><span class="hljs-symbol">dotted:</span> 定义一个点线边框<br><span class="hljs-symbol">solid:</span> 定义实线边框<br><span class="hljs-symbol">double:</span> 定义两个边框。 两个边框的宽度和 border-width 的值相同<br><span class="hljs-symbol">groove:</span> 定义<span class="hljs-number">3</span>D沟槽边框。效果取决于边框的颜色值<br><span class="hljs-symbol">ridge:</span> 定义<span class="hljs-number">3</span>D脊边框。效果取决于边框的颜色值<br><span class="hljs-symbol">inset:</span>定义一个<span class="hljs-number">3</span>D的嵌入边框。效果取决于边框的颜色值<br><span class="hljs-symbol">outset:</span> 定义一个<span class="hljs-number">3</span>D突出边框。 效果取决于边框的颜色值<br></code></pre></td></tr></table></figure><h3 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border.html">border</a></td><td align="left">简写属性，用于把针对四个边的属性设置在一个声明。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-style.html">border-style</a></td><td align="left">用于设置元素所有边框的样式，或者单独地为各边设置边框样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-width.html">border-width</a></td><td align="left">简写属性，用于为元素的所有边框设置宽度，或者单独地为各边边框设置宽度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-color.html">border-color</a></td><td align="left">简写属性，设置元素的所有边框中可见部分的颜色，或为 4 个边分别设置颜色。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom.html">border-bottom</a></td><td align="left">简写属性，用于把下边框的所有属性设置到一个声明中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-color.html">border-bottom-color</a></td><td align="left">设置元素的下边框的颜色。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-style.html">border-bottom-style</a></td><td align="left">设置元素的下边框的样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-width.html">border-bottom-width</a></td><td align="left">设置元素的下边框的宽度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-left.html">border-left</a></td><td align="left">简写属性，用于把左边框的所有属性设置到一个声明中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-color.html">border-left-color</a></td><td align="left">设置元素的左边框的颜色。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-style.html">border-left-style</a></td><td align="left">设置元素的左边框的样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-width.html">border-left-width</a></td><td align="left">设置元素的左边框的宽度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-right.html">border-right</a></td><td align="left">简写属性，用于把右边框的所有属性设置到一个声明中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-color.html">border-right-color</a></td><td align="left">设置元素的右边框的颜色。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-style.html">border-right-style</a></td><td align="left">设置元素的右边框的样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-width.html">border-right-width</a></td><td align="left">设置元素的右边框的宽度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-top.html">border-top</a></td><td align="left">简写属性，用于把上边框的所有属性设置到一个声明中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-color.html">border-top-color</a></td><td align="left">设置元素的上边框的颜色。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-style.html">border-top-style</a></td><td align="left">设置元素的上边框的样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-width.html">border-top-width</a></td><td align="left">设置元素的上边框的宽度。</td></tr></tbody></table><h2 id="轮廓outline"><a href="#轮廓outline" class="headerlink" title="轮廓outline"></a>轮廓outline</h2><p>轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><p>CSS outline 属性规定元素轮廓的样式、颜色和宽度。</p><p><img src="https://www.runoob.com/images/box_outline.gif" alt="Outline"></p><h2 id="外边距margin"><a href="#外边距margin" class="headerlink" title="外边距margin"></a>外边距margin</h2><p><img src="https://www.runoob.com/wp-content/uploads/2013/08/VlwVi.png" alt="img"></p><table><thead><tr><th>auto</th><th>设置浏览器边距。 这样做的结果会依赖于浏览器</th></tr></thead><tbody><tr><td><em>length</em></td><td>定义一个固定的margin（使用像素，pt，em等）</td></tr><tr><td><em>%</em></td><td>定义一个使用百分比的边距</td></tr></tbody></table><p>为了缩短代码，有可能使用一个属性中margin指定的所有边距属性。这就是所谓的简写属性。</p><p>所有边距属性的简写属性是 <strong>margin</strong> :顺序是上右下左（即使顺时针）</p><p>margin属性可以有一到四个值。</p><ul><li>margin:25px 50px 75px 100px;<ul><li>上边距为25px</li><li>右边距为50px</li><li>下边距为75px</li><li>左边距为100px</li></ul></li><li>margin:25px 50px 75px;<ul><li>上边距为25px</li><li>左右边距为50px</li><li>下边距为75px</li></ul></li><li>margin:25px 50px;<ul><li>上下边距为25px</li><li>左右边距为50px</li></ul></li><li>margin:25px;<ul><li>所有的4个边距都是25px</li></ul></li></ul><h3 id="填充-内边距-padding"><a href="#填充-内边距-padding" class="headerlink" title="填充(内边距)padding"></a>填充(内边距)padding</h3><table><thead><tr><th><em>length</em></th><th>定义一个固定的填充(像素, pt, em,等)</th></tr></thead><tbody><tr><td><em>%</em></td><td>使用百分比值定义一个填充</td></tr></tbody></table><h2 id="分组嵌套选择器"><a href="#分组嵌套选择器" class="headerlink" title="分组嵌套选择器"></a>分组嵌套选择器</h2><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>具有相同样式的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br><span class="hljs-selector-tag">h2</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br><span class="hljs-selector-tag">p</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br><span class="hljs-comment">/*为了尽量减少代码，你可以使用分组选择器。每个选择器用逗号分隔。在下面的例子中，我们对以上代码使用分组选择器：*/</span><br><span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">h2</span>,<span class="hljs-selector-tag">p</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>它可能适用于选择器内部的选择器的样式。</p><p>在下面的例子设置了三个样式：</p><ul><li><strong>p{ }</strong>: 为所有 <strong>p</strong> 元素指定一个样式。</li><li><strong>.marked{ }</strong>: 为所有 <strong>class=”marked”</strong> 的元素指定一个样式。</li><li><strong>.marked p{ }</strong>: 为所有 <strong>class=”marked”</strong> 元素内的 <strong>p</strong> 元素指定一个样式。</li><li><strong>p.marked{ }</strong>: 为所有 <strong>class=”marked”</strong> 的 <strong>p</strong> 元素指定一个样式</li></ul><h2 id="css尺寸"><a href="#css尺寸" class="headerlink" title="css尺寸"></a>css尺寸</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*使用百分比定义行高*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.small</span> &#123;<span class="hljs-attribute">line-height</span>:<span class="hljs-number">90%</span>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.big</span> &#123;<span class="hljs-attribute">line-height</span>:<span class="hljs-number">200%</span>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th><a href="https://www.runoob.com/cssref/pr-dim-height.html">height</a></th><th>设置元素的高度。</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/pr-dim-line-height.html">line-height</a></td><td>设置行高。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-max-height.html">max-height</a></td><td>设置元素的最大高度。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-max-width.html">max-width</a></td><td>设置元素的最大宽度。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-min-height.html">min-height</a></td><td>设置元素的最小高度。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-min-width.html">min-width</a></td><td>设置元素的最小宽度。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-width.html">width</a></td><td>设置元素的宽度。</td></tr></tbody></table><p>属性值</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">normal</td><td align="left">默认。设置合理的行间距。</td></tr><tr><td align="left"><em>number</em></td><td align="left">设置数字，此数字会与当前的字体尺寸相乘来设置行间距。</td></tr><tr><td align="left"><em>length</em></td><td align="left">设置固定的行间距。</td></tr><tr><td align="left"><em>%</em></td><td align="left">基于当前字体尺寸的百分比行间距。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 line-height 属性的值。</td></tr></tbody></table><h2 id="css显示（重要）"><a href="#css显示（重要）" class="headerlink" title="css显示（重要）"></a>css显示（重要）</h2><h3 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h3><p>隐藏一个元素可0……………………………………………….0、</p><p>3通过把display属性设置为<code>none</code>或者把visibility属性设为<code>hidden</code> ，但它们两者有区别，hidden只是隐藏了但还是会影响布局，但设为none后的元素不会影响布局</p><h3 id="css-display-块和内联元素"><a href="#css-display-块和内联元素" class="headerlink" title="css display-块和内联元素"></a>css display-块和内联元素</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><ul><li>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;</li><li>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;</li></ul><p>首先要区别块和内联元素，块元素是一个元素，占用了全部宽度，在前后都是换行符，简单的说块级元素例如一个<div></div>就是一行</p><p><strong>块级元素主要有：</strong></p><ul><li> address , blockquote , center , dir , div , dl , fieldset , form , h1 , h2 , h3 , h4 , h5 , h6 , hr , isindex , menu , noframes , noscript , ol , p , pre , table , ul , li</li></ul><p><img src="https://i.loli.net/2021/01/12/iJcqPEySKWbdZfD.png" alt="image.png"></p><h4 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h4><p>内联元素只需要必要的宽度，不强制换行，例子有<span>,<a>而<span></span>后下一个还是在同一行</p><ul><li>和相邻的内联元素在同一行;</li><li>宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变，就是里面文字或图片的大小;</li></ul><p><strong>内联元素主要有：</strong></p><ul><li>a , abbr , acronym , b , bdo , big , br , cite , code , dfn , em , font , i , img , input , kbd , label , q , s , samp , select , small , span , strike , strong , sub , sup ,textarea , tt , u , var</li></ul><p><img src="https://i.loli.net/2021/01/12/J7HFSPdOp1LganU.png" alt="image.png"></p><p>利用CSS我们可以摆脱上面表格里HTML标签归类的限制，自由地在不同标签/元素上应用我们需要的属性。</p><p>主要用的CSS样式有以下三个：</p><ul><li>display:block – 显示为块级元素</li><li>display:inline – 显示为内联元素</li><li>display:inline-block – 显示为内联块元素，表现为同行显示并可修改宽高内外边距等属性</li></ul><h2 id="css定位（重要）"><a href="#css定位（重要）" class="headerlink" title="css定位（重要）"></a>css定位（重要）</h2><p>css的position指定了元素的定位类型，position属性的五个值：</p><ul><li>static</li><li>relative</li><li>fixed</li><li>absolute</li><li>sticky</li></ul><h4 id="static定位-默认"><a href="#static定位-默认" class="headerlink" title="static定位(默认)"></a>static定位(默认)</h4><p>HTML元素的默认值，即没有定位，遵循正常的文档流对象，静态定位的元素不会受到top、bottom、left、right影响</p><h4 id="fixed定位"><a href="#fixed定位" class="headerlink" title="fixed定位"></a>fixed定位</h4><p>元素的位置相当于浏览器窗口时固定的位置。即使窗口滚动也不会移动(一直固定在浏览器窗口的那个位置)</p><h4 id="relative定位"><a href="#relative定位" class="headerlink" title="relative定位"></a>relative定位</h4><p>相对定位元素的定位时相当其正常位置，相对定位元素经常被用来作为绝对定位元素的容器块</p><h4 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h4><p>绝对定位元素的位置相对于最近的已定位父元素，如果定位没有已定位的父元素，那么它的位置相对于<html></p><h4 id="sticky定位"><a href="#sticky定位" class="headerlink" title="sticky定位"></a>sticky定位</h4><p>sticky 英文字面意思是粘，粘贴，所以可以把它称之为粘性定位。<strong>position: sticky;</strong> 基于用户的滚动位置来定位。</p><p>粘性定位的元素是依赖于用户的滚动，在 <strong>position:relative</strong> 与 <strong>position:fixed</strong> 定位之间切换。</p><p>它的行为就像 <strong>position:relative;</strong> 而当页面滚动超出目标区域时，它的表现就像 **position:fixed;**，它会固定在目标位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.sticky</span> &#123;<br>    <span class="hljs-attribute">position</span>: -webkit-sticky; <span class="hljs-comment">/* Safari 浏览器需要*/</span><br>    <span class="hljs-attribute">position</span>: sticky;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效,否则与相对定位相同*/</span><br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#4CAF50</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重叠的元素"><a href="#重叠的元素" class="headerlink" title="重叠的元素"></a>重叠的元素</h3><p>元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素，z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span><br>&#123;<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">z-index</span>:-<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><p><img src="https://i.loli.net/2021/01/12/o3MpvnY9Qgqbes5.png" alt="image.png"></p><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>css overflow属性用于控制内容溢出元素框时显示的方式，可以控制内容溢出元素框时在对应的元素区间内添加滚动条</p><table><thead><tr><th>visible</th><th>默认值。内容不会被修剪，会呈现在元素框之外。</th></tr></thead><tbody><tr><td>hidden</td><td>内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td>scroll</td><td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>auto</td><td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table><h2 id="css浮动"><a href="#css浮动" class="headerlink" title="css浮动"></a>css浮动</h2><p>css的float，会使元素向左或向右移动，其周围的元素也会重新排列</p><p>如果你把几个浮动的元素放到一起，如果有空间的话，它们将彼此相邻。在这里，我们对图片廊使用 float 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.thumbnail</span> <br>&#123;<br>    <span class="hljs-attribute">float</span>:left;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">110px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">5px</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果</p><p><img src="https://i.loli.net/2021/01/12/ynsj5rTkCveoJ4Z.png" alt="image.png"></p><p>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。</p><p>clear 属性指定元素两侧不能出现浮动元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.text_line</span><br>&#123;<br>    <span class="hljs-attribute">clear</span>:both;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="css水平垂直对齐-重要"><a href="#css水平垂直对齐-重要" class="headerlink" title="css水平垂直对齐(重要)"></a>css水平垂直对齐(重要)</h2><h3 id="水平对齐"><a href="#水平对齐" class="headerlink" title="水平对齐"></a>水平对齐</h3><p>要水平居中对齐一个元素(如 <div>), 可以使用 **margin: auto;**。</p><p>设置到元素的宽度将防止它溢出到容器的边缘。</p><p>元素通过指定宽度，并将两边的空外边距平均分配：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;<br>    <span class="hljs-attribute">margin</span>: auto;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="水平文字对齐"><a href="#水平文字对齐" class="headerlink" title="水平文字对齐"></a>水平文字对齐</h3><p>如果仅仅是为了文本在元素内居中对齐，可以使用 <strong>text-align: center;</strong></p><h3 id="实现图片居中对齐"><a href="#实现图片居中对齐" class="headerlink" title="实现图片居中对齐"></a>实现图片居中对齐</h3><p>要让图片居中对齐, 可以使用 <strong>margin: auto;</strong> 并将它放到 <strong>块</strong> 元素中:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">margin</span>: auto;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">40%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用定位方式实现左右对齐"><a href="#使用定位方式实现左右对齐" class="headerlink" title="使用定位方式实现左右对齐"></a>使用定位方式实现左右对齐</h3><p>我们可以使用 <strong>position: absolute;</strong> 属性来对齐元素:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.right</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#73AD21</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用float实现左右对齐"><a href="#使用float实现左右对齐" class="headerlink" title="使用float实现左右对齐"></a>使用float实现左右对齐</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.right</span> &#123;<br>    <span class="hljs-attribute">float</span>: right;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#73AD21</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以在父元素上添加 overflow: auto; 来解决子元素溢出的问题:</p><p><code>.clearfix &#123;    overflow: auto; &#125;</code></p><h3 id="垂直居中对齐"><a href="#垂直居中对齐" class="headerlink" title="垂直居中对齐"></a>垂直居中对齐</h3><p>最简单的是使头部顶部使用padding</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;  <br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">70px</span> <span class="hljs-number">0</span>; <span class="hljs-comment">/*垂直居中*/</span><br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">70px</span> <span class="hljs-number">0</span>; <span class="hljs-comment">/*垂直水平居中*/</span><br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用line-height实现垂直居中"><a href="#使用line-height实现垂直居中" class="headerlink" title="使用line-height实现垂直居中"></a>使用line-height实现垂直居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;  <span class="hljs-comment">/*文本的行间距*/</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br> <br><span class="hljs-comment">/* 如果文本有多行，添加以下代码: */</span><br><span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用position和tansform"><a href="#使用position和tansform" class="headerlink" title="使用position和tansform"></a>使用position和tansform</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123; <br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green; <br>&#125;<br> <br><span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><h3 id="后代选择其（儿子孙子。。。。）"><a href="#后代选择其（儿子孙子。。。。）" class="headerlink" title="后代选择其（儿子孙子。。。。）"></a>后代选择其（儿子孙子。。。。）</h3><p>后代选择器用于选取某元素的后代元素，以下实例选取所有 <p> 元素插入到 <div> 元素中: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span><br>&#123;<br>  <span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/13/XMNaAntHqmelVYF.png" alt="image.png"></p><h3 id="子元素选择器（只能是儿子）-gt"><a href="#子元素选择器（只能是儿子）-gt" class="headerlink" title="子元素选择器（只能是儿子）&gt;"></a>子元素选择器（只能是儿子）&gt;</h3><p>与后代选择器相比，子元素选择器（Child selectors）只能选择作为某元素子元素的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span><br>&#123;<br>  <span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器   +"></a>相邻兄弟选择器   +</h3><p>相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。</p><p>以下实例选取了所有位于 <div> 元素后的第一个 <p> 元素:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>div+p<br>&#123;<br><span class="css"><span class="hljs-selector-tag">background-color</span><span class="hljs-selector-pseudo">:yellow</span>;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>文章标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>DIV 内部标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>DIV 内部段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>DIV 之后的第一个 P 元素。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>DIV 之后的第二个 P 元素。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/13/bPLm15NS8fhIClo.png" alt="image.png"></p><h3 id="后续兄弟选择器"><a href="#后续兄弟选择器" class="headerlink" title="后续兄弟选择器"></a>后续兄弟选择器</h3><p>以下实例选取了所有 <div> 元素之后的所有相邻兄弟元素 <p> : </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>~<span class="hljs-selector-tag">p</span><br>&#123;<br>  <span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS的伪类"><a href="#CSS的伪类" class="headerlink" title="CSS的伪类"></a>CSS的伪类</h2><p>CSS伪类是用来添加一些选择器的特殊效果</p><p>伪类的语法：</p><p><code>selector:pseudo-class &#123;property:value;&#125;</code></p><p>CSS类也可以使用伪类：</p><p><code>selector.class:pseudo-class &#123;property:value;&#125;</code></p><p>例子：链接的不同状态下不同样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF0000</span>;&#125; <span class="hljs-comment">/* 未访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#00FF00</span>;&#125; <span class="hljs-comment">/* 已访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF00FF</span>;&#125; <span class="hljs-comment">/* 鼠标划过链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#0000FF</span>;&#125; <span class="hljs-comment">/* 已选中的链接 *</span><br></code></pre></td></tr></table></figure><p>CSS的伪类</p><table><thead><tr><th><a href="https://www.runoob.com/cssref/sel-checked.html">:checked</a></th><th>input:checked</th><th>选择所有选中的表单元素</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/css/cssref/sel-disabled.html">:disabled</a></td><td>input:disabled</td><td>选择所有禁用的表单元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-empty.html">:empty</a></td><td>p:empty</td><td>选择所有没有子元素的p元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-enable.html">:enabled</a></td><td>input:enabled</td><td>选择所有启用的表单元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-first-of-type.html">:first-of-type</a></td><td>p:first-of-type</td><td>选择的每个 p 元素是其父元素的第一个 p 元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-in-range.html">:in-range</a></td><td>input:in-range</td><td>选择元素指定范围内的值</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-invalid.html">:invalid</a></td><td>input:invalid</td><td>选择所有无效的元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-last-child.html">:last-child</a></td><td>p:last-child</td><td>选择所有p元素的最后一个子元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-last-of-type.html">:last-of-type</a></td><td>p:last-of-type</td><td>选择每个p元素是其母元素的最后一个p元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-not.html">:not(selector)</a></td><td>:not(p)</td><td>选择所有p以外的元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-child.html">:nth-child(n)</a></td><td>p:nth-child(2)</td><td>选择所有 p 元素的父元素的第二个子元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-last-child.html">:nth-last-child(n)</a></td><td>p:nth-last-child(2)</td><td>选择所有p元素倒数的第二个子元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-last-of-type.html">:nth-last-of-type(n)</a></td><td>p:nth-last-of-type(2)</td><td>选择所有p元素倒数的第二个为p的子元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-of-type.html">:nth-of-type(n)</a></td><td>p:nth-of-type(2)</td><td>选择所有p元素第二个为p的子元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-only-of-type.html">:only-of-type</a></td><td>p:only-of-type</td><td>选择所有仅有一个子元素为p的元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-only-child.html">:only-child</a></td><td>p:only-child</td><td>选择所有仅有一个子元素的p元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-optional.html">:optional</a></td><td>input:optional</td><td>选择没有”required”的元素属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-out-of-range.html">:out-of-range</a></td><td>input:out-of-range</td><td>选择指定范围以外的值的元素属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-read-only.html">:read-only</a></td><td>input:read-only</td><td>选择只读属性的元素属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-read-write.html">:read-write</a></td><td>input:read-write</td><td>选择没有只读属性的元素属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-required.html">:required</a></td><td>input:required</td><td>选择有”required”属性指定的元素属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-root.html">:root</a></td><td>root</td><td>选择文档的根元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-target.html">:target</a></td><td>#news:target</td><td>选择当前活动#news元素(点击URL包含锚的名字)</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-valid.html">:valid</a></td><td>input:valid</td><td>选择所有有效值的属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-link.html">:link</a></td><td>a:link</td><td>选择所有未访问链接</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-visited.html">:visited</a></td><td>a:visited</td><td>选择所有访问过的链接</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-active.html">:active</a></td><td>a:active</td><td>选择正在活动链接</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-hover.html">:hover</a></td><td>a:hover</td><td>把鼠标放在链接上的状态</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-focus.html">:focus</a></td><td>input:focus</td><td>选择元素输入后具有焦点</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstletter.html">:first-letter</a></td><td>p:first-letter</td><td>选择每个<p> 元素的第一个字母</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstline.html">:first-line</a></td><td>p:first-line</td><td>选择每个<p> 元素的第一行</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstchild.html">:first-child</a></td><td>p:first-child</td><td>选择器匹配属于任意元素的第一个子元素的 <p> 元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-before.html">:before</a></td><td>p:before</td><td>在每个<p>元素之前插入内容</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-after.html">:after</a></td><td>p:after</td><td>在每个<p>元素之后插入内容</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-lang.html">:lang(<em>language</em>)</a></td><td>p:lang(it)</td><td>为<p>元素的lang属性选择一个开始值</td></tr></tbody></table><p>CSS的伪元素</p><p>CSS伪元素是用来添加一些选择器的特殊效果。</p><table><thead><tr><th><a href="https://www.runoob.com/cssref/sel-link.html">:link</a></th><th>a:link</th><th>选择所有未访问链接</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/sel-visited.html">:visited</a></td><td>a:visited</td><td>选择所有访问过的链接</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-active.html">:active</a></td><td>a:active</td><td>选择正在活动链接</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-hover.html">:hover</a></td><td>a:hover</td><td>把鼠标放在链接上的状态</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-focus.html">:focus</a></td><td>input:focus</td><td>选择元素输入后具有焦点</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstletter.html">:first-letter</a></td><td>p:first-letter</td><td>选择每个<p> 元素的第一个字母</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstline.html">:first-line</a></td><td>p:first-line</td><td>选择每个<p> 元素的第一行</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstchild.html">:first-child</a></td><td>p:first-child</td><td>选择器匹配属于任意元素的第一个子元素的 <p> 元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-before.html">:before</a></td><td>p:before</td><td>在每个<p>元素之前插入内容</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-after.html">:after</a></td><td>p:after</td><td>在每个<p>元素之后插入内容</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-lang.html">:lang(<em>language</em>)</a></td><td>p:lang(it)</td><td>为<p>元素的lang属性选择一个开始值</td></tr></tbody></table><p><strong>伪类</strong>选择元素基于的是当前元素处于的状态，或者说元素当前所具有的特性，而不是元素的id、class、属性等静态的标志。由于状态是动态变化的，所以一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。由此可以看出，它的功能和class有些类似，但它是基于文档之外的抽象，所以叫伪类。</p><p>与伪类针对特殊状态的元素不同的是，<strong>伪元素</strong>是对元素中的特定内容进行操作，它所操作的层次比伪类更深了一层，也因此它的动态性比伪类要低得多。实际上，设计伪元素的目的就是去选取诸如元素内容第一个字（母）、第一行，选取某些内容前面或后面这种普通的选择器无法完成的工作。它控制的内容实际上和元素是相同的，但是它本身只是基于元素的抽象，并不存在于文档中，所以叫伪元素。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2021/01/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/01/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="js概述"><a href="#js概述" class="headerlink" title="js概述"></a>js概述</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>正则表达式(Regular Expression)用于匹配字符组合的模式。在JavaScript中，正则表达式是对象</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>用于验证表单，例如注册的密码格式限制等</li><li>过滤敏感词‘</li><li>从字符串中获取我们想要的特定部分等</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>灵活性、逻辑性和功能性强</li><li>简单方式达到对字符串的复杂控制</li><li>缺点：刚接触时，晦涩难懂</li><li>目标：不要求写出来，但要能看懂，能修改别人写好的正则表达式</li></ul><h2 id="正则表达式在js中的应用"><a href="#正则表达式在js中的应用" class="headerlink" title="正则表达式在js中的应用"></a>正则表达式在js中的应用</h2><h3 id="通过调用RegExp"><a href="#通过调用RegExp" class="headerlink" title="通过调用RegExp()"></a>通过调用RegExp()</h3><p>例如<code>var regexp = new RegExp(/123/);</code> 要求必须输入123</p><h3 id="通过字面量"><a href="#通过字面量" class="headerlink" title="通过字面量"></a>通过字面量</h3><p>例如<code>var rg = /123/;</code></p><h3 id="通过test-检测字符串是否符合该规则，返回true或false"><a href="#通过test-检测字符串是否符合该规则，返回true或false" class="headerlink" title="通过test()检测字符串是否符合该规则，返回true或false"></a>通过test()检测字符串是否符合该规则，返回true或false</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/123/</span>;<br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-number">123</span>));<span class="hljs-comment">//匹配字符中是否出现123  出现结果为true</span><br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//匹配字符中是否出现123 未出现结果为false</span><br></code></pre></td></tr></table></figure><h2 id="正则表达式的特殊字符"><a href="#正则表达式的特殊字符" class="headerlink" title="正则表达式的特殊字符"></a>正则表达式的特殊字符</h2><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/abc/</span>; <span class="hljs-comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span><br><span class="hljs-comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span><br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;abcd&#x27;</span>));<br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;aabcd&#x27;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^abc/</span>;  <span class="hljs-comment">//必须adc开头</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abc&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abcd&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;aabcd&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^abc$/</span>; <span class="hljs-comment">// 精确匹配 要求必须是 abc字符串才符合规范</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abc&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abcd&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;aabcd&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abcabc&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/[abc]/</span> 只要包含a或者包含b或者包含c都返回<span class="hljs-literal">true</span><br><span class="hljs-built_in">console</span>.log(rg.text(<span class="hljs-string">&#x27;andy&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(rg.text(<span class="hljs-string">&#x27;red&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^[abc]$/</span>  <span class="hljs-comment">//a-true b-true c-false d-false aa-false</span><br><br><span class="hljs-keyword">var</span> rg =<span class="hljs-regexp">/^[a-z]$/</span>  <span class="hljs-comment">//只要输入的是26个英文字母之一都返回truej</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字符组合</span><br><span class="hljs-keyword">var</span> reg  =<span class="hljs-regexp">/^[a-zA-Z0-9]$/</span> <span class="hljs-comment">//可输入大小写英文字符，或者数字 </span><br><span class="hljs-keyword">var</span> reg  =<span class="hljs-regexp">/^[^a-zA-Z0-9]$/</span> <span class="hljs-comment">//可输入大小写英文字符，或者数字  [^]里面的^表示取反</span><br></code></pre></td></tr></table></figure><h3 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h3><p>量词符用来设定某个模式出现的次数。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span> <span class="hljs-comment">//表单验证模板，输入字符只能是[]范围里的，且字符个数为6-16位</span><br><br></code></pre></td></tr></table></figure><h3 id="括号总结"><a href="#括号总结" class="headerlink" title="括号总结"></a>括号总结</h3><p>中括号 匹配括号内的任意字符(或)</p><p>大括号 表示重复的次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^abc&#123;3&#125;$/</span> <span class="hljs-comment">//只是表示c重复3次 记abccc为true</span><br></code></pre></td></tr></table></figure><p>小括号：表示优先级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^(abc)&#123;3&#125;$/</span> <span class="hljs-comment">//只是表示c重复3次 记abccc为true  </span><br><span class="hljs-comment">//abcabcabc为true</span><br></code></pre></td></tr></table></figure><h2 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210108162916331.png" alt="image-20210108162916331"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//座机号码验证</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;  <span class="hljs-comment">// 正则里面的或(|)</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;<br></code></pre></td></tr></table></figure><h3 id="正则表达式中的替换"><a href="#正则表达式中的替换" class="headerlink" title="正则表达式中的替换"></a>正则表达式中的替换</h3><p><code>replace()方法</code></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript进阶</title>
    <link href="/2021/01/06/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/01/06/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>#jsES6中的类和对象</p><h2 id="创建类和对象"><a href="#创建类和对象" class="headerlink" title="创建类和对象"></a>创建类和对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uanme</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;Liudehua&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(ldh.uname);<br></code></pre></td></tr></table></figure><ol><li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li><li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li><li>多个函数方法之间不需要添加逗号分隔</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li></ol><p>##类中添加方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uanme</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">sing</span>(<span class="hljs-params">songName</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(songName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constuctor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">money</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br>son.money;<br></code></pre></td></tr></table></figure><p>子类使用super关键字访问父类的方法，这里调用父类的函数，可以是构造函数，可以是普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义了父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>&#125;<br> &#125;<br><span class="hljs-comment">//子元素继承父类</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(x, y); <span class="hljs-comment">//使用super调用了父类中的构造函数</span><br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    son.sum(); <span class="hljs-comment">//结果为3</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong> </p><ol><li>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</li><li>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</li><li>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</li></ol><p>super.父类方法名()可调用父类的普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 父类有加法方法</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>   &#125;<br> &#125;<br> <span class="hljs-comment">// 子类继承父类加法方法 同时 扩展减法方法</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-comment">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span><br>   <span class="hljs-built_in">super</span>(x, y);<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">subtract</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x - <span class="hljs-built_in">this</span>.y);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);<br>son.subtract(); <span class="hljs-comment">//2</span><br>son.sum();<span class="hljs-comment">//8</span><br></code></pre></td></tr></table></figure><h2 id="ES6中的注意点"><a href="#ES6中的注意点" class="headerlink" title="ES6中的注意点"></a>ES6中的注意点</h2><p>ES6必须先定义类，再才能实例化</p><p>类里面共有的属性和方法一定要加this</p><p>类里面的this指向问题：constructor里面的this指向创建的对象 方法中的this指向调用者</p><h2 id="TAB选项栏案例"><a href="#TAB选项栏案例" class="headerlink" title="TAB选项栏案例"></a>TAB选项栏案例</h2><h1 id="构造函数与原型（ES6之前）"><a href="#构造函数与原型（ES6之前）" class="headerlink" title="构造函数与原型（ES6之前）"></a>构造函数与原型（ES6之前）</h1><h2 id="对象的三种创建方式–复习"><a href="#对象的三种创建方式–复习" class="headerlink" title="对象的三种创建方式–复习"></a>对象的三种创建方式–复习</h2><ol><li><p>字面量方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br></code></pre></td></tr></table></figure></li><li><p>new关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure></li><li><p>构造函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure><h2 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h2></li></ol><h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(ldh.uname);<span class="hljs-comment">//实例成员只能通过实例化的对象来访问</span><br></code></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br>Star.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(Star.sex);<span class="hljs-comment">//静态成员只能通过构造函数来访问</span><br></code></pre></td></tr></table></figure><h2 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h2><p>存在浪费内存的问题：每创建一个对象都要单独开辟一个空间</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106141737235.png" alt="image-20210106141737235"></p><p>##构造函数原型prototype</p><p>每一个构造函数都有一个prototype属性，指向另一个对象。这个prototype本身都是一个对象，这个对象的所以属性和方法，都会被构造函数所拥有</p><p>把那些不变的方法，直接定义在prototype对象上，这样所有对象的实例可以共享这些方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>   <span class="hljs-comment">//  this.sing = function() &#123;</span><br>     <span class="hljs-comment">//console.log(&#x27;我会唱歌&#x27;);</span><br>    &#125;<br>&#125;<br>Star.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//在原型对象上添加一个共有的方法</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br>ldh.sing();<br></code></pre></td></tr></table></figure><p>公共属性定义在构造函数里，公共方法放在原型对象里面</p><h2 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型 _proto_"></a>对象原型 <code>_proto_</code></h2><p>对象有一个属性<code>_proto_</code>指向构造函数的prototype原型对象，之所以可以使用构造函数prototype原型对象的属性和方法 ，就是因为对象有<code>_proto</code>_存在</p><p>​    <img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106143345685.png" alt="image-20210106143345685"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106143416554.png" alt="image-20210106143416554"></p><p>方法的查找规则：首先看ldh对象身上是否有sing方法，如果有就执行这个对象上的sing</p><p>如果没有sing这个方法，应为_proto_的存在，就去构造函数原型对象prototype身上查找</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。<br>如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。<br>如果还没有就查找原型对象的原型（<span class="hljs-built_in">Object</span>的原型对象）。<br>依此类推一直找到 <span class="hljs-built_in">Object</span> 为止（<span class="hljs-literal">null</span>）。<br>__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。<br></code></pre></td></tr></table></figure><h2 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h2><p>对象原型(<em>proto</em>)和构造函数(<em>prototype</em>)原型对象里面都有一个属性constructor属性，constructor指向构造函数本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//如果我们这样写就有问题：</span><br>Star.prototype = &#123;<br>    <span class="hljs-comment">//如果我们修改了原来的原型对象，给原型对象赋值的是一个新的对象，则必须手动让construcor指向原来的构造函数</span><br>    <span class="hljs-title">constructor</span>:<span class="hljs-title">Star</span>,//重要<br>    <span class="hljs-title">sing</span>:<span class="hljs-title">function</span>(<span class="hljs-params"></span>)&#123;<br>&#125;,<br>    movie:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106145224927.png" alt="image-20210106145224927"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106150011894.png" alt="image-20210106150011894"></p><p>原型链的作用就在于一个对象可以一层接着一层向上查找</p><p>JavaScript 成员查找机制 按照原型链的方向进行查找</p><p>1、当访问一个对象的属性（或者方法时），先查找这个对象本身有无该属性</p><p>2、如果没有就查找它的原型(<code>_proto_</code>指向的<code>prototype</code>原型对象)</p><p>3、如果还没有就查找原型对象的原型（object原型对象）</p><p>4、还是查找不到则到了最顶层null</p><p>原型对象中的this指向问题</p><p>1、在构造函数中，this指向对象实例</p><p>2、在原型对象中，原型对象函数中this指向实例对象</p><h2 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h2><p>通过原型对象，对原来的内置对象进行扩展自定义方法，比如给数组增加自定义求偶数的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.prototype);<br><span class="hljs-built_in">Array</span>.prototype.sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt; <span class="hljs-built_in">this</span>.length;i++)&#123;<br>        sum+=<span class="hljs-built_in">this</span>[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr.sum();<br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="call-方法"><a href="#call-方法" class="headerlink" title="call()方法"></a>call()方法</h2><p>可以修改函数的this指向</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106214107229.png" alt="image-20210106214107229"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">x,y</span>)</span>&#123;<br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hahaha&quot;</span>);<br>         <span class="hljs-built_in">console</span>.log(x+y);<br>     &#125;<br>     <span class="hljs-keyword">var</span> o =&#123;<br>         name : <span class="hljs-string">&#x27;andy&#x27;</span><br>     &#125;<br>     <span class="hljs-comment">// fn.call(); 可以调用函数</span><br>     fn.call(o,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">//改变了函数的this指向 此时函数的this指向了o这个对象</span><br></code></pre></td></tr></table></figure><h2 id="ES5中的继承"><a href="#ES5中的继承" class="headerlink" title="ES5中的继承"></a>ES5中的继承</h2><h3 id="利用构造函数继承父类型的属性，利用原型对象继承父类型的方法"><a href="#利用构造函数继承父类型的属性，利用原型对象继承父类型的方法" class="headerlink" title="利用构造函数继承父类型的属性，利用原型对象继承父类型的方法"></a>利用构造函数继承父类型的属性，利用原型对象继承父类型的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname,age</span>)</span>&#123;<br>           <span class="hljs-built_in">this</span>.uname = uname;<br>           <span class="hljs-built_in">this</span>.age = age;<br>       &#125;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname,age</span>)</span>&#123;<br>           Father.call(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//此时this指向子构造函数</span><br>       &#125;<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="利用原型对象继承父类型方法"><a href="#利用原型对象继承父类型方法" class="headerlink" title="利用原型对象继承父类型方法"></a>利用原型对象继承父类型方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 父构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>  <span class="hljs-comment">// this 指向父构造函数的对象实例</span><br>  <span class="hljs-built_in">this</span>.uname = uname;<br>  <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br>Father.prototype.money = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100000</span>);<br> &#125;;<br> <span class="hljs-comment">// 2 .子构造函数 </span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname, age, score</span>) </span>&#123;<br>      <span class="hljs-comment">// this 指向子构造函数的对象实例</span><br>      Father.call(<span class="hljs-built_in">this</span>, uname, age);<br>      <span class="hljs-built_in">this</span>.score = score;<br>  &#125;<br><span class="hljs-comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span><br>  Son.prototype = <span class="hljs-keyword">new</span> Father();<br>  <span class="hljs-comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span><br>  Son.prototype.constructor = Son;<br>  <span class="hljs-comment">// 这个是子构造函数专门的方法</span><br>  Son.prototype.exam = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;孩子要考试&#x27;</span>);<br><br>  &#125;<br>  <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>);<br>  <span class="hljs-built_in">console</span>.log(son);<br></code></pre></td></tr></table></figure><h1 id="ES5新增方法"><a href="#ES5新增方法" class="headerlink" title="ES5新增方法"></a>ES5新增方法</h1><h2 id="数组中"><a href="#数组中" class="headerlink" title="数组中"></a>数组中</h2><p><code>forEach()</code>、<code>map()</code>、<code>some()</code>、<code>filter()</code>、<code>every()</code>;</p><h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>       arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,array</span>)</span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;每个数组元素&#x27;</span>+value);<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;每个数组元素索引号&#x27;</span>+index);  <br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数组本身&#x27;</span>,array);<br>       &#125;)<br><span class="hljs-comment">//参数一是:数组元素</span><br>      <span class="hljs-comment">//参数二是:数组元素的索引</span><br>      <span class="hljs-comment">//参数三是:当前的数组</span><br></code></pre></td></tr></table></figure><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter()方法"></a>filter()方法</h3><p>用来创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于筛选数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">66</span>, <span class="hljs-number">4</span>, <span class="hljs-number">88</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> newArr = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index,array</span>) </span>&#123;<br> <span class="hljs-comment">//参数一是:数组元素</span><br>   <span class="hljs-comment">//参数二是:数组元素的索引</span><br>   <span class="hljs-comment">//参数三是:当前的数组</span><br>   <span class="hljs-keyword">return</span> value &gt;= <span class="hljs-number">20</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(newArr);<span class="hljs-comment">//[66,88] //返回值是一个新数组</span><br></code></pre></td></tr></table></figure><h3 id="some-方法"><a href="#some-方法" class="headerlink" title="some()方法"></a>some()方法</h3><p>用于检测数组中的元素是否满足指定条件，</p><p>注意它的返回值是布尔值，如果查找到这个元素 ，就返回true，查不到就返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">some 查找数组中是否有满足条件的元素 <br> <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>];<br> <span class="hljs-keyword">var</span> flag = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,array</span>) </span>&#123;<br>    <span class="hljs-comment">//参数一是:数组元素</span><br>     <span class="hljs-comment">//参数二是:数组元素的索引</span><br>     <span class="hljs-comment">//参数三是:当前的数组</span><br>     <span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">3</span>;<br>  &#125;);<br><span class="hljs-built_in">console</span>.log(flag);<span class="hljs-comment">//false返回值是布尔值,只要查找到满足条件的一个元素就立马终止循环</span><br></code></pre></td></tr></table></figure><h2 id="案例：商品查询"><a href="#案例：商品查询" class="headerlink" title="案例：商品查询"></a>案例：商品查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs JS">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        table &#123;<br>            width: 400px;<br>            border: 1px solid #000;<br>            border-collapse: collapse;<br>            margin: <span class="hljs-number">0</span> auto;<br>        &#125;<br><br>        td,<br>        th &#123;<br>            border: 1px solid #000;<br>            text-align: center;<br>        &#125;<br><br>        input &#123;<br>            width: 50px;<br>        &#125;<br><br>        .search &#123;<br>            width: 600px;<br>            margin: 20px auto;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;search&quot;</span>&gt;<br>        按照价格查询: &lt;input type=&quot;text&quot; class=&quot;start&quot;&gt; - &lt;input type=&quot;text&quot; class=&quot;end&quot;&gt; &lt;button<br>            class=&quot;search-price&quot;&gt;搜索&lt;/button&gt; 按照商品名称查询: &lt;input type=&quot;text&quot; class=&quot;product&quot;&gt; &lt;button<br>            class=&quot;search-pname&quot;&gt;查询&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;table&gt;<br>        &lt;thead&gt;<br>            &lt;tr&gt;<br>                &lt;th&gt;id&lt;/th&gt;<br>                &lt;th&gt;产品名称&lt;/th&gt;<br>                &lt;th&gt;价格&lt;/th&gt;<br>            &lt;/tr&gt;<br>        &lt;/thead&gt;<br>        &lt;tbody&gt;<br><br><br>        &lt;/tbody&gt;<br>    &lt;/table&gt;<br>    &lt;script&gt;<br>        // 利用新增数组方法操作数据<br>        var data = [&#123;<br>            id: 1,<br>            pname: &#x27;小米&#x27;,<br>            price: 3999<br>        &#125;, &#123;<br>            id: 2,<br>            pname: &#x27;oppo&#x27;,<br>            price: 999<br>        &#125;, &#123;<br>            id: 3,<br>            pname: &#x27;荣耀&#x27;,<br>            price: 1299<br>        &#125;, &#123;<br>            id: 4,<br>            pname: &#x27;华为&#x27;,<br>            price: 1999<br>        &#125;, ];<br>        // 1. 获取相应的元素<br>        //获取响应元素<br>        var tbody = document.querySelector(&#x27;tbody&#x27;);<br>        var search_price = document.querySelector(&#x27;.search-price&#x27;);<br>        var start = document.querySelector(&#x27;.start&#x27;);<br>        var end = document.querySelector(&#x27;.end&#x27;);<br>        var search_pname = document.querySelector(&#x27;.search-pname&#x27;);<br>        var product = document.querySelector(&#x27;.product&#x27;)<br><br>        setData(data);<br>        function setData(mydata) &#123;<br>            mydata.forEach(function (value) &#123; //渲染数据<br>                var tr = document.createElement(&#x27;tr&#x27;);<br>                tr.innerHTML = &#x27;&lt;td&gt;&#x27; + value.id + &#x27;&lt;/td&gt;&lt;td&gt;&#x27; + value.pname + &#x27;&lt;/td&gt;&lt;td&gt;&#x27; + value.price +<br>                    &#x27;&lt;/td&gt;&#x27;;<br>                tbody.appendChild(tr)<br>            &#125;);<br>        &#125;<br>        search_price.addEventListener(&#x27;click&#x27;, function () &#123;<br>            // setData(null);<br>            tbody.innerHTML = &#x27;&#x27;;<br>            var serch_data = data.filter(function (value) &#123;<br>                return value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;<br>            &#125;)<br>            console.log(serch_data);<br>            setData(serch_data);<br>        &#125;)<br>        search_pname.addEventListener(&#x27;click&#x27;,function()&#123;<br>            tbody.innerHTML = &#x27;&#x27;;<br>            var serch_data = data.filter(function(value)&#123;<br>                return value.pname == product.value;<br>            &#125;)<br>            setData(serch_data);<br>        &#125;)<br>    &lt;/script&gt;<br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="字符串中新增方法"><a href="#字符串中新增方法" class="headerlink" title="字符串中新增方法"></a>字符串中新增方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str  = <span class="hljs-string">&#x27; andy &#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str);<br><span class="hljs-keyword">var</span> str1 = str.trim();<span class="hljs-comment">//去掉字符串两端的空格 注意只能取出两端的空格 返回一个新的字符串</span><br></code></pre></td></tr></table></figure><p>用这个方法可以解决输入框的空格小bug</p><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><p><code>Object.key(obj)</code> 用于返回对象自身的所有属性名</p><p>效果类似于for in</p><p><code>Object.defineProperty(obj,prop,discriptor)</code>定义对象中的新属性或修改原有属性</p><p>obj:必须 目标对象</p><p>prop：必须 需定义或修改的属性的名字</p><p>descriptor：必须 目标属性所拥有的特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//对其中第三个参数的说明</span><br><span class="hljs-built_in">Object</span>.defineProperty(对象，修改或新增的属性名，&#123;<br>value:修改或新增的属性的值,<br>writable:<span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>,<span class="hljs-comment">//如果值为false 不允许修改这个属性值</span><br>enumerable: <span class="hljs-literal">false</span>,<span class="hljs-comment">//enumerable 如果值为false 则不允许遍历</span><br>        configurable: <span class="hljs-literal">false</span>  <span class="hljs-comment">//configurable 如果为false 则不允许删除这个属性 属性是否可以被删除或是否可以再次修改特性</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210107124006608.png"></p><h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="函数的定义与调用"><a href="#函数的定义与调用" class="headerlink" title="函数的定义与调用"></a>函数的定义与调用</h2><h3 id="函数定义方式"><a href="#函数定义方式" class="headerlink" title="函数定义方式"></a>函数定义方式</h3><p><code>function fn()&#123;&#125;</code>  命名函数</p><p><code>var fn = function()&#123;&#125; </code>匿名函数</p><p><code>利用new Function(&#39;参数1&#39;，&#39;参数2&#39;,&#39;函数体&#39;)</code>了解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;console.log(a+b)&#x27;</span>);<br>f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//里面的参数必须要用字符串</span><br></code></pre></td></tr></table></figure><p>所有函数都是Function 的实例对象  即函数也是一个对象 有原型</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210107125029058.png" alt="image-20210107125029058"></p><h3 id="函数的调用函数"><a href="#函数的调用函数" class="headerlink" title="函数的调用函数"></a>函数的调用函数</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><p><code>fn()</code> <code>fn.call()</code></p><h4 id="对象方法-1"><a href="#对象方法-1" class="headerlink" title="对象方法"></a>对象方法</h4><p><code>对象.fn();</code></p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>在new对象是自动执行</p><h4 id="绑定事件函数"><a href="#绑定事件函数" class="headerlink" title="绑定事件函数"></a>绑定事件函数</h4><p>通过事件调用函数</p><h4 id="定时器函数"><a href="#定时器函数" class="headerlink" title="定时器函数"></a>定时器函数</h4><p>定时器自动调用</p><h4 id="理解执行函数"><a href="#理解执行函数" class="headerlink" title="理解执行函数"></a>理解执行函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;立即执行&#x27;</span>)<br>&#125;)()  <span class="hljs-comment">//立即执行函数自己调用</span><br></code></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h3><p>当函数调用方式不同时，函数this指向也不同，一般情况下，this指向调用者</p><h4 id="普通函数-1"><a href="#普通函数-1" class="headerlink" title="普通函数"></a>普通函数</h4><p>this指向window</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>this指向对象</p><h4 id="构造函数中"><a href="#构造函数中" class="headerlink" title="构造函数中"></a>构造函数中</h4><p>this指向实例对象，原型对象中的this也是指向实例对象</p><h4 id="绑定事件函数-1"><a href="#绑定事件函数-1" class="headerlink" title="绑定事件函数"></a>绑定事件函数</h4><p>this指向函数调用者</p><h4 id="定时器函数-1"><a href="#定时器函数-1" class="headerlink" title="定时器函数"></a>定时器函数</h4><p>this指向window</p><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>this指向window</p><h3 id="改变函数的this指向"><a href="#改变函数的this指向" class="headerlink" title="改变函数的this指向"></a>改变函数的this指向</h3><p><code>bind() call() apply()三种方法</code></p><h4 id="call-函数"><a href="#call-函数" class="headerlink" title="call()函数"></a>call()函数</h4><p><code>fn.call(对象名,参数1，参数2,.....)</code></p><h4 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h4><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p><p>应用场景:  经常跟数组有关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o = &#123;<br>name: <span class="hljs-string">&#x27;andy&#x27;</span><br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>      <span class="hljs-built_in">console</span>.log(a+b)<br>&#125;;<br>fn()<span class="hljs-comment">// 此时的this指向的是window 运行结果为3</span><br>fn.apply(o,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<span class="hljs-comment">//此时的this指向的是对象o,参数使用数组传递 运行结果为3</span><br><br><span class="hljs-comment">//可以调用函数，可以改变函数内部的this指向</span><br><span class="hljs-comment">//参数必须是数组(也可以是伪数组)</span><br><span class="hljs-comment">//主要应用 例如可以利用apply借助于数学内置对象求最大值  </span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">66</span>,<span class="hljs-number">3</span>,<span class="hljs-number">99</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">var</span> max = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-built_in">Math</span>,arr);<br><span class="hljs-comment">//原来数组中并没有求最大值这个方法</span><br><br></code></pre></td></tr></table></figure><h4 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h4><p>bind() 方法不会调用函数,但是能改变函数内部this 指向,返回的是原函数改变this之后产生的新函数</p><p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind</p><p>应用场景:不调用函数,但是还想改变this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o =&#123;<br>    <br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-keyword">var</span> f = fn.bind(o);<br>f();<br><br><span class="hljs-comment">//////////////////////////////////////////</span><br> <span class="hljs-keyword">var</span> o = &#123;<br> name: <span class="hljs-string">&#x27;andy&#x27;</span><br> &#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br><span class="hljs-built_in">console</span>.log(a + b);<br>&#125;;<br><span class="hljs-keyword">var</span> f = fn.bind(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//此处的f是bind返回的新函数</span><br>f();<span class="hljs-comment">//调用新函数  this指向的是对象o 参数使用逗号隔开</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>); <span class="hljs-comment">//定时禁用按钮</span><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">false</span>;<br>    &#125;.bind(<span class="hljs-built_in">this</span>),<span class="hljs-number">3000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三种方法的区别"><a href="#三种方法的区别" class="headerlink" title="三种方法的区别"></a>三种方法的区别</h4><ul><li>共同点 : 都可以改变this指向</li><li>不同点:<ul><li>call 和 apply  会调用函数, 并且改变函数内部this指向.</li><li>call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递</li><li>bind  不会调用函数, 可以改变函数内部this指向.</li></ul></li></ul><ul><li>应用场景<ol><li>call 经常做继承. </li><li>apply经常跟数组有关系.  比如借助于数学对象实现数组最大值最小值</li><li>bind  不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向. </li></ol></li></ul><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>消除了JavaScript语法的一些不合理、不严谨之处，减少了一些怪异行为</p><p>消除代码运行的一些不安全之处，保证代码安全</p><p>提高编译器速率</p><p>禁止在ECMAscript的未来版本中一些可能语法</p><p>###如何开启</p><h4 id="为整个脚本开启严格模式"><a href="#为整个脚本开启严格模式" class="headerlink" title="为整个脚本开启严格模式"></a>为整个脚本开启严格模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span><br><span class="hljs-meta">　　　　&quot;use strict&quot;</span>;<br>       <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>　　　　<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>&#125;)();<br><span class="hljs-comment">//或者 </span><br>&lt;script&gt;<br><span class="hljs-meta">  　&quot;use strict&quot;</span>; <span class="hljs-comment">//当前script标签开启了严格模式</span><br>&lt;/script&gt;<br>&lt;script&gt;<br>  <span class="hljs-comment">//当前script标签未开启严格模式</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="为某个函数开启严格模式"><a href="#为某个函数开启严格模式" class="headerlink" title="为某个函数开启严格模式"></a>为某个函数开启严格模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-meta">　　&quot;use strict&quot;</span>;<br>　　<span class="hljs-comment">//下面的代码按照严格模式执行</span><br>&#125; <br><span class="hljs-comment">//当前fn函数开启了严格模式</span><br></code></pre></td></tr></table></figure><h3 id="严格模式的变化"><a href="#严格模式的变化" class="headerlink" title="严格模式的变化"></a>严格模式的变化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-meta">  &quot;use strict&quot;</span>;<span class="hljs-comment">//当前script标签未开启严格模式</span><br>num = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(num); <span class="hljs-comment">//报错，未声明变量</span><br><span class="hljs-comment">//不能删除已经声明的变量</span><br><span class="hljs-keyword">delete</span> num;<span class="hljs-comment">//报错</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//严格模式的全局作用域中，this指向undefined</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br>&#125;<br>Star();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.sex); <span class="hljs-comment">//输出undefined</span><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br>num = <span class="hljs-number">10</span> <br><span class="hljs-built_in">console</span>.log(num)<span class="hljs-comment">//严格模式后使用未声明的变量</span><br>--------------------------------------------------------------------------------<br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">delete</span> num2;<span class="hljs-comment">//严格模式不允许删除变量</span><br>--------------------------------------------------------------------------------<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 严格模式下全局作用域中函数中的 this 是 undefined</span><br>&#125;<br>fn();  <br>---------------------------------------------------------------------------------<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-built_in">this</span>.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br>&#125;<br><span class="hljs-comment">// Star();严格模式下,如果 构造函数不加new调用, this 指向的是undefined ，此时把构造函数当做普通函数 如果给他赋值则 会报错.</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star();<br><span class="hljs-built_in">console</span>.log(ldh.sex);<br>----------------------------------------------------------------------------------<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//严格模式下，定时器 this 还是指向 window</span><br>&#125;, <span class="hljs-number">2000</span>);  <br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">更多严格模式要求参考MDN文档</a></p><p>函数不能有重名的参数</p><p>函数必须声明在顶层  新版本的JavaScript 会引入“块级作用域”  不允许在非函数的代码块声明函数</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="情况1-接收函数作为参数"><a href="#情况1-接收函数作为参数" class="headerlink" title="情况1  接收函数作为参数"></a>情况1  接收函数作为参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b ,callback</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a+b);<br>    callback &amp;&amp; callback();<br>&#125;<br>fn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加法执行完毕&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="情况2-将函数作为返回值输出"><a href="#情况2-将函数作为返回值输出" class="headerlink" title="情况2 将函数作为返回值输出"></a>情况2 将函数作为返回值输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;<br>fn();<br></code></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="闭包概述"><a href="#闭包概述" class="headerlink" title="闭包概述"></a>闭包概述</h3><p>指有权访问另一个函数作用域中的变量的<code>函数</code> 一个作用域可以访问另一个函数内部的局部变量</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210108124707473.png" alt="image-20210108124707473"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>         <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>         <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>             <span class="hljs-built_in">console</span>.log(num); <span class="hljs-comment">//访问到另一个函数内部的局部变量</span><br>         &#125;<br>         fun();<br>     &#125;<br>     fn();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> num  = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(num);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> f = fn();<br>    f();<br><br></code></pre></td></tr></table></figure><p>重要点：闭包的作用，延伸了变量的作用范围</p><h3 id="闭包应用"><a href="#闭包应用" class="headerlink" title="闭包应用"></a>闭包应用</h3><p>应用1：循环点击注册事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////动态添加属性获取点击li索引号</span><br>    <span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.nav&#x27;</span>).querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(lis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;lis.length;i++)&#123;<br>        lis[i].index = i;<br>        lis[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.index);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">///////////////////////////利用闭包</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;lis.length;i++)&#123;<br>        (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)</span>&#123; <span class="hljs-comment">//立即执行函数又称为小闭包，闭包函数内部所以函数都可访问到这个i</span><br>            lis[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//存在内存泄漏问题</span><br>            <span class="hljs-built_in">console</span>.log(i);<br>        &#125;<br>        &#125;)(i);<br>    &#125;<br></code></pre></td></tr></table></figure><p>应用2：循环中的<code>setTimeout()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>; i&lt;lis.length;i++)&#123;<br>           (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)</span>&#123;<br>               <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                   <span class="hljs-built_in">console</span>.log(lis[i].innerHTML)<br>               &#125;,<span class="hljs-number">3000</span>)<br>           &#125;)(i);<br>       &#125;<br></code></pre></td></tr></table></figure><p>应用3：打车价格计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">需求分析<br>打车起步价<span class="hljs-number">13</span>(<span class="hljs-number">3</span>公里内),  之后每多一公里增加 <span class="hljs-number">5</span>块钱.  用户输入公里数就可以计算打车价格<br>如果有拥堵情况,总价格多收取<span class="hljs-number">10</span>块钱拥堵费*/<br><br> <span class="hljs-keyword">var</span> car = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> start = <span class="hljs-number">13</span>; <span class="hljs-comment">// 起步价  局部变量</span><br>     <span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>; <span class="hljs-comment">// 总价  局部变量</span><br>     <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-comment">// 正常的总价</span><br>       price: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) </span>&#123;<br>         <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;<br>           total = start;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>           total = start + (n - <span class="hljs-number">3</span>) * <span class="hljs-number">5</span><br>         &#125;<br>         <span class="hljs-keyword">return</span> total;<br>       &#125;,<br>       <span class="hljs-comment">// 拥堵之后的费用</span><br>       yd: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">flag</span>) </span>&#123;<br>         <span class="hljs-keyword">return</span> flag ? total + <span class="hljs-number">10</span> : total;<br>       &#125;<br>&#125;<br> &#125;)();<br><span class="hljs-built_in">console</span>.log(car.price(<span class="hljs-number">5</span>)); <span class="hljs-comment">// 23</span><br><span class="hljs-built_in">console</span>.log(car.yd(<span class="hljs-literal">true</span>)); <span class="hljs-comment">// 33</span><br><br><br></code></pre></td></tr></table></figure><p>闭包是一个函数（一个作用域可以访问另一个函数的局部变量）</p><p>闭包的作用：衍生了变量的作用范围</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>函数的内部自己调用自己</p><p>很容易发生栈溢出，一定要给定条件下return返回</p><p>应用：根据id返回数据对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 我们想要做输入id号,就可以返回的数据对象</span><br> <span class="hljs-keyword">var</span> data = [&#123;<br>   id: <span class="hljs-number">1</span>,<br>   name: <span class="hljs-string">&#x27;家电&#x27;</span>,<br>   goods: [&#123;<br>     id: <span class="hljs-number">11</span>,<br>     gname: <span class="hljs-string">&#x27;冰箱&#x27;</span>,<br>     goods: [&#123;<br>       id: <span class="hljs-number">111</span>,<br>       gname: <span class="hljs-string">&#x27;海尔&#x27;</span><br>     &#125;, &#123;<br>       id: <span class="hljs-number">112</span>,<br>       gname: <span class="hljs-string">&#x27;美的&#x27;</span><br>     &#125;,<br><br>            ]<br><br>   &#125;, &#123;<br>     id: <span class="hljs-number">12</span>,<br>     gname: <span class="hljs-string">&#x27;洗衣机&#x27;</span><br>   &#125;]<br> &#125;, &#123;<br>   id: <span class="hljs-number">2</span>,<br>   name: <span class="hljs-string">&#x27;服饰&#x27;</span><br>&#125;];<br><span class="hljs-comment">//1.利用 forEach 去遍历里面的每一个对象</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getID</span>(<span class="hljs-params">json, id</span>) </span>&#123;<br>   <span class="hljs-keyword">var</span> o = &#123;&#125;;<br>   json.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>     <span class="hljs-comment">// console.log(item); // 2个数组元素</span><br>     <span class="hljs-keyword">if</span> (item.id == id) &#123;<br>       <span class="hljs-comment">// console.log(item);</span><br>       o = item;<br>       <span class="hljs-keyword">return</span> o;<br>       <span class="hljs-comment">// 2. 我们想要得里层的数据 11 12 可以利用递归函数</span><br>       <span class="hljs-comment">// 里面应该有goods这个数组并且数组的长度不为 0 </span><br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.goods &amp;&amp; item.goods.length &gt; <span class="hljs-number">0</span>) &#123;<br>       o = getID(item.goods, id);<br>     &#125;<br>   &#125;);<br>   <span class="hljs-keyword">return</span> o;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝只拷贝一层，更深层次对象级别的只拷贝引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//浅拷贝方法</span><br>      <span class="hljs-keyword">var</span> obj = &#123;<br>            id :<span class="hljs-number">1</span>,<br>            name:<span class="hljs-string">&#x27;andy&#x27;</span>,<br>            msg:&#123;<br>                age:<span class="hljs-number">18</span><br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">var</span> o = &#123;&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> obj)&#123; <span class="hljs-comment">//浅拷贝拷贝的是地址 指向的是同一个数据 ，通过o进行修改也会影响原来的对象</span><br>            o[k] = obj[k];<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(o); <br>        <span class="hljs-comment">//ES6浅拷贝语法糖</span><br>        <span class="hljs-built_in">Object</span>.assign(o,obj);<br>        <span class="hljs-built_in">console</span>.log(o)<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210108144601138.png" alt="image-20210108144601138"></p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝拷贝多层，每一层的数据都会拷贝</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210108144607010.png" alt="image-20210108144607010">j’s</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;深拷贝****************************&#x27;</span>);<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepCopy</span>(<span class="hljs-params">newObj,oldObj</span>)</span>&#123;<br>            <span class="hljs-comment">//1、判断数据类型</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> oldObj)&#123;<br>                <span class="hljs-keyword">var</span> item = oldObj[k];<br>                <span class="hljs-keyword">if</span>(item <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>)&#123;<br>                    newObj[k] = [];<br>                    deepCopy(newObj[k],item)<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>)&#123;<br>                    newObj[k] = &#123;&#125;;<br>                    deepCopy(newObj[k],item)<br>                &#125;<br>                <span class="hljs-keyword">else</span> newObj[k] = item;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> o =&#123;&#125;;<br>        deepCopy(o,obj);<br>        <span class="hljs-built_in">console</span>.log(o);<br>    o.msg.age = <span class="hljs-number">20</span>; <span class="hljs-comment">//o的age为20，obj的age还是18</span><br><span class="hljs-comment">//修改两个对象的属性互相不影响</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jquery学习</title>
    <link href="/2021/01/05/jquery%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/05/jquery%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p>JavaScript库，通过JavaScript封装</p><h2 id="等着页面加载完在调用JQuery的方法"><a href="#等着页面加载完在调用JQuery的方法" class="headerlink" title="等着页面加载完在调用JQuery的方法"></a>等着页面加载完在调用JQuery的方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$document.ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;div&#x27;</span>).hide;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;div&#x27;</span>).hide<br>&#125;)<br></code></pre></td></tr></table></figure><p>两种方法效果一样，效果相当于js中的DOMContentLoaded</p><h2 id="顶级对象"><a href="#顶级对象" class="headerlink" title="顶级对象"></a>顶级对象</h2><p>$是JQuery的别称</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105143109748.png" alt="image-20210105143109748"></p><p>$也是JQuery中的顶级对象</p><h2 id="JQuery对象与DOM对象"><a href="#JQuery对象与DOM对象" class="headerlink" title="JQuery对象与DOM对象"></a>JQuery对象与DOM对象</h2><p>1、用元素JS获取到的对象</p><p>2、用JQuery获取来的对象</p><p>3、JQuery对象的本质：利用$对DOM对象包装后产生的对象(伪数组方式存储)，JQuery对象只能使用JQuery方法，DOM对象使用原生的JavaScript属性和方法</p><h2 id="DOM与JQuery对象相互转换"><a href="#DOM与JQuery对象相互转换" class="headerlink" title="DOM与JQuery对象相互转换"></a>DOM与JQuery对象相互转换</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105145331450.png" alt="image-20210105145331450"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.DOM对象转换成jQuery对象，方法只有一种</span><br><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;box&#x27;</span>);  <span class="hljs-comment">// 获取DOM对象</span><br><span class="hljs-keyword">var</span> jQueryObject = $(box);  <span class="hljs-comment">// 把DOM对象转换为 jQuery 对象</span><br><br><span class="hljs-comment">// 2.jQuery 对象转换为 DOM 对象有两种方法：</span><br><span class="hljs-comment">//   2.1 jQuery对象[索引值]</span><br><span class="hljs-keyword">var</span> domObject1 = $(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment">//   2.2 jQuery对象.get(索引值)</span><br><span class="hljs-keyword">var</span> domObject2 = $(<span class="hljs-string">&#x27;div&#x27;</span>).get(<span class="hljs-number">0</span>)<br> <br></code></pre></td></tr></table></figure><h2 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h2><p>$(“选择器”)</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150020660.png" alt="image-20210105150020660"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150143537.png" alt="image-20210105150143537"></p><h2 id="JQuery隐式迭代"><a href="#JQuery隐式迭代" class="headerlink" title="JQuery隐式迭代"></a>JQuery隐式迭代</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>,<span class="hljs-string">&quot;pink&quot;</span>) <span class="hljs-comment">//给div设置背景颜色</span><br><span class="hljs-comment">//隐式迭代把匹配到的元素内部进行遍历循环，给每一个元素添加CSS方法</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150904150.png" alt="image-20210105150904150"></p><h2 id="JQuery筛选选择器"><a href="#JQuery筛选选择器" class="headerlink" title="JQuery筛选选择器"></a>JQuery筛选选择器</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150947467.png" alt="image-20210105150947467"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105153200716.png" alt="image-20210105153200716"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM学习</title>
    <link href="/2021/01/02/DOM/"/>
    <url>/2021/01/02/DOM/</url>
    
    <content type="html"><![CDATA[<h1 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h1><p>WEB API是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>1、获取页面元素</li><li>2、给元素注册事件</li><li>3、操作DOM元素的属性</li><li>4、创建元素</li><li>5、操作DOM节点</li></ul><p>##DOM树</p><p><img src="https://img-blog.csdn.net/20151110111104365" alt="这里写图片描述"></p><p>文档：一个页面就是一个文档</p><p>元素：页面中所用标签都是元素，DOM中使用element表示</p><p>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM中使用node表示</p><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><h3 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h3><p>由于文档页面从上往下加载，所以先得有标签，scipt要写到标签下</p><p><code>document.getElementById(&quot;id&quot;)</code></p><p>注意id是大小写敏感的字符串</p><p>返回的是一个元素对象,里面包含很多方法</p><p><code>console.dir</code> 打印我们返回的元素对象 更好的查看里面的属性和方法</p><h3 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h3><p>返回的是获取过来元素对象的集合 ，都是以伪数组的形式返回</p><p><code>var tag = document.getElementsByTagName(&#39;li&#39;);</code></p><p>还可以获取父元素内部所有指定标签名的子元素，父元素必须是指明的单个元素，上述两种方法一起使用</p><p><code>document.getElementsByTagName(&#39;标签名&#39;)</code></p><h3 id="通过类名"><a href="#通过类名" class="headerlink" title="通过类名"></a>通过类名</h3><p><code>document.getElementsByClassName(&#39;类名&#39;)</code></p><h3 id="通过HTML5新增的方法获取"><a href="#通过HTML5新增的方法获取" class="headerlink" title="通过HTML5新增的方法获取"></a>通过<code>HTML5</code>新增的方法获取</h3><p><code>document.querySelector(&#39;.box&#39;)</code> （可以选择id，class，标签等）功能更强大 .box #nav</p><p>返回的是第一个元素的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>)<span class="hljs-comment">//返回的是所有元素的对象</span><br><span class="hljs-built_in">console</span>.log(x);<br></code></pre></td></tr></table></figure><p>###获取特殊元素</p><p>获取body元素</p><p>``document.body`</p><p>获取html元素</p><p><code>document.documentElement</code></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>触发–响应机制</p><p>事件有三部分组成 事件源 事件类型 事件处理程序 事件三要素</p><p>事件源：事件被触发的对象</p><p>事件类型：什么事件 例如鼠标点击（<code>onclick</code>）</p><p>事件处理程序：触发后要执行的程序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">     <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>);</span><br><span class="javascript">     btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">         alert(<span class="hljs-string">&#x27;哈哈哈&#x27;</span>);</span><br>     &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>##DOM操作元素</p><h3 id="修改元素内容"><a href="#修改元素内容" class="headerlink" title="修改元素内容"></a>修改元素内容</h3><p><code>innerHTML</code> 识别html标签  保留空格和换行 标准</p><p><code>innerText</code>  不识别html标签   去掉空格和换行 非标准</p><p>不仅可以操作元素 还可以获取元素内容</p><h3 id="修改元素属性"><a href="#修改元素属性" class="headerlink" title="修改元素属性"></a>修改元素属性</h3><p>例子：切换图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ldh&quot;</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;zxy&quot;</span>&gt;</span>张学友<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./ldh.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> ldh = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ldh&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> zxy = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;zxy&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(zxy);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="javascript">        zxy.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            img.src = <span class="hljs-string">&#x27;./zxy.jpg&#x27;</span>;</span><br>        &#125;<br><span class="javascript">        ldh.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            img.src = <span class="hljs-string">&#x27;./ldh.jpg&#x27;</span>;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表单元素属性操作"><a href="#表单元素属性操作" class="headerlink" title="表单元素属性操作"></a>表单元素属性操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;输入内容&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="javascript">        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            input.value = <span class="hljs-string">&#x27;被点击了&#x27;</span>;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>;<span class="hljs-comment">//this指向的是事件函数的调用者</span></span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例 密码显示与隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-class">.box</span> &#123;</span><br>            position: relative;<br>            width: 400px;<br><span class="css">            <span class="hljs-selector-tag">border-bottom</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#ccc</span>;</span><br>            margin: 100px auto;<br>        &#125;<br><br><span class="css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">input</span> &#123;</span><br>            width: 370px;<br>            height: 30px;<br>            border: 0;<br>            outline: none;<br>        &#125;<br><br><span class="css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">img</span> &#123;</span><br>            position: absolute;<br>            width: 24px;<br>            top: 2px;<br>            right: 10px;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./闭眼.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;eye&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-comment">//1、获取元素</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;eye&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> pwd = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;pwd&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">        img.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (!flag) &#123;</span><br><span class="javascript">                pwd.type = <span class="hljs-string">&#x27;text&#x27;</span>;</span><br><span class="javascript">                flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">                img.src = <span class="hljs-string">&#x27;./睁眼.png&#x27;</span></span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                pwd.type = <span class="hljs-string">&#x27;password&#x27;</span>;</span><br><span class="javascript">                flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                img.src = <span class="hljs-string">&#x27;./闭眼.png&#x27;</span></span><br>            &#125;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修改样式属性"><a href="#修改样式属性" class="headerlink" title="修改样式属性"></a>修改样式属性</h3><p>JS修改style样式操作，产生行内属性，CSS权重较高</p><h4 id="元素隐藏和显示"><a href="#元素隐藏和显示" class="headerlink" title="元素隐藏和显示"></a>元素隐藏和显示</h4><p><code>display:none</code>隐藏元素 <code>display:block</code>显示元素</p><h3 id="类名样式操作"><a href="#类名样式操作" class="headerlink" title="类名样式操作"></a>类名样式操作</h3><p><code>element.className</code></p><p>直接声明一个新类，覆盖原先的样式类，适合于样式较多或者功能复杂的情况</p><p>小技巧 ：多类名原则器 直接在原先类名基础上加上空格以及新增类名，这样即可保留原来的样式，也有新增的样式</p><p>###总结</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201231161229698.png" alt="image-20201231161229698"></p><p>###排他思想</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201231162512427.png" alt="image-20201231162512427"></p><h3 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h3><p>1、<code>element.属性</code>  只可以获取html自带属性(如id的值 class的值等)</p><p>2、<code>element.getAttribute(&#39;属性&#39;)</code> 可以获取一个div等自定义属性(如自定义一个属性index)</p><p>3、通过<code>element.setAttribute(&#39;属性&#39;,&#39;值&#39;)</code>更改一个自定义属性 </p><p>4、<code>element.属性 = &#39;值&#39;</code>设置自带属性值</p><p>5、<code>div.removeAttribute(&#39;index&#39;)</code>移除属性</p><p>###设置H5自定义属性</p><p>H5约束自定义属性要用data-开头 例如<code>&lt;div data-index = &quot;1&quot;&gt;    &lt;/div&gt;</code></p><p>H5新增获取自定义属性的方法 <code>console.log(div.dataset.index)</code>dataset是个集合，存放了所以与data-开头自定义属性的集合,只能获取data-开头的自定义属性</p><p>如果自定义属性里面含多个-链接的单词，我们获取的时候采样驼峰命名法</p><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div data-list-name = <span class="hljs-string">&quot;andy&quot;</span>&gt; &lt;/div&gt;<br>div.dataset.listName<br></code></pre></td></tr></table></figure><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>利用节点的层次关系获取元素</p><p>HTML DOM树中的所有节点均可通过JavaScript进行访问，所有HTML元素均可被修改，也可以被创建和删除</p><p>节点至少拥有nodeType(节点类型)、nodeName(节点名称)和nodeValue(节点值)这三个基本属性</p><p>元素节点 nodeType 为1</p><p>属性节点 nodeType 为2</p><p>元素节点 nodeType 为3（文字、空格、换行等）</p><p>实际开发 主要操作元素节点</p><h3 id="节点操作父亲节点"><a href="#节点操作父亲节点" class="headerlink" title="节点操作父亲节点"></a>节点操作父亲节点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;erweima&quot;</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> erweima = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.erweima&quot;</span>); <span class="hljs-comment">//得到的是离它最近的父亲节点 如果找不到则返回为空</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(erweima.parentNode);</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="子节点操作父节点"><a href="#子节点操作父节点" class="headerlink" title="子节点操作父节点"></a>子节点操作父节点</h3><p><code>元素名.childNodes</code></p><p><code>元素名.children</code>(非标准) 只获得元素节点，实际开发更常用</p><p><code>元素名.firstElementChiled</code> 返回第一个子元素节点</p><p><code>元素名.lastElementChiled</code> 返回最后一个子元素节点`</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210102113856905.png" alt="image-20210102113856905"></p><h3 id="案例-：下拉菜单"><a href="#案例-：下拉菜单" class="headerlink" title="案例 ：下拉菜单"></a>案例 ：下拉菜单</h3><h3 id="兄弟节点操作"><a href="#兄弟节点操作" class="headerlink" title="兄弟节点操作"></a>兄弟节点操作</h3><p><code>node.nextElementSibling</code>  得到下一个兄弟元素节点</p><p><code>node.perviousElementSiling</code> 得到上一个兄弟元素节点</p><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p><code>document.creatElement(&#39;tagNmae&#39;)</code>  动态创建节点</p><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><p><code>node.appendChild(child)</code> node是父级，child是子集</p><p>添加元素到指定位置</p><p><code>ul.insertBefore(child,指定元素)</code> 添加到指定元素前面</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><code>node.removeChild(child)</code> node是父级，child是子集</p><h3 id="案例：删除留言"><a href="#案例：删除留言" class="headerlink" title="案例：删除留言"></a>案例：删除留言</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>       <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>       <span class="hljs-keyword">var</span> test = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>       <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>       btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">if</span> (test.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>               alert(<span class="hljs-string">&#x27;未输入内容&#x27;</span>);<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>               li.innerHTML = test.value + <span class="hljs-string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<br>               ul.insertBefore(li, ul.children[<span class="hljs-number">0</span>]);<br>           &#125;<br>           <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a&#x27;</span>);<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">as</span>);<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.length; i++) &#123;<br>               <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                   ul.removeChild(<span class="hljs-built_in">this</span>.parentNode);<br>                   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除&#x27;</span>);<br>               &#125;<br>           &#125;<br><br>       &#125;<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><p><code>node.cloneNode</code> 括号为空或者里面是false 浅拷贝 只赋值标签不赋值里面的内容 </p><p><code>node.cloneNode(true)</code> 为深拷贝，会复制内容</p><h3 id="案例-动态生成表格"><a href="#案例-动态生成表格" class="headerlink" title="案例 动态生成表格"></a>案例 动态生成表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        table &#123;<br>            width: 500px;<br>            margin: 100px auto;<br>            border-collapse: collapse;<br>            text-align: center;<br>        &#125;<br>        <br>        td,<br>        th &#123;<br><span class="css">            <span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#333</span>;</span><br>        &#125;<br>        <br>        thead tr &#123;<br>            height: 40px;<br><span class="css">            <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#ccc</span>;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>科目<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-comment">// 1.先去准备好学生的数据</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> datas = [&#123;</span><br><span class="javascript">            name: <span class="hljs-string">&#x27;魏璎珞&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 100<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;弘历&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 98<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;傅恒&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 99<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;明玉&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 88<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;大猪蹄子&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 0<br>        &#125;];<br><br>        <br><span class="javascript">        <span class="hljs-comment">// 2. 往tbody 里面创建行： 有几个人（通过数组的长度）我们就创建几行</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> tbody = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;tbody&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;datas.length;i++)&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;tr&#x27;</span>);</span><br>            tbody.appendChild(tr);<br><span class="javascript">            <span class="hljs-comment">//行里面创建单元格，单元格数量取决于每个对象里面的属性个数</span></span><br><span class="javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> datas[i])&#123;</span><br><span class="javascript">                <span class="hljs-comment">//创建单元格</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> td  = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;td&#x27;</span>)</span><br>                tr.appendChild(td);<br><span class="javascript">                td.textContent = datas[i][k];<span class="hljs-comment">//获得属性值            </span></span><br>            &#125;<br><span class="javascript">            <span class="hljs-comment">//创建删除单元格</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> td = <span class="hljs-built_in">document</span>. createElement(<span class="hljs-string">&#x27;td&#x27;</span>);</span><br><span class="handlebars"><span class="xml">            td.innerHTML = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>删除 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;;</span></span><br>            tr.appendChild(td);<br>        &#125;<br><span class="javascript">        <span class="hljs-comment">//删除操作</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">as</span>.length; i++)&#123;</span><br><span class="javascript">            <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                tbody.removeChild(<span class="hljs-built_in">this</span>.parentNode.parentNode);</span><br>            &#125;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：</p><p>表格格式：</p><ul><li>分为<thead>(表头)和<tbody>（表内容）</li><li>每一行为一个tr，一个tr里面每一个td为一个单元格</li></ul><p><code>creatElement</code>比<code>innerHtml</code>效率更高</p><p>消耗主要来与拼接字符串开创空间的消耗</p><p>#事件高级</p><p>##注册事件</p><p>###传统注册方式</p><p>注册事件的唯一性</p><p>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面的处理函数</p><p>###方法监听注册方式</p><p><code>addEventListener</code>它是一个方法，同一个元素同一个事件可以注册多个监听器，按照注册事件一次执行</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210102140137110.png" alt="image-20210102140137110"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//注册多个事件，都依次执行</span><br>    alert(<span class="hljs-number">22</span>);<br>&#125;)<br>btn[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-number">33</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>##解绑事件</p><p>###传统解绑方式</p><p><code>eventTarget.onclick = null</code></p><h3 id="方法监听解绑"><a href="#方法监听解绑" class="headerlink" title="方法监听解绑"></a>方法监听解绑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, fn)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-number">22</span>);<br>    div.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,fn);<span class="hljs-comment">//解绑</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>事件流描述的是从页面中接收事件的顺序</p><p>事件发送时会在元素节点之间按照特点的顺序传播，这个传播过程即为DOM事件流</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210102144410921.png" alt="image-20210102144410921"></p><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e.target)  <span class="hljs-comment">//e.target返回的是触发事件的对象 点击了谁就返回谁</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>) <span class="hljs-comment">//this是绑定事件的对象 绑定了谁就返回谁</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>和<code>this</code>具有相似的对象是<code>currentTarget</code></p><p><code>e.type</code>返回事件类型 click mouseover等</p><h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.queryselector(<span class="hljs-string">&#x27;a&#x27;</span>);<br>a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    e.preventDefault(); <span class="hljs-comment">//阻止默认行为</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><p><code>stopPropagation()</code> 方法</p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>不是每个子节点单独设置事件监听器，而是将事件监听器放在父节点上，然后运用冒泡原理影响设置每个子节点</p><p>只操作一次DOM，提高程序的性能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span><br>        <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>        ul.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// alert(&#x27;知否知否，点我应有弹框在手！&#x27;);</span><br>            <span class="hljs-comment">// e.target 这个可以得到我们点击的对象</span><br>            e.target.style.backgroundColor = <span class="hljs-string">&#x27;pink&#x27;</span>;<br>        &#125;)<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="鼠标事件补充"><a href="#鼠标事件补充" class="headerlink" title="鼠标事件补充"></a>鼠标事件补充</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-comment">// 1. contextmenu 我们可以禁用右键菜单</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;contextmenu&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>                e.preventDefault();<br>            &#125;)<br>            <span class="hljs-comment">// 2. 禁止选中文字 selectstart</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;selectstart&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            e.preventDefault();<br><br>        &#125;)<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">script&gt;<br>        <span class="hljs-comment">// 鼠标事件对象 MouseEvent</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// 1. client 鼠标在可视区的x和y坐标</span><br>            <span class="hljs-built_in">console</span>.log(e.clientX);<br>            <span class="hljs-built_in">console</span>.log(e.clientY);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------&#x27;</span>);<br><br>            <span class="hljs-comment">// 2. page 鼠标在页面文档的x和y坐标</span><br>            <span class="hljs-built_in">console</span>.log(e.pageX);<br>            <span class="hljs-built_in">console</span>.log(e.pageY);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------&#x27;</span>);<br><br>            <span class="hljs-comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span><br>            <span class="hljs-built_in">console</span>.log(e.screenX);<br>            <span class="hljs-built_in">console</span>.log(e.screenY);<br><br>        &#125;)<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 常用的键盘事件</span><br>        <span class="hljs-comment">//1. keyup 按键弹起的时候触发 </span><br>        <span class="hljs-comment">// document.onkeyup = function() &#123;</span><br>        <span class="hljs-comment">//         console.log(&#x27;我弹起了&#x27;);</span><br><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我弹起了&#x27;</span>);<br>        &#125;)<br><br>        <span class="hljs-comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我按下了press&#x27;</span>);<br>            &#125;)<br>            <span class="hljs-comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我按下了down&#x27;</span>);<br>            &#125;)<br>            <span class="hljs-comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span><br></code></pre></td></tr></table></figure><p>###键盘事件对象</p><p>keyup和keydown事件不区分字母大小写 </p><p>keypress区分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span><br>        <span class="hljs-comment">// 1. 我们的keyup 和keydown事件不区分字母大小写  a 和 A 得到的都是65</span><br>        <span class="hljs-comment">// 2. 我们的keypress 事件 区分字母大小写  a  97 和 A 得到的是65</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(e);</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;up:&#x27;</span> + e.keyCode);<br>            <span class="hljs-comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span><br>            <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">65</span>) &#123;<br>                alert(<span class="hljs-string">&#x27;您按下的a键&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                alert(<span class="hljs-string">&#x27;您没有按下a键&#x27;</span>)<br>            &#125;<br><br>        &#125;)<br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(e);</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;press:&#x27;</span> + e.keyCode);<br><br>        &#125;)<br></code></pre></td></tr></table></figure><h3 id="案例-：快递单号查询"><a href="#案例-：快递单号查询" class="headerlink" title="案例 ：快递单号查询"></a>案例 ：快递单号查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;search&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;con&quot;</span>&gt;&lt;/div&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;请输入您的快递单号&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;jd&quot;</span>&gt;<br>    &lt;/div&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> con = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.con&#x27;</span>);<br>        <span class="hljs-keyword">var</span> jd_input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.jd&#x27;</span>);<br>        jd_input.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">//只能用`keyup`,不能用`keydown`和`keypress`，因为这两个在文本框里面的特点：他们两个事件触发的时候，文字还没有落入文本框中</span><br>            <span class="hljs-comment">//keyup事件因为是键盘弹起来才触发事件，文字以及落入文本框中</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                con.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                con.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>                con.innerText = <span class="hljs-built_in">this</span>.value;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECMAScript学习</title>
    <link href="/2021/01/01/ECMAScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/01/01/ECMAScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1、</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<span class="hljs-comment">//创建空数组</span><br><span class="hljs-comment">//利用数组自变量创建数组（更常用）</span><br><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-keyword">var</span> user_Name = [<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-string">&#x27;大黄&#x27;</span>, <span class="hljs-string">&#x27;瑞奇&#x27;</span>];<br><span class="hljs-keyword">var</span> arry1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;pink&#x27;</span> ,<span class="hljs-literal">true</span>];<span class="hljs-comment">//可以存储任何类型的数组元素</span><br></code></pre></td></tr></table></figure><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><h3 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h3><p>索引号从0开始</p><p>没有这个数组元素是，返回undefined</p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>用for循环；</p><p>数组名长度获取：<code>arr.length</code>,获取到的是元素的个数，而不是索引号的最后一位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 案例，将数组转换成字符串</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;pink&#x27;</span>];<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;arr.length; i++)<br>    &#123;<br>        str +=arr[i];<br>    &#125;<br><span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></table></figure><h2 id="新增数组"><a href="#新增数组" class="headerlink" title="新增数组"></a>新增数组</h2><p><code>arr.length = 5</code>可以直接修改数组长度，没给的值为<code>undefined</code></p><p>新增数组元素 修改索引号 追加数组元素，或替换原来的元素</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230120757636.png" alt="image-20201230120757636"></p><h3 id="例子：筛选数组"><a href="#例子：筛选数组" class="headerlink" title="例子：筛选数组"></a>例子：筛选数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 删选大于等于10的数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;arr.length;i++)&#123;<br>    <span class="hljs-keyword">if</span> (arr[i]&gt;=<span class="hljs-number">10</span>)&#123;<br>        newArr = newArr[newArr.length] = arr[i]; <span class="hljs-comment">//javasript数组特性，数组自动增长</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例子：实现冒泡排序"><a href="#例子：实现冒泡排序" class="headerlink" title="例子：实现冒泡排序"></a>例子：实现冒泡排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">50</span>, <span class="hljs-number">532</span>, <span class="hljs-number">7</span>, <span class="hljs-number">678</span>,<span class="hljs-number">532</span>,<span class="hljs-number">811545</span>,<span class="hljs-number">5412</span>,<span class="hljs-number">5</span>];<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span> ; j&lt;arr.length-<span class="hljs-number">1</span>; j++) &#123;<span class="hljs-comment">//外层循环次数</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>-j;  i++) &#123;<span class="hljs-comment">// 内层循环次数，注意循环次数</span><br>               <span class="hljs-keyword">if</span>(arr[i]&gt;arr[i+<span class="hljs-number">1</span>])<br>               &#123;<br>                   temp = arr[i];<br>                   arr[i] = arr[i+<span class="hljs-number">1</span>];<br>                   arr[i+<span class="hljs-number">1</span>] = temp;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><h1 id="JavaScript作用域"><a href="#JavaScript作用域" class="headerlink" title="JavaScript作用域"></a>JavaScript作用域</h1><p>提高程序的可靠性，减少命名冲突</p><h2 id="全局和局部作用域"><a href="#全局和局部作用域" class="headerlink" title="全局和局部作用域"></a>全局和局部作用域</h2><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><p>整个script标签或整个js文件</p><p>全局变量；特殊情况，如果一个变量在函数内部没有声明直接赋值也是全局变量</p><p>全局变量在浏览器关闭才会销毁，比较占内存</p><h3 id="局部（函数作用域）"><a href="#局部（函数作用域）" class="headerlink" title="局部（函数作用域）"></a>局部（函数作用域）</h3><p>在函数内部起作用</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>内部函数访问访问外部函数的变量采用的链式查找（就近原则）</p><h2 id="JavaScript预解析"><a href="#JavaScript预解析" class="headerlink" title="JavaScript预解析"></a>JavaScript预解析</h2><p>JavaScript先将代码进行预解析，然后再执行</p><p>预解析：预解析即时将所以var和function提升到当前作用域的最前面，然后从上到下执行</p><h3 id="变量预解析"><a href="#变量预解析" class="headerlink" title="变量预解析"></a>变量预解析</h3><p>把所有变量的<code>声明</code>提升到当前作用域的最前面，而不是将其赋值提升到。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//例如</span><br><span class="hljs-built_in">console</span>.log(num)<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//相当于</span><br><span class="hljs-keyword">var</span> num;<br><span class="hljs-built_in">console</span>.log(num);<br>num = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//所以代码输出的undefined</span><br></code></pre></td></tr></table></figure><h3 id="函数预解析"><a href="#函数预解析" class="headerlink" title="函数预解析"></a>函数预解析</h3><p>将函数声明提升到当前作用域最前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fun();<br><span class="hljs-keyword">var</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;22&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//报错，fun为undefined</span><br><span class="hljs-comment">//执行步骤为</span><br><span class="hljs-keyword">var</span> fun;<br>fun();<br>fun =<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;22&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//经典案例</span><br>f1();<br><span class="hljs-built_in">console</span>.log(c);<br><span class="hljs-built_in">console</span>.log(b);<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = b = c = <span class="hljs-number">9</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(c);<br>&#125;<br><span class="hljs-comment">//--这里就相当于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a ;<span class="hljs-comment">//而这里的a就相当于局部变量， 而b，c为全局变量</span><br>    b = c =<span class="hljs-number">9</span>;<br>    a = <span class="hljs-number">9</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(c);<br>&#125;<br>f1();<br><span class="hljs-built_in">console</span>.log(c);<br><span class="hljs-built_in">console</span>.log(b);<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-comment">/*所以打印结果为：9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">undefined</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="JavaScript面向对象"><a href="#JavaScript面向对象" class="headerlink" title="JavaScript面向对象"></a>JavaScript面向对象</h1><p>在JavaScript中，对象是一组无序的相关属性的方法和方法的集合，所有事物都是对象，例如字符串，数值，数组，函数等</p><p>JavaScript一切皆对象</p><p>例如保存一个人的完整信息</p><h2 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h2><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p><code>var obj=&#123;&#125;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    username:<span class="hljs-string">&#x27;张三丰&#x27;</span>,<br>    age:<span class="hljs-number">18</span>,<br>    sex:<span class="hljs-string">&#x27;man&#x27;</span>,<br>    <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hi&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用对象属性</span><br>方法<span class="hljs-number">1</span>：<span class="hljs-built_in">console</span>.log(obj.username);<br>方法<span class="hljs-number">2</span>：对象名[<span class="hljs-string">&#x27;属性名&#x27;</span>]<br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-string">&#x27;age&#x27;</span>]);<br><span class="hljs-comment">//调用对象方法</span><br>obj.sayHi();<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230143848150.png" alt="image-20201230143848150"></p><h3 id="new创建对象"><a href="#new创建对象" class="headerlink" title="new创建对象"></a>new创建对象</h3><p><code>var obj = new Object();</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>obj.uname = <span class="hljs-string">&#x27;张三丰&#x27;</span>;<br>obj.age = <span class="hljs-number">18</span>;<br>obj.sex = <span class="hljs-string">&#x27;man&#x27;</span>;<br>obj.sayHi()&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hi~&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><p>为什么要使用构造函数创建对象？</p><p>前两种方式只能一次创建一个对象</p><p>构造函数就是把我们对象里面一些相同的属性和方法抽象出来封装到函数里面                                                                                                                </p><p>例子：创建四大天王对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> 构造函数名(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.属性 = 值;<br>    <span class="hljs-built_in">this</span>.方法 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">new</span> 构造函数名();<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname,age,sex</span>)</span>&#123;   <span class="hljs-comment">//构造函数首字母需大写（规范）</span><br>    <span class="hljs-built_in">this</span>.name = uname;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>    <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sing_Name</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(sing_Name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;规范&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;男&#x27;</span>);<br>ldh.sing(<span class="hljs-string">&quot;冰雨&quot;</span>);<br> <span class="hljs-comment">//构造函数首字母需大写（规范）</span><br><span class="hljs-comment">//构造函数不需要return 就可以返回结果</span><br><span class="hljs-comment">//调用构造函数必须使用new</span><br><span class="hljs-comment">//我们只要new Star()就创建了一个对象</span><br><span class="hljs-comment">//属性和方法前面必须添加this</span><br></code></pre></td></tr></table></figure><h2 id="构造函数与对象的相互联系"><a href="#构造函数与对象的相互联系" class="headerlink" title="构造函数与对象的相互联系"></a>构造函数与对象的相互联系</h2><p>构造函数抽象了某些事物的公共部分，封装在函数里面，泛指某一大类  类似于C++中的类</p><p>对象：特指某一个具体事物，利用构造函数创建对象的方法也称为对象实例化</p><h2 id="new关键词在其中起的作用"><a href="#new关键词在其中起的作用" class="headerlink" title="new关键词在其中起的作用"></a>new关键词在其中起的作用</h2><p>1、new 构造函数可以在内存中创建一个空的对象，</p><p>2、this 就会指向刚才所创建的空的对象</p><p>3、执行够着函数里面的代码，给这个空对象添加属性和方法</p><p>4、返回这个对象</p><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><p>通过for in循环对对象进行遍历</p><p>for(变量 in 对象){</p><p>}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hero</span>(<span class="hljs-params">hero_Name,hero_Blood,hero_Attack</span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name = hero_Name;<br>            <span class="hljs-built_in">this</span>.blood = hero_Blood;<br>            <span class="hljs-built_in">this</span>.attack = hero_Attack;<br>            <span class="hljs-built_in">this</span>.sayWord = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">word</span>)</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(word);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> vn = <span class="hljs-keyword">new</span> Hero(<span class="hljs-string">&#x27;薇恩&#x27;</span>, <span class="hljs-number">900</span>,<span class="hljs-number">80</span>);<br>        <span class="hljs-keyword">var</span> Galen = <span class="hljs-keyword">new</span> Hero(<span class="hljs-string">&#x27;盖伦&#x27;</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">70</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> vn)&#123;  <br>            <span class="hljs-built_in">console</span>.log(k);<span class="hljs-comment">//得到属性名</span><br>            <span class="hljs-built_in">console</span>.log(vn[k]);<span class="hljs-comment">//得到属性值</span><br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="JavaScript内置对象"><a href="#JavaScript内置对象" class="headerlink" title="JavaScript内置对象"></a>JavaScript内置对象</h2><p>JavaScript中对象分为：自定义对象，内置对象，浏览器对象</p><p>内置对象最常用的有：Math、Data、Array、String</p><h3 id="查阅MDN文档"><a href="#查阅MDN文档" class="headerlink" title="查阅MDN文档"></a>查阅MDN文档</h3><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 利用对象封装自己的数学对象  里面有PI的最大值和最小值</span><br><span class="hljs-keyword">var</span> myMath = &#123;<br>    PI:<span class="hljs-number">3.141592653</span>,<br>    max:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> max = aruguments[<span class="hljs-number">0</span>];<span class="hljs-comment">//arguments数组表示函数的形参</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; aruguments.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(aruguments[i]&gt;max)<br>                max = <span class="hljs-built_in">arguments</span>[i];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="random-函数"><a href="#random-函数" class="headerlink" title="random())函数"></a>random())函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.random());<span class="hljs-comment">//获取0到1之间的随机浮点数</span><br><span class="hljs-comment">//得到一个两数之间的随机数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomArbitrary</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() * (max - min) + min;<br>&#125;<br><span class="hljs-comment">//得到一个两数之间的随机整数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomInt</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  min = <span class="hljs-built_in">Math</span>.ceil(min);<br>  max = <span class="hljs-built_in">Math</span>.floor(max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min)) + min; <span class="hljs-comment">//不含最大值，含最小值</span><br>&#125;<br><span class="hljs-comment">//得到一个两数之间的随机整数，包括两个数在内</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomIntInclusive</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  min = <span class="hljs-built_in">Math</span>.ceil(min);<br>  max = <span class="hljs-built_in">Math</span>.floor(max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min + <span class="hljs-number">1</span>)) + min; <span class="hljs-comment">//含最大值，含最小值 </span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p>Date()日期对象是一个构造函数 必须使用new来调用创建我们的日期对象</p><p><code>var date = new Date();</code></p><p>1、没有参数时，返回当前时间</p><p>2、参数的常用写法</p><p><code>var date = new Date(2019,10,1);</code></p><p><code>var date = new Date(&#39;2019-10-1 8:8:8&#39;);</code>2019年10月1日 08:08:08</p><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//返回当前年</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.log(date.getFullYear());<span class="hljs-comment">//返回当前时间年份</span><br><span class="hljs-built_in">console</span>.log(date.getMonth()+<span class="hljs-number">1</span>);<span class="hljs-comment">//比实际要少一个月</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230174936965.png" alt="image-20201230174936965"></p><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><h4 id="检测是否为数组的两种方式"><a href="#检测是否为数组的两种方式" class="headerlink" title="检测是否为数组的两种方式"></a>检测是否为数组的两种方式</h4><p><code>arr instanceof Array;</code></p><p><code>Arr.isArray(arr);</code></p><h4 id="添加数组元素"><a href="#添加数组元素" class="headerlink" title="添加数组元素"></a>添加数组元素</h4><p>1、push()方法，在数组的末尾添加一个或多个数组元素</p><p>push完毕后，返回的结果时数组的长度</p><p>2、unshift(),在数组的最前面的添加元素</p><h4 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h4><p>1、pop()方法 可以删除数组的最后一个元素</p><p>一次只能删除一个元素</p><p>返回的时删除的那个元素</p><p>2、shift()方法 可以删除数组的第一个元素</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230184102813.png" alt="image-20201230184102813"></p><h4 id="数组翻转和排序"><a href="#数组翻转和排序" class="headerlink" title="数组翻转和排序"></a>数组翻转和排序</h4><p>1、数组反转</p><p><code>array.reverse();</code></p><p>2、数组排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">77</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123; <span class="hljs-comment">//要用sort实现排序 必须这样写，否则有问题</span><br>    <span class="hljs-keyword">return</span> a-b;<span class="hljs-comment">//按照升序排序</span><br>&#125;)<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">77</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123; <span class="hljs-comment">//要用sort实现排序 必须这样写，否则有问题</span><br>    <span class="hljs-keyword">return</span> a-b;<span class="hljs-comment">//按照降序排序</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="数组索引-1"><a href="#数组索引-1" class="headerlink" title="数组索引"></a>数组索引</h4><p>1、<code>arr.indexOf(&#39;blue&#39;)</code> 返回该数组元素第一个匹配的数组索引号，没找到则返回-1</p><p>2、<code>arr.lastIndexOf(&#39;blue&#39;)</code> 返回该数组元素最后一个匹配的数组索引号，没找到则返回-1</p><p>案例：数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>];<br>       <span class="hljs-keyword">var</span> arr1 = [];<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>           <span class="hljs-keyword">if</span> (arr1.indexOf(arr[i]) == -<span class="hljs-number">1</span>) &#123;<br>               arr1.push(arr[i]);<br>           &#125;<br>       &#125;<br>       <span class="hljs-built_in">console</span>.log(arr1);<br></code></pre></td></tr></table></figure><h4 id="数组转换成字符串"><a href="#数组转换成字符串" class="headerlink" title="数组转换成字符串"></a>数组转换成字符串</h4><p><code>arr.toString();</code> 将数组转化成字符串</p><p><code>arr1.join(&#39;-&#39;);</code>可以用指定符号进行分割</p><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p><code>var str = &#39;andy&#39;;</code>简单数据类型为什么会有属性和方法？？？</p><p>所用的就是基本包装类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//把简单类型包装成复杂数据类型</span><br><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;andy&#x27;</span>);<br><span class="hljs-comment">//把临时变量的值赋给str</span><br>str = temp;<br><span class="hljs-comment">//销毁这个临时变量</span><br>temp = <span class="hljs-literal">null</span>;<br><br></code></pre></td></tr></table></figure><p>字符串三种基本包装类型<code>String</code>,<code>Number</code>和<code>Bollean</code></p><p>字符串的不可变性，比如每次字符串拼接都是要占用新的一块地址空间，只是地址变了，原来只还是存在的</p><p>字符串所有的方法 都不会修改字符串本身所有操作都是返回新的字符串</p><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><p><code>str.indexOf();</code></p><p><code>str.lastIndexOf</code></p><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230195951927.png" alt="image-20201230195951927"></p><h4 id="拼接-截取字符串"><a href="#拼接-截取字符串" class="headerlink" title="拼接 截取字符串"></a>拼接 截取字符串</h4><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230201018644.png" alt="image-20201230201018644"></p><h4 id="替换以及转换字符串"><a href="#替换以及转换字符串" class="headerlink" title="替换以及转换字符串"></a>替换以及转换字符串</h4><p><code>replace(&#39;被替换字符&#39;,&#39;替换为的字符&#39;)</code></p><h1 id="js简单数据类型和复杂数据类型"><a href="#js简单数据类型和复杂数据类型" class="headerlink" title="js简单数据类型和复杂数据类型"></a>js简单数据类型和复杂数据类型</h1><p>简单数据类型又叫做值类型，复杂数据类型叫做引用类型</p><p>例如<code>string</code>、<code>number、</code>boolean<code>、undefinded、·null</code></p><p>简单数据类型：在存储中存储的是数据本身</p><p>特殊情况：null返回的是一个空的对象，当有个变量要存储变量，但没想好要存啥，先可以赋个<code>null</code></p><p>简单数据类型存储在栈里面</p><p>复杂数据类型，用<code>new</code>关键字声明的变量</p><p>堆里面存储的是复杂数据类型的地址，而数据是存储在堆里面的，这个地址指向堆里面的数据</p><p>复杂数据类型传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(x.name);<span class="hljs-comment">//刘德华</span><br>    x.name = <span class="hljs-string">&quot;张学友&quot;</span>;  <br>    <span class="hljs-built_in">console</span>.log(x.name);<span class="hljs-comment">//张学友</span><br>&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;刘德华&quot;</span>);<br><span class="hljs-built_in">console</span>.log(p.name);<span class="hljs-comment">//刘德华</span><br>f1(p);<span class="hljs-comment">// 执行f1()这个函数，改变了原来这个对象中的内容 ，要与简单数据传参相区别</span><br><span class="hljs-built_in">console</span>.log(p.name);<span class="hljs-comment">//张学友</span><br></code></pre></td></tr></table></figure><p>函数的形参可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给形参，形参和实参保存的是同一个堆地址，所以操作的是同一个对象</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础ECMA语法篇(2)</title>
    <link href="/2020/12/30/2/"/>
    <url>/2020/12/30/2/</url>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-语法2"><a href="#ECMAScript-语法2" class="headerlink" title="ECMAScript 语法2"></a>ECMAScript 语法2</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><h3 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h3><ul><li>操作符是一个对象，返回<code>false</code> </li><li>操作符是一个空字符串，返回 <code>true</code></li><li>操作符是非空字符串，返回<code>false</code></li><li>操作符是数值0，返回<code>true</code></li><li>操作符是任意非0的数值，返回<code>false</code></li><li>操作数是<code>null</code>，返回<code>true</code></li><li>操作数是<code>NaN</code>，返回<code>true</code>； </li><li>操作数是<code>undefined</code>，返回<code>true</code></li></ul><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h3><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><h3 id="求模"><a href="#求模" class="headerlink" title="求模"></a>求模</h3><h3 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h3><ul><li>如果两个操作数都是字符串，则将第二个操作数与第一个操作数拼接起来；</li><li>如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接起来</li></ul><h3 id="减法运算符"><a href="#减法运算符" class="headerlink" title="减法运算符"></a>减法运算符</h3><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><h3 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h3><p>​    相等和不相等——先转换再比较；</p><p>​    全等和不全等——仅比较而不转换</p><p>除了在比较之前不转换操作数之外，全等和不全等操作符与相等和不相等操作符没有什么区别。全等操作符由3个等于号（===）表示，它只在两个操作数未经转换就相等的情况下返回true，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reslut1 = (<span class="hljs-string">&quot;55&quot;</span> == <span class="hljs-number">55</span>); <span class="hljs-comment">//true 转换后相等</span><br><span class="hljs-keyword">var</span> reslut2 = (<span class="hljs-string">&quot;55&quot;</span> ===<span class="hljs-number">55</span>); <span class="hljs-comment">//false ,不同类型值不想等</span><br></code></pre></td></tr></table></figure><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p><code>variable = boolean_expression?true_value:false_value</code>;</p><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p><code>var num1 =1, num2 =2 ,num3 = 3</code></p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p><code>while</code>,<code>do while</code>, <code>for</code>这些都大概相同</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>比较不同的就是<code>for in</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (property <span class="hljs-keyword">in</span> expression) startment<br><span class="hljs-comment">//例如</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> propname <span class="hljs-keyword">in</span> <span class="hljs-built_in">window</span>)&#123;<br>    <span class="hljs-built_in">document</span>.write(propname);<br>&#125;<br><span class="hljs-comment">//我们使用for-in循环来显示了BOM中window对象的所有属性。每次执行循环时，都会将window对象中存在的一个属性名赋值给变量propName。这个过程会一直持续到对象中的所有属性都被枚举一遍为止。与for语句类似，这里控制语句中的var操作符也不是必需的</span><br></code></pre></td></tr></table></figure><h3 id="label语句"><a href="#label语句" class="headerlink" title="label语句"></a>label语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">start:<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;count; i++)&#123;<br>    alert(i);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//例如函数本身定义时参数只有一个，而我们可以在调用是有多个参数</span><br><span class="hljs-comment">//本身函数有多个参数，但调用时可以只有一个参数，没传递参数赋值为undefined</span><br><span class="hljs-comment">//默认参数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">power</span>(<span class="hljs-params">base, exponent = <span class="hljs-number">2</span></span>)</span>&#123;<br>    ....<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(power(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><p><code>return</code>后面没有表达式将返回<code>undinfine</code>,没有<code>retuen</code>语句也返回<code>undefined</code></p><h3 id="理解参数"><a href="#理解参数" class="headerlink" title="理解参数"></a>理解参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//通过访问argument对象的length属性可以获知有多少个参数传给了函数，如下面事例</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">howManyArgs</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-built_in">arguments</span>.length);<br>&#125;<br>howManArgs(<span class="hljs-string">&quot;string&quot;</span>,<span class="hljs-number">45</span>);<span class="hljs-comment">//2</span><br>howManyArgs(<span class="hljs-string">&quot;4&quot;</span>);<span class="hljs-comment">//0</span><br>howManyArgs(<span class="hljs-number">12</span>);<span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><h3 id="Javascript函数没有重载"><a href="#Javascript函数没有重载" class="headerlink" title="Javascript函数没有重载"></a>Javascript函数没有重载</h3><h2 id="基本类型与引用类型的值"><a href="#基本类型与引用类型的值" class="headerlink" title="基本类型与引用类型的值"></a>基本类型与引用类型的值</h2><p>ECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。</p><p>在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。第3章讨论了5种基本数据类型：Undefined、Null、Boolean、Number和String。这5种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。</p><p>引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的。</p><p>对于引用类型的值，我们可以为其添加属性和方法，也可以改变和删除其属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>person.name = <span class="hljs-string">&quot;Niki&quot;</span>;<br>alert(person.name);<br><span class="hljs-comment">/*以上代码创建了一个对象并将其保存在了变量person中。然后，我们为该对象添加了一个名为name的属性，并将字符串值&quot;Nicholas&quot;赋给了这个属性。</span><br><span class="hljs-comment">如果对象不被销毁或者这个属性不被删除，则这个属性将一直存在。*/</span><br><br><br><span class="hljs-comment">//然而，我们不能给基本类型的值添加属性</span><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Niko&quot;</span>;<br>name.age = <span class="hljs-number">27</span>;<br>alert(name.age); <span class="hljs-comment">//undefine</span><br></code></pre></td></tr></table></figure><h2 id="复制变量值（按值和按引用）"><a href="#复制变量值（按值和按引用）" class="headerlink" title="复制变量值（按值和按引用）"></a>复制变量值（按值和按引用）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> num2 = name1;<br><span class="hljs-comment">//只是用num2初始化num1,以后这两个变量相互独立</span><br><br></code></pre></td></tr></table></figure><p>然而当一个变量复制引用类型的值时，同样也会将存储在变量对象的值复制一份到为新变量分配的空间中。不同的是，这个值复制一份放到为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另一个变量，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-keyword">var</span> obj2 = obj1;<br>obj1.name = <span class="hljs-string">&quot;Niko&quot;</span>;<br>alert(obj2.name); <span class="hljs-comment">//Niko </span><br><span class="hljs-comment">//obj1与obj2指向同一个对象</span><br></code></pre></td></tr></table></figure><h2 id="参数传递-所有的参数都是按值传递的"><a href="#参数传递-所有的参数都是按值传递的" class="headerlink" title="参数传递(所有的参数都是按值传递的)"></a>参数传递(所有的参数都是按值传递的)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTen</span>(<span class="hljs-params">num</span>)</span>&#123;<br>    num += <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">const</span> = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> result = addTen(count);<br>alert(<span class="hljs-keyword">const</span>) <span class="hljs-comment">//20 值不改变</span><br>alert(reslut) <span class="hljs-comment">//值为30 </span><br><span class="hljs-comment">//ECMAScript中所有函数的参数都是按值传递的。也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样</span><br></code></pre></td></tr></table></figure><h2 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof操作符是确定一个变量是字符串、数值、布尔值，还是undefined的最佳工具。如果变量的值是一个对象或null，则typeof操作符会像下面例子中所示的那样返回”object”</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>如果变量是给定引用类型（根据它的原型链来识别；第6章将介绍原型链）的实例，那么instanceof操作符就会返回true。请看下面的例子：</p><h2 id="执行环境和作用域"><a href="#执行环境和作用域" class="headerlink" title="执行环境和作用域"></a>执行环境和作用域</h2><p>每个执行环境都有一个与之相关联的对象，环境中定义的所以变量和函数都保存在这个对象中</p><h3 id="全局执行环境"><a href="#全局执行环境" class="headerlink" title="全局执行环境"></a>全局执行环境</h3><p>全局执行环境是最外围的一个执行环境。根据ECMAScript实现所在的宿主环境不同，表示执行环境的对象也不一样。在Web浏览器中，全局执行环境被认为是window对象（第7章将详细讨论），因此所有全局变量和函数都是作为window对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出——例如关闭网页或浏览器——时才会被销毁）。</p><p>请看下例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> color = <span class="hljs-string">&quot;blue&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeColor</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> anotherColor = <span class="hljs-string">&quot;red&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swapColor</span></span>&#123;<br>        <span class="hljs-keyword">var</span> tempColor = anotherColor;<br>        anotherColor = color;<br>        color = tempColor;<br>        <span class="hljs-comment">//可以访问到color,anotherColor和tempColor</span><br>    &#125;<br>    <span class="hljs-comment">// 可以访问color和anotherColor</span><br>&#125;<br><span class="hljs-comment">// 这里只能访问到color</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h2><ul><li>try-catch的catch块</li><li>with语句</li></ul><p>待补充。。。</p><h2 id="没有块级作用域"><a href="#没有块级作用域" class="headerlink" title="没有块级作用域"></a>没有块级作用域</h2><p>–es6 新增了let块级作用域</p><h3 id="绑定和作用域"><a href="#绑定和作用域" class="headerlink" title="绑定和作用域"></a>绑定和作用域</h3><ul><li>在整个函数或块之外定义的绑定，作用域是整个程序，意味着你在任何地方都可以使用此绑定，这称为全局<code>绑定</code></li><li>在函数参数创建的绑定或在函数内声明的绑定只能在函数内引用，这称为<code>局部绑定</code></li><li><code>let</code>和<code>const</code>声明他们的块中局部可见，即时在一个该{ }局部可见，而<code>关键字</code>创建的是旧式绑定没有这个概念</li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>可以按照你的预想工作–仍然可以访问绑定的两个实例，这种能够引用封装作用域中的局部变量的特定实例的功能叫做闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wrapValue</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> locol = n;<br>    <span class="hljs-keyword">return</span><span class="hljs-function">() =&gt;</span> locol;<br>&#125;<br><span class="hljs-keyword">let</span> wrap1 = wrapValue(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">let</span> wrap2 = wrapValue(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(wrap1());<br><span class="hljs-comment">//-&gt; 1</span><br><span class="hljs-built_in">console</span>.log(wrap2());<br><span class="hljs-comment">//-&gt; 2 </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础ECMA语法篇(1)</title>
    <link href="/2020/12/29/1/"/>
    <url>/2020/12/29/1/</url>
    
    <content type="html"><![CDATA[<h1 id="ECMAJavaScript语法1"><a href="#ECMAJavaScript语法1" class="headerlink" title="ECMAJavaScript语法1"></a>ECMAJavaScript语法1</h1><h2 id="1、区分大小写"><a href="#1、区分大小写" class="headerlink" title="1、区分大小写"></a>1、区分大小写</h2><h2 id="2、标识符（即变量、函数属性的名字，函数的参数等）"><a href="#2、标识符（即变量、函数属性的名字，函数的参数等）" class="headerlink" title="2、标识符（即变量、函数属性的名字，函数的参数等）"></a>2、标识符（即变量、函数属性的名字，函数的参数等）</h2><p>—-第一个字符是是字母，下划线或$，其他字符可以是字母，下划线，美元符号或数字</p><p>命名最好使用驼峰式</p><blockquote><p>例如firstSecond、myCar、doSomethingImportant</p></blockquote><h2 id="3、注释和C一样"><a href="#3、注释和C一样" class="headerlink" title="3、注释和C一样"></a>3、注释和C一样</h2><h2 id="4、语句"><a href="#4、语句" class="headerlink" title="4、语句"></a>4、语句</h2><p>ECMAJavaScript中的语句以一个分号结尾；如果省略分号，则由解析器确定语句的结尾，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sun = a+b  <span class="hljs-comment">//可以没有分号，但推荐最好使用分号</span><br><br></code></pre></td></tr></table></figure><h2 id="4、变量"><a href="#4、变量" class="headerlink" title="4、变量"></a>4、变量</h2><p>变量为松散类型，即可以保存任意类型的变量如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> message;<br><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>;<br><span class="hljs-comment">//还可以直接赋值更改变量类型，如：</span><br>message = <span class="hljs-number">100</span>;  <span class="hljs-comment">//可以这样用，但不推荐</span><br><br></code></pre></td></tr></table></figure><p>但是，var所定义的是局部变量，只能在函数体内部才能使用如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>;<br>&#125;<br>test();<br>alert(message); <span class="hljs-comment">//错误，提示message未定义</span><br></code></pre></td></tr></table></figure><p>但是如果省略var操作符，定义的就是全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    message = <span class="hljs-string">&quot;hi&quot;</span>;<br>&#125;<br>test();<br>alert(message); <span class="hljs-comment">//正确，提示message未定义</span><br></code></pre></td></tr></table></figure><p>使用一条语句定义多个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>,<br>    found = <span class="hljs-literal">false</span>,<br>    age = <span class="hljs-number">29</span>;<br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><code>Undefined</code> 表示变量只声明了，没有定义，或者都没声明的变量</p><p><code>Null</code>,  </p><p><code>Boolean</code>,</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201228124142675.png" alt="image-20201228124142675"></p><p>其他类型的变量可以调用Boolean进行类型转换，转化规则如上表所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 运行这里的代码会报警告</span><br><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-keyword">if</span> (message)&#123;  <span class="hljs-comment">//这里的message被转换成boolean类型</span><br>        alert(<span class="hljs-string">&quot;value is true&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>Number</code>,</p><p>浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数。例如，0.1加0.2的结果不是0.3，而是0.30000000000000004。这个小小的舍入误差会导致无法测试特定的浮点数值。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(a+b==<span class="hljs-number">0.3</span>)&#123;<br>    alert(<span class="hljs-string">&quot;结果是0.3！&quot;</span>);  <span class="hljs-comment">//其实并得不到0.3</span><br>&#125;<br><span class="hljs-comment">//在这个例子中，我们测试的是两个数的和是不是等于0.3。如果这两个数是0.05和0.25，或者是0.15和0.15都不会有问题。而如前所述，如果这两个数是0.1和0.2，那么测试将无法通过。因此，永远不要测试某个特定的浮点数值。关于浮点数值计算会产生舍入误差的问题，有一点需要明确：这是使用基于IEEE754数值的浮点计算的通病，ECMAScript并非独此一家；其他使用相同数值格式的语言也存在这个问题。</span><br></code></pre></td></tr></table></figure><p>NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）。例如，在其他编程语言中，任何数值除以非数值都会导致错误，从而停止代码执行。但在ECMAScript中，任何数值除以非数值会返回NaN，因此不会影响其他代码的执行。</p><p>针对NaN的这两个特点，ECMAScript定义了isNaN()函数。这个函数接受一个参数，该参数可以是任何类型，而函数会帮我们确定这个参数是否“不是数值”。isNaN()在接收到一个值之后，会尝试将这个值转换为数值。某些不是数值的值会直接转换为数值，例如字符串”10”或Boolean值。而任何不能被转换为数值的值都会导致这个函数返回true。</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201228125525947.png" alt="image-20201228125525947"></p><h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><p>有3个函数可以把非数值转换为数值：Number()、parseInt()和parseFloat()。第一个函数，即转型函数Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。</p><ul><li><ul><li><pre><code>Number()`函数的转换规则- 如果是`Boolean`值，`true`和`false`将分别被转换为1和0。- 如果是`null`值，返回0。- 如果是`undefined`，返回`NaN`。- 如果是对象，则调用对象的`valueOf()`方法，然后依照前面的规则转换返回的值。如果转换的结果是`NaN`，则调用对象的`toString()`方法，然后再次依照前面的规则转换返回的字符串值- 如果是字符串，遵循下列规则：   - 如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即&quot;1&quot;会变成1, &quot;123&quot;会变成123，而&quot;011&quot;会变成11（注意：前导的零被忽略了）；  - 如果字符串中包含有效的浮点格式，如&quot;1.1&quot;，则将其转换为对应的浮点数值（同样，也会忽略前导零）；  - 如果字符串中包含有效的十六进制格式，例如&quot;0xf&quot;，则将其转换为相同大小的十进制整数值；  - 如果字符串是空的（不包含任何字符），则将其转换为0；  - 如果字符串中包含除上述格式之外的字符，则将其转换为NaN。<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>    <br><br>`parseInt()`函数的转换规则<br><br>使用`parseInt()`函数时，更多看其是否符合数值模式。忽略字符串前的空格，知道找到第一个非空格字符。如果第一个字符不是数字字符或者负号，`parseInt()`就会返回NaN；也就是说，用`parseInt()`转换空字符串会返回`NaN`（Number()对空字符返回<span class="hljs-number">0</span>）<br><br>如果第一个字符是数字字符，`parseInt()`会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。例如，`&quot;<span class="hljs-number">1234</span>blue<span class="hljs-string">&quot;`会被转换为`1234`，因为&quot;</span>blue<span class="hljs-string">&quot;会被完全忽略。类似地，`&quot;22.5&quot;</span>`会被转换为`22`，因为小数点并不是有效的数字字符。<br><br>`String`<br><br>`ECMAScript`中的字符串是`不可变`的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量<br><br>`Object`(对象)<br><br>ECMAScript中的对象其实就是一组数据和功能的集合。对象可以通过执行<span class="hljs-keyword">new</span>操作符后跟要创建的对象类型的名称来创建。而创建Object类型的实例并为其添加属性和（或）方法，就可以创建自定义对象，如下所示：<br><br>`var o = <span class="hljs-keyword">new</span> Object`<br><br>- ```<br>  Object的每个实例都具有下列属性和方法。<br>  <br>  - `constructor`：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是`Object()`<br>  - `hasOwnProperty(propertyName)`：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名`（propertyName）`必须以字符串形式指定（例如：`o.hasOwnProperty(<span class="hljs-string">&quot;name&quot;</span>)`。<br>  - `isPrototypeOf(object)：`用于检查传入的对象是否是当前对象的原型<br>  - `propertyIsEnumerable(propertyName)：`用于检查给定的属性是否能够使用for-in语句（本章后面将会讨论）来枚举。与`hasOwnProperty()`方法一样，作为参数的属性名必须以字符串形式指定。<br>  toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。❏ toString()：返回对象的字符串表示。❏ valueOf()：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
