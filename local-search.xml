<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringCloud服务网关</title>
    <link href="/2021/08/15/%E5%88%86%E5%B8%83%E5%BC%8F-springcloud05/"/>
    <url>/2021/08/15/%E5%88%86%E5%B8%83%E5%BC%8F-springcloud05/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/54b61d819aa1630bc61732de340b55b4.png" alt="img"></p><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和Project Reactor等技术。</p><p>Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如:熔断、限流、重试等。</p><p>SpringCloud Gateway是Spring Cloud的一个全新项目，基于Spring 5.0+Spring Boot 2.0和Project Reactor等技术开发的网关，它旨在为微服务架构提供—种简单有效的统一的API路由管理方式。</p><p>SpringCloud Gateway作为Spring Cloud 生态系统中的网关，目标是替代Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p><p>Spring Cloud Gateway的目标提供统一的路由方式且基于 Filter链的方式提供了网关基本的功能，例如:安全，监控/指标，和限流。</p><p>作用</p><ul><li>反向代理</li><li>鉴权</li><li>流量控制</li><li>熔断</li><li>日志监控</li><li>。。。</li></ul><p>微服务架构中网关的位置</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/5877d4b9035ead9cd2d037609dceb442.png" alt="img"></p><p>GateWay的特性</p><ul><li>基于SpringFramework5、ProjectReactor和SpringBoot2.0构建</li><li>能够在任何请求属性上匹配路由。</li><li>谓词和筛选器特定于路由。</li><li>集成Hystrix断路器。</li><li>集成SpringCloud的发现客户端</li><li>易于编写谓词和筛选器</li><li>请求速率限制</li><li>路径重写</li></ul><p>内部架构图</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210814163521281.png" alt="image-20210814163521281"></p><h3 id="三大核心概念"><a href="#三大核心概念" class="headerlink" title="三大核心概念"></a>三大核心概念</h3><p>路由</p><p>路由是构建网关的基本模块，它由ID，目标URI、一系列的断言和过滤器组成，如果断言为true则匹配该路由</p><p>断言</p><p>开发人员可以匹配HTTP请求中的所有内容，如果请求与断言相匹配则进行路由</p><p>过滤</p><p>指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改</p><p>核心：路由转发+执行过滤链</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>新建一个网关模块cloud-gateway-9527</p><p>引入pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GateWayMain9527</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(GateWayMain9527.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置方式1-通过yml进行配置"><a href="#配置方式1-通过yml进行配置" class="headerlink" title="配置方式1-通过yml进行配置"></a>配置方式1-通过yml进行配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9527</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh</span>     <span class="hljs-comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8001</span>          <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>          <span class="hljs-comment">#uri: lb://cloud-payment-service #匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/get/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh2</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8001</span>          <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>          <span class="hljs-comment">#uri: lb://cloud-payment-service #匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/lb/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">cloud-gateway-service</span><br>  <span class="hljs-attr">client:</span> <span class="hljs-comment">#服务提供者provider注册进eureka服务列表内</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka</span><br><br></code></pre></td></tr></table></figure><h3 id="配置方式2-通过config注册到bean中配置"><a href="#配置方式2-通过config注册到bean中配置" class="headerlink" title="配置方式2-通过config注册到bean中配置"></a>配置方式2-通过config注册到bean中配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GateWayConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RouteLocator <span class="hljs-title">customRouterLocator</span><span class="hljs-params">(RouteLocatorBuilder routeLocatorBuilder)</span> </span>&#123;<br>        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();<br>        routes.route(<span class="hljs-string">&quot;payment_route&quot;</span>, r -&gt; r.path(<span class="hljs-string">&quot;/guonei&quot;</span>).uri(<span class="hljs-string">&quot;http://news.baidu.com/guonei&quot;</span>)).build();<br>        <span class="hljs-keyword">return</span> routes.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置动态路由"><a href="#配置动态路由" class="headerlink" title="配置动态路由"></a>配置动态路由</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh</span>     <span class="hljs-comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>          <span class="hljs-comment"># uri: http://localhost:8001          #匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/get/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh2</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>          <span class="hljs-comment"># uri: http://localhost:8001          #匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/lb/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br></code></pre></td></tr></table></figure><p>这里通过微服务名代替地址</p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>路由匹配也是一种断言</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">predicates:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/lb/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br></code></pre></td></tr></table></figure><h3 id="The-After-Route-Predicate-Factory"><a href="#The-After-Route-Predicate-Factory" class="headerlink" title="The After Route Predicate Factory"></a>The After Route Predicate Factory</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">after_route</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-comment"># 这个时间后才能起效</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span><br><br></code></pre></td></tr></table></figure><p>即设置该路由需要在指定时间后才能生效</p><h3 id="The-Cookie-Route-Predicate-Factory"><a href="#The-Cookie-Route-Predicate-Factory" class="headerlink" title="The  Cookie Route Predicate Factory"></a>The  Cookie Route Predicate Factory</h3><p>指定请求需要携带的cookie</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">cookie_route</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Cookie=chocolate,</span> <span class="hljs-string">ch.p</span><br><br></code></pre></td></tr></table></figure><h3 id="The-Header-Route-Predicate-Factory"><a href="#The-Header-Route-Predicate-Factory" class="headerlink" title="The Header Route Predicate Factory"></a>The Header Route Predicate Factory</h3><p>指定需要携带的请求头</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:  cloud:    gateway:      routes:      - id: header_route        uri: https://example.org        predicates:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">Header=X-Request-Id,</span> <span class="hljs-string">\d+</span><br></code></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>可以在请求被路由前或后对请求进行处理</p><p>这里GateWay提供的过滤器很多，这里不再介绍，主要是要清除如何配自定义过滤器</p><p>全局日志记录 统一网关鉴权</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@Slf4jpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLogGateWayFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;        log.info(<span class="hljs-string">&quot;来到自定义全局过滤器&quot;</span> + <span class="hljs-keyword">new</span> Date());        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="hljs-string">&quot;uname&quot;</span>);        <span class="hljs-keyword">if</span> (uname == <span class="hljs-keyword">null</span>) &#123;            log.info(<span class="hljs-string">&quot;用户名为null,非法用户&quot;</span>);            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);            <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();        &#125;        <span class="hljs-keyword">return</span> chain.filter(exchange);    &#125;    <span class="hljs-comment">// 该过滤器器的等级    @Override    public int getOrder() &#123;        return 0;    &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这样在请求时，必须要带上请求参数uname，否则就不进行路由</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud服务熔断、服务降级</title>
    <link href="/2021/08/14/%E5%88%86%E5%B8%83%E5%BC%8F-springcloud04/"/>
    <url>/2021/08/14/%E5%88%86%E5%B8%83%E5%BC%8F-springcloud04/</url>
    
    <content type="html"><![CDATA[<h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>分布式系统面临的问题：复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</p><h3 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h3><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”.<br>对于高流量的应用来说，单一的后避依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p><p>所以，通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用断路器：</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝)，向调用方返回一个符合预期的、可处理的备选响应（<code>FallBack</code>)，而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><blockquote><p>Hystrix是一个用于处理分布式系统的<strong>延迟</strong>和<strong>容错</strong>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</strong>。</p></blockquote><h2 id="几个重要的概念"><a href="#几个重要的概念" class="headerlink" title="几个重要的概念"></a>几个重要的概念</h2><h3 id="服务降级-fallback"><a href="#服务降级-fallback" class="headerlink" title="服务降级(fallback)"></a>服务降级(<code>fallback</code>)</h3><p>对方系统不可用了，需要提供一个备选的响应</p><p>例如：服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback</p><p>哪些情况会出现降级</p><ul><li>程序运行导常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满也会导致服务降级</li></ul><h3 id="服务熔断-break"><a href="#服务熔断-break" class="headerlink" title="服务熔断(break)"></a>服务熔断(<code>break</code>)</h3><p><strong>类比保险丝</strong>达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示。</p><p>服务的降级 -&gt; 进而熔断 -&gt; 恢复调用链路</p><h3 id="服务限流-flowlimit"><a href="#服务限流-flowlimit" class="headerlink" title="服务限流(flowlimit)"></a>服务限流(<code>flowlimit</code>)</h3><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行。</p><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><p>1.新建cloud-provider-hygtrix-payment8001</p><p>2.POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--hystrix--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--eureka client--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要引入hystrix</p><p>3.YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-provider-hystrix-payment</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment">#defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka</span><br><br></code></pre></td></tr></table></figure><p>4、入口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentHystrixMain8001</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>            SpringApplication.run(PaymentHystrixMain8001.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_OK</span><span class="hljs-params">(Integer id)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程池:  &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;  paymentInfo_OK,id:  &quot;</span>+id+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;O(∩_∩)O哈哈~&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_TimeOut</span><span class="hljs-params">(Integer id)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123; TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">3000</span>); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程池:  &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot; id:  &quot;</span>+id+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;O(∩_∩)O哈哈~&quot;</span>+<span class="hljs-string">&quot;  耗时(秒): 3&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6、controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentService paymentService;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_OK</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span><br><span class="hljs-function">    </span>&#123;<br>        String result = paymentService.paymentInfo_OK(id);<br>        log.info(<span class="hljs-string">&quot;*****result: &quot;</span>+result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_TimeOut</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span><br><span class="hljs-function">    </span>&#123;<br>        String result = paymentService.paymentInfo_TimeOut(id);<br>        log.info(<span class="hljs-string">&quot;*****result: &quot;</span>+result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个接口都可以正常访问，包括延迟3s中的</p><h3 id="引入高并发"><a href="#引入高并发" class="headerlink" title="引入高并发"></a>引入高并发</h3><p>这里我们通过Jmeter进行20000次的压力测试，此时客户端80也对8001进行访问，发现请求一直处理加载状态，卡死</p><h3 id="服务降级支付侧fallback"><a href="#服务降级支付侧fallback" class="headerlink" title="服务降级支付侧fallback"></a>服务降级支付侧fallback</h3><p>设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处埋，作服务降级fallback。</p><p>1、定义方法并在fallback中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentService</span></span>&#123;<br><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;/*指定善后方法名*/,commandProperties = &#123;</span><br><span class="hljs-meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;3000&quot;)</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_TimeOut</span><span class="hljs-params">(Integer id)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//int age = 10/0;</span><br>        <span class="hljs-keyword">try</span> &#123; TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">5000</span>); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程池:  &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot; id:  &quot;</span>+id+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;O(∩_∩)O哈哈~&quot;</span>+<span class="hljs-string">&quot;  耗时(秒): &quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//用来善后的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_TimeOutHandler</span><span class="hljs-params">(Integer id)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程池:  &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;  8001系统繁忙或者运行报错，请稍后再试,id:  &quot;</span>+id+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;o(╥﹏╥)o&quot;</span>;<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>主启动类激活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableCircuitBreaker</span><span class="hljs-comment">//添加到此处</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentHystrixMain8001</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>            SpringApplication.run(PaymentHystrixMain8001.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="全局fallback"><a href="#全局fallback" class="headerlink" title="全局fallback"></a>全局fallback</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentService</span> </span>&#123;<br>    <span class="hljs-meta">@HystrixCommand</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_OK</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程池:  &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;  paymentInfo_OK,id:  &quot;</span> + id + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;O(∩_∩)O哈哈~&quot;</span>;<br>    &#125;<br><br>  <br>    <span class="hljs-comment">// 下面是全局fallback方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">payment_Global_FallbackMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Global异常处理信息，请稍后再试，/(ㄒoㄒ)/~~&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置默认的服务降级</p><p>在类名上加入<code>@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</code></p><p>在方法名上加入 <code>@HystrixCommand</code></p><p>这样只要执行的方法出错，就会走默认的全局的服务降级(该方法没指定降级方法时)</p><h3 id="通配服务降级FeignFallback"><a href="#通配服务降级FeignFallback" class="headerlink" title="通配服务降级FeignFallback"></a>通配服务降级<code>FeignFallback</code></h3><p>根据<code>cloud-consumer-feign-hystrix-order80</code>已经有的<code>PaymentHystrixService</code>接口，<br>重新新建一个类实现该接口，统一为接口里面的方法进行异常处理</p><p>通过<code>FeignClient</code>这个注解指定<code>PaymentFallbackServic</code>为每个方法执行错误降级的Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot; ,//</span><br><span class="hljs-meta">             fallback = PaymentFallbackService.class)</span><span class="hljs-comment">//指定PaymentFallbackService类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PaymentHystrixService</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_OK</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_TimeOut</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>PaymentFallbackService</code>类实现<code>PaymentHystrixService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentFallbackService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PaymentHystrixService</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_OK</span><span class="hljs-params">(Integer id)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;-----PaymentFallbackService fall back-paymentInfo_OK ,o(╥﹏╥)o&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_TimeOut</span><span class="hljs-params">(Integer id)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;-----PaymentFallbackService fall back-paymentInfo_TimeOut ,o(╥﹏╥)o&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后，恢复调用链路。</p><p>在Spring Cloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是<code>@HystrixCommand</code>。</p><p>![image-20210815001420522](<a href="https://gitee.com/zoudacheng_admin/blog_img/raw/master/">https://gitee.com/zoudacheng_admin/blog_img/raw/master/</a> images/image-20210815001420522.png)</p><p>熔断器有3个状态</p><ul><li>关闭</li><li>开启</li><li>半开</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>1、service</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 服务熔断</span><br><span class="hljs-comment">   */</span><br>  @HystrixCommand(fallbackMethod = <span class="hljs-string">&quot;paymentCircuitBreaker_fallback&quot;</span>, commandProperties = &#123;<br>          @HystrixProperty(name = <span class="hljs-string">&quot;circuitBreaker.enabled&quot;</span>, value = <span class="hljs-string">&quot;true&quot;</span>),<span class="hljs-comment">// 是否开启断路器</span><br>          @HystrixProperty(name = <span class="hljs-string">&quot;circuitBreaker.requestVolumeThreshold&quot;</span>, value = <span class="hljs-string">&quot;10&quot;</span>),<span class="hljs-comment">// 请求次数</span><br>          @HystrixProperty(name = <span class="hljs-string">&quot;circuitBreaker.sleepWindowInMilliseconds&quot;</span>, value = <span class="hljs-string">&quot;10000&quot;</span>), <span class="hljs-comment">// 时间窗口期</span><br>          @HystrixProperty(name = <span class="hljs-string">&quot;circuitBreaker.errorThresholdPercentage&quot;</span>, value = <span class="hljs-string">&quot;60&quot;</span>),<span class="hljs-comment">// 失败率达到多少后跳闸</span><br>  &#125;)<br>  public <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">paymentCircuitBreaker</span>(<span class="hljs-params">Integer id</span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (id &lt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;******id 不能负数&quot;</span>);<br>      &#125;<br>      <span class="hljs-built_in">String</span> serialNumber = IdUtil.simpleUUID();<br><br>      <span class="hljs-keyword">return</span> Thread.currentThread().getName() + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;调用成功，流水号: &quot;</span> + serialNumber;<br>  &#125;<br><br>  <span class="hljs-comment">// 兜底方法 服务降级执行</span><br>  public <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">paymentCircuitBreaker_fallback</span>(<span class="hljs-params">@PathVariable(<span class="hljs-string">&quot;id&quot;</span>) Integer id</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: &quot;</span> + id;<br>  &#125;<br></code></pre></td></tr></table></figure><p>2、controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//====服务熔断</span><br>  <span class="hljs-meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentCircuitBreaker</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;<br>      String result = paymentService.paymentCircuitBreaker(id);<br>      log.info(<span class="hljs-string">&quot;****result: &quot;</span> + result);<br>      <span class="hljs-keyword">return</span> result;<br>  &#125;<br></code></pre></td></tr></table></figure><p>当这里一直让id传负数时，达到一定的请求次数后，就算请求恢复成正数，也不能正确访问，多几次正确请求后才能恢复</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>![image-20210815001444948](<a href="https://gitee.com/zoudacheng_admin/blog_img/raw/master/">https://gitee.com/zoudacheng_admin/blog_img/raw/master/</a> images/image-20210815001444948.png)</p><p><strong>熔断类型</strong></p><ul><li>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态。</li><li>熔断关闭：熔断关闭不会对服务进行熔断。</li><li>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断。</li></ul><p><strong>断路器开启或者关闭的条件</strong></p><p>到达以下阀值，断路器将会开启：</p><ul><li>当满足一定的阀值的时候（默认10秒内超过20个请求次数)</li><li>当失败率达到一定的时候（默认10秒内超过50%的请求失败)</li><li>当开启的时候，所有请求都不会进行转发</li></ul><p>一段时间之后（默认是5秒)，这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。</p><p><strong>断路器打开之后</strong></p><p>1：再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</p><p>2、当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</p><h2 id="服务降级-1"><a href="#服务降级-1" class="headerlink" title="服务降级"></a>服务降级</h2><p><code>SpringCloud Alibaba sentinal</code>那再讲</p><h2 id="Hystrix工作流程"><a href="#Hystrix工作流程" class="headerlink" title="Hystrix工作流程"></a>Hystrix工作流程</h2><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210815001347278.png" alt="image-20210815001347278"></p><p>1.每次调用创建一个新的HystrixCommand,把依赖调用封装在run()方法中.</p><p>2.执行execute()/queue做同步或异步调用.</p><p>3.判断熔断器(circuit-breaker)是否打开,如果打开跳到步骤8,进行降级策略,如果关闭进入步骤.</p><p>4.判断线程池/队列/信号量是否跑满，如果跑满进入降级步骤8,否则继续后续步骤.</p><p>5.调用HystrixCommand的run方法.运行依赖逻辑</p><p>依赖逻辑调用超时,进入步骤8.</p><p>6.判断逻辑是否调用成功。返回成功调用结果；调用出错，进入步骤8.</p><p>7.计算熔断器状态,所有的运行状态(成功, 失败, 拒绝,超时)上报给熔断器，用于统计从而判断熔断器状态.</p><p>8.getFallback()降级逻辑。以下四种情况将触发getFallback调用：</p><ul><li>run()方法抛出非HystrixBadRequestException异常。</li><li>run()方法调用超时</li><li>熔断器开启拦截调用</li><li>线程池/队列/信号量是否跑满</li></ul><p>没有实现getFallback的Command将直接抛出异常，fallback降级逻辑调用成功直接返回，降级逻辑调用失败抛出异常.</p><p>9.返回执行成功结果</p><h2 id="服务监控仪表盘"><a href="#服务监控仪表盘" class="headerlink" title="服务监控仪表盘"></a>服务监控仪表盘</h2><p>1新建cloud-consumer-hystrix-dashboard9001</p><p>2.POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableHystrixDashboard</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HystrixDashboardMain9001</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(HystrixDashboardMain9001.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、所有Provider微服务提供类(8001/8002/8003)都需要监控依赖配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>5、启动cloud-consumer-hystrix-dashboard9001该微服务后续将监控微服务8001</p><p>浏览器输入<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p>6、测试</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210814145401147.png" alt="image-20210814145401147"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210814145419713.png" alt="image-20210814145419713"></p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud服务调用</title>
    <link href="/2021/08/12/%E5%88%86%E5%B8%83%E5%BC%8F-springcloud03/"/>
    <url>/2021/08/12/%E5%88%86%E5%B8%83%E5%BC%8F-springcloud03/</url>
    
    <content type="html"><![CDATA[<h1 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h1><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><h3 id="入门介绍"><a href="#入门介绍" class="headerlink" title="入门介绍"></a>入门介绍</h3><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡的工具</strong>。</p><p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供<strong>客户端的软件负载均衡算法和服务调用</strong>。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。</p><p>Ribbon本地负载均衡客户端VS Nginx服务端负载均衡区别</p><p>Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。<br>Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/145b915e56a85383b3ad40f0bb2256e0.png" alt="img"></p><p>总结：Ribbon其实就是一个软负载均衡的客户端组件，它可以和其他所需请求的客户端结合使用，和Eureka结合只是其中的一个实例。</p><p>Ribbon在工作时分成两步：</p><ul><li>第一步先选择EurekaServer ,它优先选择在同一个区域内负载较少的server。</li><li>第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。</li></ul><h3 id="自带的负载均衡算法"><a href="#自带的负载均衡算法" class="headerlink" title="自带的负载均衡算法"></a>自带的负载均衡算法</h3><p>在Ribbon中，IRule接口实现的就是根据算法中服务列表中选取一个要访问的服务</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/87243c00c0aaea211819c0d8fc97e445.png" alt="img"></p><p>每种算法的种类</p><ul><li>RoundRobinRule 轮询</li><li>RandomRule 随机</li><li>RetryRule 先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重</li><li>WeightedResponseTimeRule 对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择</li><li>BestAvailableRule 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</li><li>AvailabilityFilteringRule 先过滤掉故障实例，再选择并发较小的实例</li><li>ZoneAvoidanceRule 默认规则,复合判断server所在区域的性能和server的可用性选择服务器</li></ul><h3 id="负载均衡替换"><a href="#负载均衡替换" class="headerlink" title="负载均衡替换"></a>负载均衡替换</h3><p>需要在com.bobo下新建包，不能在SpringBoot扫描包的范围内，</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210809222805443.png" alt="image-20210809222805443"></p><p>类似于上图的架构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySelfRule</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IRule <span class="hljs-title">myRule</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RandomRule();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>入口类引入注解@RibbonClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-comment">//添加到此处</span><br><span class="hljs-meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;, configuration = MySelfRule.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderMain80</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( String[] args )</span></span>&#123;<br>        SpringApplication.run(OrderMain80.class, args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样就把默认的轮询负载均衡算法替换成随机负载均衡算法了</p><h3 id="默认负载均衡化算法"><a href="#默认负载均衡化算法" class="headerlink" title="默认负载均衡化算法"></a>默认负载均衡化算法</h3><p>默认采用轮询的负载均衡算法</p><p><strong>默认负载轮询算法: rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标，每次服务重启动后rest接口计数从1开始</strong>。</p><p>如:</p><ul><li>List [0] instances = 127.0.0.1:8002</li><li>List [1] instances = 127.0.0.1:8001</li></ul><p>8001+ 8002组合成为集群，它们共计2台机器，集群总数为2，按照轮询算法原理：</p><ul><li><p>当总请求数为1时:1%2=1对应下标位置为1，则获得服务地址为127.0.0.1:8001</p></li><li><p>当总请求数位2时:2%2=О对应下标位置为0，则获得服务地址为127.0.0.1:8002</p></li><li><p>当总请求数位3时:3%2=1对应下标位置为1，则获得服务地址为127.0.0.1:8001</p></li><li><p>当总请求数位4时:4%2=О对应下标位置为0，则获得服务地址为127.0.0.1:8002</p><p>如此类推…</p></li></ul><h3 id="手写轮询负载均衡算法"><a href="#手写轮询负载均衡算法" class="headerlink" title="手写轮询负载均衡算法"></a>手写轮询负载均衡算法</h3><p>自定义负载均衡接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">LoadBalancer</span> </span>&#123;<br>    <span class="hljs-function">ServiceInstance <span class="hljs-title">instances</span><span class="hljs-params">(List&lt;ServiceInstance&gt; serviceInstances)</span></span>; <span class="hljs-comment">//从所有实例中获取</span><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LoadBalancer</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> AtomicInteger atomicInteger = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAndIncrement</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> current;<br>        <span class="hljs-keyword">int</span> next;<br>        <span class="hljs-keyword">do</span> &#123;<br>            current = <span class="hljs-keyword">this</span>.atomicInteger.get();<br>            next = current &gt;= Integer.MAX_VALUE ? <span class="hljs-number">0</span> : current + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">while</span> (!<span class="hljs-keyword">this</span>.atomicInteger.compareAndSet(current, next));<br>        System.out.println(<span class="hljs-string">&quot;*****第几次访问，次数next：&quot;</span> + next);<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServiceInstance <span class="hljs-title">instances</span><span class="hljs-params">(List&lt;ServiceInstance&gt; serviceInstances)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> index = getAndIncrement() % serviceInstances.size();<br>        <span class="hljs-keyword">return</span> serviceInstances.get(index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Order控制器使用自定义负载均衡算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoadBalancer loadBalancer;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/consumer/payment/lb&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPaymentLB</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="hljs-string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);<br>        <span class="hljs-keyword">if</span> (instances == <span class="hljs-keyword">null</span> || instances.size() &lt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        ServiceInstance serviceInstance = loadBalancer.instances(instances);<br>        URI uri = serviceInstance.getUri();<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(uri+<span class="hljs-string">&quot;/payment/lb&quot;</span>,String.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Feign是一个WebService客户端。使用Feign能让编写Web Service客户端更简单，只需在接口并在接口上添加注解即可</p><p>Feign旨在使编写Java Http客户端变得更容易。</p><blockquote><p>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p></blockquote><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>1.新建cloud-consumer-feign-order80</p><p>2.POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--openfeign--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--eureka client--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--web--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--一般基础通用配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>3、yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">80</span><br><br>eureka:<br>  client:<br>    register-with-eureka: <span class="hljs-keyword">false</span><br>    service-url:<br>      defaultZone: http:<span class="hljs-comment">//eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span><br><br></code></pre></td></tr></table></figure><p>4、主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderFeignMain80</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(OrderFeignMain80.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、新建PaymentFeignService接口并新增注解@FeignClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PaymentFeignService</span></span>&#123;    <span class="hljs-meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;&#125;<br></code></pre></td></tr></table></figure><p>注意这里客户端的接口与服务端的Controller方法应该一样，需要<code>@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)这个注解</code>，里面的值是微服务的名称，不能写错</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210812225507062.png"></p><p>6、测试</p><p>启动7001，8001/8002，以及该80客户</p><p>发现自带负载均衡</p><h3 id="超时控制"><a href="#超时控制" class="headerlink" title="超时控制"></a>超时控制</h3><p>OpenFeign默认等待1秒钟，超过后报错</p><p>在有些情况下需要修改，只需要在YML文件里需要开启OpenFeign客户端超时控制</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 设置feign客户端超时时间(OpenFeign默认支持ribbon)(单位：毫秒)ribbon:  # 指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间  ReadTimeout: 5000  # 指的是建立连接后从服务器读取到可用资源所用的时间  ConnectTimeout: 5000</span><br></code></pre></td></tr></table></figure><h3 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h3><p>Feign提供了日志打印功能，我们可以通过配置来调整日恙级别，从而了解Feign 中 Http请求的细节。</p><p>说白了就是对Feign接口的调用情况进行监控和输出</p><p>1、配置日志bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configurationpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeignConfig</span></span>&#123;    <span class="hljs-meta">@Bean</span>    Logger.<span class="hljs-function">Level <span class="hljs-title">feignLoggerLevel</span><span class="hljs-params">()</span>    </span>&#123;        <span class="hljs-keyword">return</span> Logger.Level.FULL;    &#125;&#125;<br></code></pre></td></tr></table></figure><p>2、YML文件里需要开启日志的Feign客户端</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">logging:  level:</span>    <span class="hljs-comment"># feign日志以什么级别监控哪个接口    com.lun.springcloud.service.PaymentFeignService: debug</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud服务注册与发现</title>
    <link href="/2021/08/08/%E5%88%86%E5%B8%83%E5%BC%8F-springcloud02/"/>
    <url>/2021/08/08/%E5%88%86%E5%B8%83%E5%BC%8F-springcloud02/</url>
    
    <content type="html"><![CDATA[<h1 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h1><h2 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h2><h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><p>Spring Cloud封装了NetFkix公司开发的Eureka模块来实现服务治理</p><p>在传统的rpc框架中，管理每个服务于服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用、复杂均衡、容错等，实现服务发现与注册</p><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210807215022110.png" alt="image-20210807215022110"></p><p>上图是Eureka的架构模块</p><p>Eureka采用了CS的设计架构，Eureka Sever作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方(消费者服务提供者)，以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想:在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何RPC远程框架中，都会有一个注册中心存放服务地址相关信息(接口地址)</p><p><strong>Eureka包含两个组件:Eureka Server和Eureka Client</strong></p><ul><li>Eureka Server提供服务注册服务</li></ul><blockquote><p>各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p></blockquote><ul><li>EurekaClient通过注册中心进行访问</li></ul><blockquote><p>它是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒)</p></blockquote><h3 id="EurekaServer搭建"><a href="#EurekaServer搭建" class="headerlink" title="EurekaServer搭建"></a>EurekaServer搭建</h3><p>1.创建名为cloud-eureka-server7001的Maven工程</p><p>2.修改pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>LearnCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-eureka-server7001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--eureka-server--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--boot web actuator--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--一般通用配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>3、修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">locathost</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment">#设置与Eureka server交互的地址查询服务和注册服务都需要依赖这个地址。</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br><br></code></pre></td></tr></table></figure><p>4、主启动类</p><p>5、测试</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210808132913555.png" alt="image-20210808132913555"></p><h3 id="支付微服务8001入驻eureka"><a href="#支付微服务8001入驻eureka" class="headerlink" title="支付微服务8001入驻eureka"></a>支付微服务8001入驻eureka</h3><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、增添eureka配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment"># 是否注册到eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 是否从EurekaServer抓取已有的注册信息，默认为true、集群必须设置为true才能使用负载均衡</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br><br></code></pre></td></tr></table></figure><p>3、主启动类增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentMain8001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(PaymentMain8001.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、测试</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210808134035670.png" alt="image-20210808134035670"></p><p>可以发现eureka的监控页面多了一栏</p><h3 id="订单微服务80入驻eureka"><a href="#订单微服务80入驻eureka" class="headerlink" title="订单微服务80入驻eureka"></a>订单微服务80入驻eureka</h3><p>步骤一样</p><h3 id="Eureka集群搭建"><a href="#Eureka集群搭建" class="headerlink" title="Eureka集群搭建"></a>Eureka集群搭建</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210808140904574.png" alt="image-20210808140904574"></p><p>搭建Eureka注册中心集群，实现负载均故障容错</p><p>1、修改hosts配置文件</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> eureka7001.com<br><span class="hljs-number">127.0.0.1</span> eureka7002.com<br></code></pre></td></tr></table></figure><p>2、修改7001配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span>  <span class="hljs-comment">#eureka服务端的实例名称</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment"># 设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka/</span><br>      <span class="hljs-comment"># 集群是另一个服务器</span><br><br></code></pre></td></tr></table></figure><p>3、修改7002配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7002</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7002.com</span>  <span class="hljs-comment">#eureka服务端的实例名称</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment"># 设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/</span><br>      <span class="hljs-comment"># 集群是另一个服务器</span><br><br></code></pre></td></tr></table></figure><p>4、将微服务部署至集群</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">eureka:  client:</span>    <span class="hljs-comment">#表示是否将自己注册进Eurekaserver默认为true。    register-with-eureka: true    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡    fetchRegistry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka, http://eureka7002.com:7002/eureka</span><br></code></pre></td></tr></table></figure><p>5、测试</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210808150213314.png"></p><h3 id="支付微服务集群配置"><a href="#支付微服务集群配置" class="headerlink" title="支付微服务集群配置"></a>支付微服务集群配置</h3><p>支付这个是服务的提供者，可以通过扩充多个服务进行集群环境搭建</p><p>参考cloud-provicer-payment8001</p><p>1.新建cloud-provider-payment8002</p><p>2.改POM</p><p>3.写YML - 端口8002</p><p>4.主启动</p><p>5.业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><span class="hljs-meta">@RestControllerpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123;    <span class="hljs-comment">//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;    public static final String PAYMENT_URL = &quot;http://CLOUD-PAYMENT-SERVICE&quot;;        ...&#125;</span><br></code></pre></td></tr></table></figure><p>这里不能写死url，应该写成微服务的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configurationpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContextConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@LoadBalanced</span><span class="hljs-comment">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力    public RestTemplate getRestTemplate()&#123;        return new RestTemplate();    &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>消费者80开启负载均衡</p><p>测试</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210808150513528.png" alt="image-20210808150513528"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210808150522751.png" alt="image-20210808150522751"></p><p>每次请求服务时，端口号变化，轮询依次访问两个服务</p><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>1、主启动类配置注解@EnableDiscoveryClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableEurekaClient</span><span class="hljs-meta">@EnableDiscoveryClientpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentMain8001</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(PaymentMain8001.class,args);    &#125;&#125;<br></code></pre></td></tr></table></figure><p>2、controller自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br></code></pre></td></tr></table></figure><p>3、写接口显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/payment/discovery&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">discovery</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">//得到所有的微服务        List&lt;String&gt; services = discoveryClient.getServices();        for (String service : services) &#123;            log.info(&quot;service: &quot;+service);        &#125;        //获取实例名为CLOUD-PAYMENT-SERVICE服务        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;);        for (ServiceInstance instance : instances) &#123;            log.info(instance.getServiceId() + &quot;\t&quot; + instance.getHost() + &quot;\t&quot; + instance.getPort() + &quot;\t&quot; + instance.getUri());        &#125;        return this.discoveryClient;    &#125;</span><br></code></pre></td></tr></table></figure><h3 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h3><p>某时刻某一微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存</p><p>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例(默认90秒)。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时(可能发生了网络分区故障)，那么这个节点就会进入自我保护模式。<br><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/264b66e8099a3761beaea2ba44b8fc5e.png" alt="img"></p><h4 id="怎么禁止Eureka自我保护机制"><a href="#怎么禁止Eureka自我保护机制" class="headerlink" title="怎么禁止Eureka自我保护机制"></a>怎么禁止Eureka自我保护机制</h4><p>1、Eureka  Server配置文件修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span>    <span class="hljs-comment"># 关闭自我保护机制    enable-self-preservation: false    eviction-interval-timer-in-ms: 2000</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210808224541509.png" alt="image-20210808224541509"></p><p>提示已经关闭自我保护机制</p><p>修改微服务的心跳时间</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:  ...  instance:    instance-id: payment8001    prefer-ip-address:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment">#心跳检测与续约时间    #开发时没置小些，保证服务关闭后注册中心能即使剔除服务    #Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)    lease-renewal-interval-in-seconds: 1    #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务    lease-expiration-duration-in-seconds: 2</span><br></code></pre></td></tr></table></figure><p>关闭该微服务后，面板上就自动剔除了</p><h3 id="使用zookeeper替代Eureka"><a href="#使用zookeeper替代Eureka" class="headerlink" title="使用zookeeper替代Eureka"></a>使用zookeeper替代Eureka</h3><p>1、首先要在linux服务器上安装上zookeeper，这里不再赘述</p><p>2、新建8004端口的客户端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>要引入依赖</p><p>3、配置文件修改，连接上云服务上的zookeeper的客户端</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#8004表示注册到zookeeper服务器的支付服务提供者端口号server:  port: 8004#服务别名----注册zookeeper到注册中心名称spring:  application:    name: cloud-provider-payment  cloud:    zookeeper:      connect-string: 42.194.129.172:2181 # 192.168.111.144:2181 #</span><br></code></pre></td></tr></table></figure><p>4、主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableDiscoveryClient</span><span class="hljs-comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务public class PaymentMain8004 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(PaymentMain8004.class, args);    &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>5、添加一个Controller业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf4jpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentController</span></span>&#123;    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String serverPort;    <span class="hljs-meta">@RequestMapping(value = &quot;/payment/zk&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentzk</span><span class="hljs-params">()</span>    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;springcloud with zookeeper: &quot;</span>+serverPort+<span class="hljs-string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();    &#125;&#125;<br></code></pre></td></tr></table></figure><p>6、linux系统中查看是否注册成功</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210808235417280.png" alt="image-20210808235417280"></p><p>主义zookeeper注册的节点是临时节点，当注册的微服务关闭一定时间内就清除该服务了，</p><p>同理让消费者注册进去</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210809123420394.png" alt="image-20210809123420394"></p><h2 id="Consul使用"><a href="#Consul使用" class="headerlink" title="Consul使用"></a>Consul使用</h2><p>1、首先需要安装consul</p><p>启动命名</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">consul</span> agent -dev -client <span class="hljs-number">0.0.0.0</span> -ui<br></code></pre></td></tr></table></figure><p>2、浏览器输入 - <a href="http://localhost:8500/">http://localhost:8500/</a> - 打开Consul控制页。</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210809133743651.png" alt="image-20210809133743651"></p><p>3、服务提供者注册进Consul</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">###consul服务端口号server:  port: 8006spring:  application:    name: consul-provider-payment####consul注册中心地址  cloud:    consul:      host: localhost      port: 8500      discovery:        #hostname: 127.0.0.1        service-name: $&#123;spring.application.name&#125;</span><br></code></pre></td></tr></table></figure><p>5、主启动类</p><p>6、Controller</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210809133845774.png" alt="image-20210809133845774"></p><p>在web面板上发现这一栏说明注册成功</p><h2 id="三个注册中心的异同点"><a href="#三个注册中心的异同点" class="headerlink" title="三个注册中心的异同点"></a>三个注册中心的异同点</h2><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210809134051729.png" alt="image-20210809134051729"></p><p>CAP：</p><ul><li>C：Consistency (强一致性)</li><li>A：Availability (可用性)</li><li>P：Partition tolerance （分区容错性)</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210809134227697.png" alt="image-20210809134227697"></p><p>AP架构（Eureka）</p><p>当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性。</p><p>结论：违背了一致性C的要求，只满足可用性和分区容错，即AP</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/2d07748539300b9c466eb1d9bac5cd1b.png" alt="img"></p><p>CP架构（ZooKeeper/Consul）</p><p>当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性。</p><p>结论：违背了可用性A的要求，只满足一致性和分区容错，即CP。</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/c6f2926a97420015fcebc89b094c5598.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud入门案例</title>
    <link href="/2021/08/07/%E5%88%86%E5%B8%83%E5%BC%8F-springcloud01/"/>
    <url>/2021/08/07/%E5%88%86%E5%B8%83%E5%BC%8F-springcloud01/</url>
    
    <content type="html"><![CDATA[<h1 id="微服务入门案例"><a href="#微服务入门案例" class="headerlink" title="微服务入门案例"></a>微服务入门案例</h1><h2 id="微服务提供者支付Module模块"><a href="#微服务提供者支付Module模块" class="headerlink" title="微服务提供者支付Module模块"></a>微服务提供者支付Module模块</h2><h3 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210807171200827.png" alt="image-20210807171200827"></p><h3 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.bobo.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>clod-provider-payment8001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--包含了sleuth+zipkin--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--eureka-client--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        &lt;dependency&gt;</span><br><span class="hljs-comment">            &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="hljs-comment">            &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;</span><br><span class="hljs-comment">            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/dependency&gt;</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql-connector-java--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--jdbc--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="修改springboot配置"><a href="#修改springboot配置" class="headerlink" title="修改springboot配置"></a>修改<code>springboot</code>配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-payment-service</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="hljs-comment"># 当前数据源操作类型</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>              <span class="hljs-comment"># mysql驱动包</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/my?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapperLocations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.lun.springcloud.entities</span>    <span class="hljs-comment"># 所有Entity别名类所在包</span><br><br><br></code></pre></td></tr></table></figure><h3 id="springboot启动类"><a href="#springboot启动类" class="headerlink" title="springboot启动类"></a><code>springboot</code>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: springboot启动类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-08-07 16:30</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentMain8001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(PaymentMain8001.class);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="业务代码编写"><a href="#业务代码编写" class="headerlink" title="业务代码编写"></a>业务代码编写</h3><p>1、新建订单表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `payment`(<br>`id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;ID&#x27;</span>,<br>    `serial` <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (id)<br>)ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4<br><br></code></pre></td></tr></table></figure><p>2、新建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Payment</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String serial;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3、JSON封装体<code>CommonResult</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonResult</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CommonResult</span><span class="hljs-params">(Integer code, String message)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>(code, message, <span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、<code>Paymentmapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PaymentMapper</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">create</span><span class="hljs-params">(Payment payment)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Payment <span class="hljs-title">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.bobo.springcloud.Dao.PaymentMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;create&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Payment&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into payment(serial)  values(#&#123;serial&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.bobo.springcloud.pojo.Payment&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;id column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;BIGINT&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;id column=&quot;serial&quot; property=&quot;serial&quot; jdbcType=&quot;VARCHAR&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/resultMap&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getPaymentById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Long&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.bobo.springcloud.pojo.Payment&quot;</span>&gt;</span><br>        select * from payment where id=#&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>5、service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Servicepublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PaymentService</span></span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> PaymentMapper paymentMapper;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">create</span><span class="hljs-params">(Payment payment)</span> </span>&#123;        <span class="hljs-keyword">return</span> paymentMapper.create(payment);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Payment <span class="hljs-title">getPaymentById</span><span class="hljs-params">(Long id)</span> </span>&#123;        <span class="hljs-keyword">return</span> paymentMapper.getPaymentById(id);    &#125;&#125;<br></code></pre></td></tr></table></figure><p>6、controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf4jpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> PaymentService paymentService;    <span class="hljs-meta">@PostMapping(&quot;/payment/create&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult <span class="hljs-title">create</span><span class="hljs-params">(Payment payment)</span> </span>&#123;        <span class="hljs-keyword">int</span> result = paymentService.create(payment);        <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;插入数据库成功&quot;</span>, result);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">444</span>, <span class="hljs-string">&quot;插入数据失败&quot;</span>, <span class="hljs-keyword">null</span>);        &#125;    &#125;    <span class="hljs-meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult <span class="hljs-title">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">long</span> id)</span> </span>&#123;        Payment payment = paymentService.getPaymentById(id);        <span class="hljs-keyword">if</span> (payment != <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;查询成功&quot;</span>, payment);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">444</span>, <span class="hljs-string">&quot;没有对应记录&quot;</span>, <span class="hljs-keyword">null</span>);    &#125;&#125;<br></code></pre></td></tr></table></figure><p>7、测试</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210807185625265.png" alt="image-20210807185625265"></p><h2 id="微服务消费者订单Module模块"><a href="#微服务消费者订单Module模块" class="headerlink" title="微服务消费者订单Module模块"></a>微服务消费者订单Module模块</h2><h3 id="新建模块-1"><a href="#新建模块-1" class="headerlink" title="新建模块"></a>新建模块</h3><h3 id="修改pom文件-1"><a href="#修改pom文件-1" class="headerlink" title="修改pom文件"></a>修改pom文件</h3><h3 id="修改SpringBoot配置"><a href="#修改SpringBoot配置" class="headerlink" title="修改SpringBoot配置"></a>修改SpringBoot配置</h3><h3 id="Springboot启动类"><a href="#Springboot启动类" class="headerlink" title="Springboot启动类"></a>Springboot启动类</h3><blockquote><p>前面这几部与上一个模块代码大致相同，这里不再赘述</p></blockquote><h3 id="业务代码编写-1"><a href="#业务代码编写-1" class="headerlink" title="业务代码编写"></a>业务代码编写</h3><p>1、实体类</p><p>与模块1实体类相同</p><p>2、由于是直接调用模块1的服务，这里就直接写控制层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><span class="hljs-meta">@RestControllerpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PAYMENT_URL = <span class="hljs-string">&quot;http://localhost:8001&quot;</span>;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;    <span class="hljs-meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">create</span><span class="hljs-params">(Payment payment)</span></span>&#123;        <span class="hljs-keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="hljs-string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);    &#125;    <span class="hljs-meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">getPayment</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;        <span class="hljs-keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="hljs-string">&quot;/payment/get/&quot;</span>+id, CommonResult.class);    &#125;&#125;<br></code></pre></td></tr></table></figure><p>3、新增一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configurationpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContextConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();    &#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h2><p>由于两个模块的实体类是重复的，所以我们可以增加一个cloud-api-commons方这些实体类，同样可以放一个utils</p><p>1、新建cloud-api-commons</p><p>2、将实体类移到此模块</p><p>3、订单80和支付8001分别改造</p><ul><li>将cloud-consumer-order80与cloud-provider-payment8001两工程的公有entities包移除</li><li>引入cloud-api-commons依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lun.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ngnix入门</title>
    <link href="/2021/08/07/%E5%88%86%E5%B8%83%E5%BC%8F-ngnix/"/>
    <url>/2021/08/07/%E5%88%86%E5%B8%83%E5%BC%8F-ngnix/</url>
    
    <content type="html"><![CDATA[<h1 id="Ngnix"><a href="#Ngnix" class="headerlink" title="Ngnix"></a>Ngnix</h1><h2 id="Ngnix简介"><a href="#Ngnix简介" class="headerlink" title="Ngnix简介"></a>Ngnix简介</h2><hr><h3 id="什么是ngnix"><a href="#什么是ngnix" class="headerlink" title="什么是ngnix"></a>什么是ngnix</h3><p><em>Nginx</em> (engine x) 是一个高性能的Http和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务，能经受高负载的考验，能支持高达50000个并发连接数。</p><h3 id="一些ngnix中的概念"><a href="#一些ngnix中的概念" class="headerlink" title="一些ngnix中的概念"></a>一些ngnix中的概念</h3><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>​    首先需要知道正向代理，如果把局域网外的Internet想象成一个巨大的资源库，则局域网中的客户端要访问Internet，需要通过代理服务器访问，这种代理服务就称为正向代理。这里客户端必须要配置代理服务器才能访问到目标服务器</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804212411417.png" alt="image-20210804212411417"></p><p>那什么是反向代理</p><p>​    客户端不需做任何的配置，只需要将请求发送给方向代理服务器，反向代理服务器去选择目标服务器获取数据，饭后将数据返回给客户端。即把真正的服务器隐藏了，客户不知道真实服务器的存在。</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804212800765.png" alt="image-20210804212800765"></p><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>​    增加服务器的数量，然后将请求分发到各个服务器上，将原来请求集中到服务器上的情况改为请求分发到多个服务器上，以增加整体的性能。将负载分发到不同服务器上，称为负载均衡。</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804213734228.png" alt="image-20210804213734228"></p><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p>​    为了加快网站的解析速度，可以把动态页面和静态页面部署到不同的服务器上</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804214539514.png" alt="image-20210804214539514"></p><h2 id="Ngnix基本使用"><a href="#Ngnix基本使用" class="headerlink" title="Ngnix基本使用"></a>Ngnix基本使用</h2><hr><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>使用ngnix操作命名前提条件：进入ngnix的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">./ngnix -v # 查看ngnix版本号<br>./ngnix -s stop # 关闭ngnix<br>./ngnix -s reload # 重新加载ngnix<br></code></pre></td></tr></table></figure><h3 id="ngnix配置文件解析"><a href="#ngnix配置文件解析" class="headerlink" title="ngnix配置文件解析"></a>ngnix配置文件解析</h3><p>全局块</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attr">worker_processes</span>  <span class="hljs-string">1; </span><br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><span class="hljs-comment"># 全局块结束</span><br></code></pre></td></tr></table></figure><p>这个块主要影响ngnix服务器整体运行的一些配置</p><p>worker_processes (工作进程数) 1;  这个值越大，处理并发的性能</p><p>events块</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">events</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">worker_connections</span>  <span class="hljs-string">1024;</span><br><span class="hljs-attr">&#125;</span><br><span class="hljs-comment"># 上面的设置表示支持的最大连接数</span><br><span class="hljs-comment"># events结束</span><br></code></pre></td></tr></table></figure><p>影响ngnix服务器与用户的网络连接</p><p>http块</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">http</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">include</span>       <span class="hljs-string">mime.types;</span><br>    <span class="hljs-attr">default_type</span>  <span class="hljs-string">application/octet-stream;</span><br><br><span class="hljs-comment">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="hljs-comment">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="hljs-comment">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br><span class="hljs-comment">    #access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attr">sendfile</span>        <span class="hljs-string">on;</span><br><span class="hljs-comment">    #tcp_nopush     on;</span><br><br><span class="hljs-comment">    #keepalive_timeout  0;</span><br>    <span class="hljs-attr">keepalive_timeout</span>  <span class="hljs-string">65;</span><br><br><span class="hljs-comment">    #gzip  on;</span><br><br>    <span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">listen</span>       <span class="hljs-string">80;</span><br>        <span class="hljs-attr">server_name</span>  <span class="hljs-string">42.194.129.172;</span><br>        <span class="hljs-attr">charset</span> <span class="hljs-string">utf-8;</span><br><br><span class="hljs-comment">        #charset koi8-r;</span><br><br><span class="hljs-comment">        #access_log  logs/host.access.log  main;</span><br><br>        <span class="hljs-attr">location</span>  <span class="hljs-string">/ &#123;</span><br>            <span class="hljs-attr">root</span> <span class="hljs-string">/home/www/hexo;</span><br> <span class="hljs-attr">&#125;</span><br><span class="hljs-comment">        #error_page  404              /404.html;</span><br><br><span class="hljs-comment">        # redirect server error pages to the static page /50x.html</span><br><span class="hljs-comment">        #</span><br>        <span class="hljs-attr">error_page</span>   <span class="hljs-string">500 502 503 504  /50x.html;</span><br><br>        <span class="hljs-attr">location</span> = <span class="hljs-string">/50x.html &#123;</span><br>            <span class="hljs-attr">root</span>   <span class="hljs-string">/home/www/hexo/404.html;</span><br>        <span class="hljs-attr">&#125;</span><br><br><span class="hljs-comment">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="hljs-comment">        #</span><br><span class="hljs-comment">        #location ~ \.php$ &#123;</span><br><span class="hljs-comment">        #    proxy_pass   http://127.0.0.1;</span><br><span class="hljs-comment">        #&#125;</span><br><br><span class="hljs-comment">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="hljs-comment">        #</span><br><span class="hljs-comment">        #location ~ \.php$ &#123;</span><br><span class="hljs-comment">        #    root           html;</span><br><span class="hljs-comment">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="hljs-comment">        #    fastcgi_index  index.php;</span><br><span class="hljs-comment">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="hljs-comment">        #    include        fastcgi_params;</span><br><span class="hljs-comment">        #&#125;</span><br><br><span class="hljs-comment">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="hljs-comment">        # concurs with nginx&#x27;s one</span><br><span class="hljs-comment">        #</span><br><span class="hljs-comment">        #location ~ /\.ht &#123;</span><br><span class="hljs-comment">        #    deny  all;</span><br><span class="hljs-comment">        #&#125;</span><br>    <span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><p>这个块是配置最频繁的部分</p><h2 id="ngnix-配置实例1-反向代理"><a href="#ngnix-配置实例1-反向代理" class="headerlink" title="ngnix 配置实例1-反向代理"></a>ngnix 配置实例1-反向代理</h2><hr><h3 id="项目1"><a href="#项目1" class="headerlink" title="项目1"></a>项目1</h3><p>通过ngnix反向代理，访问tomcat首页</p><p>安装tomcat，tomcat默认使用的是8080端口号</p><p>ngnix配置文件增加监听端口号</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804225220650.png" alt="image-20210804225220650"></p><h3 id="项目2"><a href="#项目2" class="headerlink" title="项目2"></a>项目2</h3><p>使用ngnix反向代理，根据访问的路径跳转到不同端口的服务中</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806164723192.png" alt="image-20210806164723192"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806212249430.png" alt="image-20210806212249430"></p><p>上面是配置location各个符号的规则</p><h2 id="ngnix配置实例2-负载均衡"><a href="#ngnix配置实例2-负载均衡" class="headerlink" title="ngnix配置实例2-负载均衡"></a>ngnix配置实例2-负载均衡</h2><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 实现效果</span><br>浏览器访问ngnix服务器 ngnix将请求分发到8081和8082两个端口上去<br></code></pre></td></tr></table></figure><p>在ngnix配置文件中的http块加入以下配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> myserver &#123;<br>     <span class="hljs-attribute">server</span>  <span class="hljs-number">192.168.40.128:8081</span>;<br>     <span class="hljs-attribute">server</span>  <span class="hljs-number">192.168.40.128:8082</span>;<br> &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  <span class="hljs-number">192.168.40.128</span>;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-attribute">proxy_pass</span> http://myserver;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在此处添加server映射即可</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 各种负载均衡策略</span><br><span class="hljs-section">## 轮询策略</span><br><span class="hljs-code">每个请求按时间顺序逐一分配到不同的后端服务器。如果后端服务器宕机，能自动剔除</span><br><span class="hljs-code">## weight</span><br><span class="hljs-code">在配置时加入权重，根据权重分配</span><br><span class="hljs-code">## iphash</span><br><span class="hljs-code">在配置时加入`iphash`</span><br><span class="hljs-code">每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题</span><br><span class="hljs-code">## fair</span><br><span class="hljs-code">根据后端服务器的响应时间进行分配，响应时间短的优先分配</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806214939249.png" alt="image-20210806214939249"></p><p>上图是按权重分配</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806215138848.png" alt="image-20210806215138848"></p><p>上图是ip_hash</p><h2 id="ngnix配置实例3-动静分离"><a href="#ngnix配置实例3-动静分离" class="headerlink" title="ngnix配置实例3-动静分离"></a>ngnix配置实例3-动静分离</h2><hr><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>ngnix动静分离简单来书哟就是把动态和静态请求分开，</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806215547913.png" alt="image-20210806215547913"></p><p>实现方式</p><ul><li>把静态文件独立成单独的域名，放在独立的服务器上(主流)</li><li>动态文件和静态文件一起发布，通过ngnix进行区分</li></ul><p>目的</p><p>提高请求的效率</p><h3 id="如何配置"><a href="#如何配置" class="headerlink" title="如何配置"></a>如何配置</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806221047153.png" alt="image-20210806221047153"></p><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p>地址栏输入<a href="http://192.168.40.128:9001/image/1.png%E8%83%BD%E5%A4%9F%E8%AE%BF%E9%97%AE%E5%9B%BE%E7%89%87">http://192.168.40.128:9001/image/1.png能够访问图片</a></p><p>地址栏输入<a href="http://192.168.40.128:9001/www/a.html%E8%83%BD%E5%A4%9F%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2">http://192.168.40.128:9001/www/a.html能够访问静态页面</a></p><h2 id="ngnix配置实例4-配置高可用集群"><a href="#ngnix配置实例4-配置高可用集群" class="headerlink" title="ngnix配置实例4-配置高可用集群"></a>ngnix配置实例4-配置高可用集群</h2><hr><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>如果ngnix服务器宕机了，就无法提供服务了</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806221649169.png" alt="image-20210806221649169"></p><p>高可用</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806222026796.png" alt="image-20210806222026796"></p><ul><li>需要有两台ngnix服务器</li><li>需要keepalive</li><li>需要虚拟ip</li></ul><h3 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h3><p>修改keepalive.conf配置文件</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs puppet">! Configuration File for keepalived<br><br><span class="hljs-keyword">global_defs</span> &#123;<br><br>    notification_email &#123;<br><br>        acassen@firewall.loc<br><br>        failover@firewall.loc<br><br>        sysadmin@firewall.loc<br>     &#125;<br><br>        <span class="hljs-keyword">notification_email_from</span> <span class="hljs-keyword">Alexandre</span>.Cassen@firewall.loc<br><br>        smtp_server 192.168.17.129<br><br>        smtp_connect_timeout 30<br><br>        router_id LVS_DEVEL <span class="hljs-comment"># 主机名字</span><br>&#125;<br><br><br>vrrp_script <span class="hljs-keyword">chk_http_port</span> &#123;<br>        script <span class="hljs-string">&quot;/usr/local/src/nginx_check.sh&quot;</span><br>        interval <span class="hljs-number">2</span> <span class="hljs-comment">#（检测脚本执行的间隔）</span><br>        weight <span class="hljs-number">2</span> <span class="hljs-comment"># 权重</span><br>   &#125;<br>        <span class="hljs-keyword">vrrp_instance</span> <span class="hljs-keyword">VI_1</span> &#123;<br>        state MASTER <span class="hljs-comment"># 备份服务器上将 MASTER 改为 BACKUP</span><br>        interface eth1 <span class="hljs-comment"># 网卡</span><br>        virtual_router_id <span class="hljs-number">51</span>  <span class="hljs-comment"># 主、备机的 virtual_router_id 必须相同</span><br>        <span class="hljs-literal">priority</span> <span class="hljs-number">100</span>  <span class="hljs-comment"># 主、备机取不同的优先级，主机值较大，备份机值较小</span><br>        advert_int <span class="hljs-number">1</span><br>        authentication &#123;<br>                <span class="hljs-literal">auth_type</span> PASS<br>                auth_pass <span class="hljs-number">1111</span><br>        &#125;<br><br>        <span class="hljs-keyword">virtual_ipaddress</span> &#123;<br>             <span class="hljs-number">192.168</span>.<span class="hljs-number">77.50</span> <span class="hljs-comment"># VRRP H 虚拟地址</span><br>        &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在<code>/usr/local/src</code>添加检测脚本：<code>nginx_check.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>A=`ps -C nginx –no-header | wc -l`<br>if [ $A -eq 0 ];then<br>        /usr/local/nginx/sbin/nginx<br>        sleep 2<br>        if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then<br>            killall keepalived<br>        fi<br>fi<br></code></pre></td></tr></table></figure><h3 id="从机配置"><a href="#从机配置" class="headerlink" title="从机配置"></a>从机配置</h3><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>1、两台服务器启动ngnix和keepalived</p><p>2、通过配置的虚拟ip访问ngnix</p><p>当主服务器挂掉时，自动切换到从属服务器上，继续提供服务</p><h2 id="ngnix原理"><a href="#ngnix原理" class="headerlink" title="ngnix原理"></a>ngnix原理</h2><hr><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806235035976.png" alt="image-20210806235035976"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806235133412.png" alt="image-20210806235133412"></p><p>在ngnix中，有两个进程，master进程和worker进程</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210806235428523.png" alt="image-20210806235428523"></p><p>一个master多个worker的好处</p><ul><li>可以使用ngnix -s reload进行热部署，当进行热部署时，正在执行任务的worker不会停止服务，会必须执行该任务</li><li> 每个worker来说，是一个独立的进程，不需要加锁，并且当worker宕机，可以继续使用其他worker，高可用</li><li>worker数量和cpu核心数相等适宜</li></ul><p>支持的最大并发数计算(一个并发=一次请求)</p><p>普通的静态访问最大并发数是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">worker_connections</span> * worker_processes /<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>而如果是 HTTP 作 为反向代理来说，最大并发数量应该是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">worker_connections</span> * worker_processes/<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ入门</title>
    <link href="/2021/08/05/%E5%88%86%E5%B8%83%E5%BC%8F-rabbitmq/"/>
    <url>/2021/08/05/%E5%88%86%E5%B8%83%E5%BC%8F-rabbitmq/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ实战教程"><a href="#RabbitMQ实战教程" class="headerlink" title="RabbitMQ实战教程"></a>RabbitMQ实战教程</h1><h2 id="MQ引言"><a href="#MQ引言" class="headerlink" title="MQ引言"></a>MQ引言</h2><hr><h3 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h3><p><code>MQ</code>(Message Quene)：翻译为<code>消息队列</code>，通过典型的<code>生产者</code>和<code>消费者</code>模型。生产者不断向消息队列生产消息，消费者不断的从队列中获取消息。因为生产和消费都是异步的，而且只关心消息的发送与接收，所以可以轻松的实现系统间的解耦。<code>MQ</code>又称为<code>消息中间件</code>，通过利用高效可高的消息传递机制进行平台文官的数据交流，并基于数据通信来进行分布式系统的集成。</p><p>我们以简单的订单支付场景为例：比如说电商业务中最常见的「订单支付」场景：在订单支付成功后，需要更新订单状态、更新用户积分、通知商家有新订单、更新推荐系统中的用户画像等等。</p><p><img src="https://pic2.zhimg.com/50/v2-b0b81fcf533970cd71d23a85ec266e5b_720w.jpg?source=1940ef5c" alt="img"></p><p>引入 MQ 后，订单支付现在只需要关注它最重要的流程：更新订单状态即可。其他不重要的事情全部交给 MQ 来通知。这便是 MQ 解决的最核心的问题：系统解耦。</p><p>改造前订单系统依赖 3 个外部系统，改造后仅仅依赖 MQ，而且后续业务再扩展（比如：营销系统打算针对支付用户奖励优惠券），也不涉及订单系统的修改，从而保证了核心流程的稳定性，降低了维护成本。</p><p>上面这个例子可以看出使用MQ的好处</p><p>现在比较主流的消息中间件有</p><ul><li><code>ActiveMQ</code></li><li><code>RabbitMQ</code></li><li><code>Kafka</code></li><li>以及阿里的<code>RocketMQ</code></li></ul><h3 id="不同MQ的特点"><a href="#不同MQ的特点" class="headerlink" title="不同MQ的特点"></a>不同MQ的特点</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210803125137338.png" alt="image-20210803125137338"></p><blockquote><p>RabbitMQ比Kafka更可靠，Kafka更适合高IO吞吐量的处理，一般应用在大数据日志处理或对实时性、可靠性要求较低的场景</p></blockquote><h2 id="RabbitMQ引言"><a href="#RabbitMQ引言" class="headerlink" title="RabbitMQ引言"></a>RabbitMQ引言</h2><hr><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>异步处理</p><p><img src="https://img-blog.csdnimg.cn/20201030225723665.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuaXF1ZV9wZXJmZWN0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等 着其发送完成才显示注册成功,应该是写入数据库后就返回. 消息队 列: 引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理</p></blockquote><p>应用解耦</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210805213558004.png" alt="image-20210805213558004"></p><blockquote><p>订单系统:用户下单后,订单系统完成持久化处理,将消息写入消息队列, 返回用户订单下单成功。 库存系统:订阅下单的消息,获取下单消息,进行库操作。 就算库存系统出现故障,消息队列也能保证消息的可靠投递, 不会导致消息丢失.</p></blockquote><p>流量削峰</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210805213639460.png" alt="image-20210805213639460"></p><blockquote><p>1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度 超过最大值,则直接抛弃用户请求或跳转到错误页面.</p><p>2.秒杀业务根据消息队列中的请求信息，再做后续处理.</p></blockquote><p>基于AMQP协议，erlang语言开发，是部署最广泛的消息中间件，是最受欢迎的开源消息中间件之一</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># AMQP 协议</span><br> AMQP（advanced message queuing protocol）在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQPprovider天然性就是跨平台的。以下是AMQP协议模型:<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/20201030175435428.png" alt="在这里插入图片描述"></p><h2 id="RabbitMQ配置"><a href="#RabbitMQ配置" class="headerlink" title="RabbitMQ配置"></a>RabbitMQ配置</h2><hr><h3 id="基本的管理命名行"><a href="#基本的管理命名行" class="headerlink" title="基本的管理命名行"></a>基本的管理命名行</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804105401608.png"></p><h3 id="web管理界面"><a href="#web管理界面" class="headerlink" title="web管理界面"></a>web管理界面</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804110436708.png" alt="image-20210804110436708"></p><h2 id="RabbitMQ的第一个程序"><a href="#RabbitMQ的第一个程序" class="headerlink" title="RabbitMQ的第一个程序"></a>RabbitMQ的第一个程序</h2><hr><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1、增添一个虚拟主机/bobo</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804111815397.png" alt="image-20210804111815397"></p><p>2、增添一个用户</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804111855445.png" alt="image-20210804111855445"></p><p>3、虚拟主机与用户绑定</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804111922148.png" alt="image-20210804111922148"></p><h3 id="直连模型"><a href="#直连模型" class="headerlink" title="直连模型"></a>直连模型</h3><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804112222713.png" alt="image-20210804112222713" style="zoom:150%;" /><ul><li>p：生产者，也就是要发送信息的程序</li><li>c：消费者 ，消息的接收者，等待消息的到来</li><li>quene：消息队列，类似于一个邮箱，可以缓存消息，生产者向其中投递消息，消费者从其中取出消息</li></ul><h4 id="开发生产者"><a href="#开发生产者" class="headerlink" title="开发生产者"></a>开发生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 生产者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-08-04 11:24</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">Provider</span></span>&#123;<br>    <span class="hljs-comment">//生产消息</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendMessage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">//创建mq连接工厂对象</span><br>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;42.194.129.172&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>        <span class="hljs-comment">//设置连接哪个虚拟主机</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/bobo&quot;</span>);<br>        <span class="hljs-comment">//设置访问虚拟主机的用户名和密码</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;bobo&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-comment">//获取连接对象</span><br>        Connection connection = connectionFactory.newConnection();<br>        <span class="hljs-comment">//通过连接获取通道对象</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">//通道绑定消息队列</span><br>        <span class="hljs-comment">/** 参数1：队列名称 如果不存在则手动创建</span><br><span class="hljs-comment">         *  参数2：用来设置队列特性是否要持久化(服务重启队列是否会丢失) 消息会消失</span><br><span class="hljs-comment">         *  参数3：是否独占队列</span><br><span class="hljs-comment">         *  参数4：是否在消费完成后自动删除队列</span><br><span class="hljs-comment">         *  参数5：额外参数</span><br><span class="hljs-comment">         * */</span><br>        channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">//发布消息</span><br>        <span class="hljs-comment">/** 参数1：交换机名称</span><br><span class="hljs-comment">         *  参数2：队列名称</span><br><span class="hljs-comment">         *  参数3：传递的消息的额外设置</span><br><span class="hljs-comment">         *  参数4：消息的具体内容</span><br><span class="hljs-comment">         * */</span><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;hello rabbitmq&quot;</span>.getBytes());<br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="开发消费者"><a href="#开发消费者" class="headerlink" title="开发消费者"></a>开发消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消费者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-08-04 11:42</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">//创建连接工厂</span><br>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;42.194.129.172&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>        <span class="hljs-comment">//设置连接哪个虚拟主机</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/bobo&quot;</span>);<br>        <span class="hljs-comment">//设置访问虚拟主机的用户名和密码</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;bobo&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-comment">//获取连接对象</span><br>        Connection connection = connectionFactory.newConnection();<br>        <span class="hljs-comment">//通过连接获取通道对象</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">//绑定队列</span><br>        channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">//消费队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：指定要消费哪个队列</span><br><span class="hljs-comment">         * 参数2：是否开启消息的自动确认机制</span><br><span class="hljs-comment">         * 参数3：消费时的回调接口</span><br><span class="hljs-comment">         * */</span><br>        channel.basicConsume(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;<br>            <span class="hljs-comment">//处理回调</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>      <span class="hljs-comment">//在customer端一般不关闭connection和channel，让该程序一直监听quene</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: RabbitMQ工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-08-04 12:35</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQUtils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConnectionFactory connectionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">//创建mq连接工厂对象</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;42.194.129.172&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>        <span class="hljs-comment">//设置连接哪个虚拟主机</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/bobo&quot;</span>);<br>        <span class="hljs-comment">//设置访问虚拟主机的用户名和密码</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;bobo&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//提供连接对象的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取连接对象</span><br>            <span class="hljs-keyword">return</span> connectionFactory.newConnection();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//关闭通道 关闭连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeConnectionAndChanel</span><span class="hljs-params">(Channel channel, Connection connection)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (channel != <span class="hljs-keyword">null</span>) &#123;<br>                channel.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>                connection.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="任务模型"><a href="#任务模型" class="headerlink" title="任务模型"></a>任务模型</h3><p><code>work quenes </code> ,也被称为(Task quenes)，任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息会堆积越来越多，无法即时处理，此时可以使用work模型：让多个消费者绑定到一个队列，共同消费队列中的消息。队列中的消息一旦消费完毕，就会消失，因此任务不会被重复执行。</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804135718797.png" alt="image-20210804135718797"></p><p>角色：</p><ul><li>P：生产者：任务的发布者</li><li>C1：消费者，领取任务并完成任务，假设完成速度较慢</li><li>C2：消费者2，领取任务并完成任务，假设完成速度较快</li></ul><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 生产者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-08-04 14:01</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Provider</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//获取连接对象</span><br>        Connection connection = RabbitMQUtils.getConnection();<br>        <span class="hljs-comment">//获取通道</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">//通过通道声明队列</span><br>        channel.queueDeclare(<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-keyword">true</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">//发布消息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-keyword">null</span>,(i+<span class="hljs-string">&quot;hello work quene&quot;</span>).getBytes());<br>        &#125;<br>        <span class="hljs-comment">//释放资源</span><br>        RabbitMQUtils.closeConnectionAndChanel(channel,connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消费者1"><a href="#消费者1" class="headerlink" title="消费者1"></a>消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消费者1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-08-04 14:17</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        channel.queueDeclare(<span class="hljs-string">&quot;work&quot;</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        channel.basicConsume(<span class="hljs-string">&quot;work&quot;</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;消费者-1：&quot;</span>+<span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消费者2"><a href="#消费者2" class="headerlink" title="消费者2"></a>消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消费者2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-08-04 14:17</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        channel.queueDeclare(<span class="hljs-string">&quot;work&quot;</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        channel.basicConsume(<span class="hljs-string">&quot;work&quot;</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;消费者-2：&quot;</span> + <span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804142336921.png" alt="image-20210804142336921"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804142354910.png" alt="image-20210804142354910"></p><blockquote><p>默认情况下：RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会相同数量的消息，这种分发的模式称为循环</p></blockquote><p>在这种情况下， 如果某个消费者执行的较慢的话，会导致消息的堆积</p><p>正常情况下应该是能者多劳(处理快的多处理一些)</p><p>改进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.basicQos(<span class="hljs-number">1</span>);<span class="hljs-comment">//一次只接受一条未确认消息</span><br>channel.basicConsume(<span class="hljs-string">&quot;work&quot;</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;<br>    <span class="hljs-comment">//参数2：关闭自动确认消息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;消费者-2：&quot;</span> + <span class="hljs-keyword">new</span> String(body));<br><span class="hljs-comment">//确认消息</span><br>channel.basicAck(envelope.getDeliveryTag(),<span class="hljs-keyword">false</span>);<span class="hljs-comment">//手动确认消息</span><br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>设置通道一次只能消费一个消息</li><li>关闭消息的自动确认，开启手动后确认消息</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804174720986.png" alt="image-20210804174720986"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804174727361.png" alt="image-20210804174727361"></p><h3 id="广播模型-fanout"><a href="#广播模型-fanout" class="headerlink" title="广播模型(fanout)"></a>广播模型(fanout)</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804174902895.png" alt="image-20210804174902895"></p><p>在广播模式下，消费者发送流程为：</p><ul><li>可以有多个消费者</li><li>每个消费者有自己的队列</li><li>每个队列都要绑定到Exchange(交换机)</li><li>生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>交换机把消息发送给绑定过的所有队列</li><li>队列的消费者都能拿到消息，实现一条消息被多个消费者消费</li></ul><h4 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 生产者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-08-04 17:55</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Provider</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">//将通道声明指定的交换机</span><br>        <span class="hljs-comment">//参数1：交换机名称</span><br>        <span class="hljs-comment">//参数2：指定交换机类型 这里要使用广播必须指定为fanout</span><br>        channel.exchangeDeclare(<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;fanout&quot;</span>);<br>        <span class="hljs-comment">//发送消息</span><br>        channel.basicPublish(<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;fanout tyoe message&quot;</span>.getBytes());<br>        RabbitMQUtils.closeConnectionAndChanel(channel,connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消费者。。。"><a href="#消费者。。。" class="headerlink" title="消费者。。。"></a>消费者。。。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">//通道绑定交换机</span><br>        channel.exchangeDeclare(<span class="hljs-string">&quot;logs&quot;</span>, <span class="hljs-string">&quot;fanout&quot;</span>);<br>        <span class="hljs-comment">//临时队列</span><br>        String queue = channel.queueDeclare().getQueue();<br>        <span class="hljs-comment">//通道绑定交换机和队列</span><br>        channel.queueBind(queue, <span class="hljs-string">&quot;logs&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//消费消息</span><br>        channel.basicConsume(queue,<span class="hljs-keyword">true</span>,<span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;消费者_&quot;</span>+<span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后面多声明几个消费者</p><p>运行的结果是多个消费者都会受到生产者发送的消息</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804183721781.png" alt="image-20210804183721781"></p><h3 id="路由模型（Direct）"><a href="#路由模型（Direct）" class="headerlink" title="路由模型（Direct）"></a>路由模型（Direct）</h3><p>在Fanout模式下，一条信息，会被所有订阅的队列都消费，这种模式下，不能满足不同的消息被不同的队列消费</p><p>在Direct模型下：</p><ul><li>队列与交换机绑定，不是任意绑定的，需要制定一个RoutingKey</li><li>消息在发送方向交换机发送消息时，也必须指定消息的RoutingKey</li><li>交换机不再把消息交给每一个绑定的队列，而是根据消息的Routing Key进行判断，只有队列的RoutingKey与消息Routing key完全一致，才会接受到消息</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210804183049409.png" alt="image-20210804183049409"></p><h4 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 生产者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-08-04 18:41</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Provider</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        <span class="hljs-comment">//获取通道</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">//通过通道声明交换机 交换机名称  路由模式</span><br>        channel.exchangeDeclare(<span class="hljs-string">&quot;log_direct&quot;</span>, <span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-comment">//发送消息</span><br>        String routingkey = <span class="hljs-string">&quot;info&quot;</span>;<br>        channel.basicPublish(<span class="hljs-string">&quot;log_direct&quot;</span>, routingkey, <span class="hljs-keyword">null</span>, (<span class="hljs-string">&quot;这是direct模式发布的基于routingkey：&quot;</span> + routingkey + <span class="hljs-string">&quot;发送的消息&quot;</span>).getBytes());<br>        <span class="hljs-comment">//关闭资源</span><br>        RabbitMQUtils.closeConnectionAndChanel(channel, connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消费者1-1"><a href="#消费者1-1" class="headerlink" title="消费者1"></a>消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Costomer1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">//通道生交换机及类型</span><br>        channel.exchangeDeclare(<span class="hljs-string">&quot;log_direct&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-comment">//创建临时队列</span><br>        String queue = channel.queueDeclare().getQueue();<br>        <span class="hljs-comment">//基于route key绑定交换机</span><br>        channel.queueBind(queue,<span class="hljs-string">&quot;log_direct&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>);<br>        <span class="hljs-comment">//获取消费的消息</span><br>        channel.basicConsume(queue,<span class="hljs-keyword">true</span>,<span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;消费者1&quot;</span>+<span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消费者2-1"><a href="#消费者2-1" class="headerlink" title="消费者2"></a>消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消费者2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-08-04 18:47</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">//通道生交换机及类型</span><br>        channel.exchangeDeclare(<span class="hljs-string">&quot;log_direct&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-comment">//创建临时队列</span><br>        String queue = channel.queueDeclare().getQueue();<br>        <span class="hljs-comment">//基于route key绑定交换机</span><br>        channel.queueBind(queue,<span class="hljs-string">&quot;log_direct&quot;</span>,<span class="hljs-string">&quot;info&quot;</span>);<br>        channel.queueBind(queue,<span class="hljs-string">&quot;log_direct&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>);<br>        channel.queueBind(queue,<span class="hljs-string">&quot;log_direct&quot;</span>,<span class="hljs-string">&quot;warning&quot;</span>);<br>        <span class="hljs-comment">//获取消费的消息</span><br>        channel.basicConsume(queue,<span class="hljs-keyword">true</span>,<span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;消费者2&quot;</span>+<span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样如果生产者发送routekey为error的信息，消费者1和2都能收到，发送info，warning的只有消费者2能收到</p><h2 id="SpringBoot中集成RabbitMQ"><a href="#SpringBoot中集成RabbitMQ" class="headerlink" title="SpringBoot中集成RabbitMQ"></a>SpringBoot中集成RabbitMQ</h2><hr><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">springboot_rabbitmq</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">42.194</span><span class="hljs-number">.129</span><span class="hljs-number">.172</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">ems</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/ems</span><br></code></pre></td></tr></table></figure><h3 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringRabbitmqApplicationTests</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testHello</span><span class="hljs-params">()</span> </span>&#123;<br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hello world&quot;</span>);<br>        <span class="hljs-comment">/** 生产端没有指定交换机只有routingKey和Object</span><br><span class="hljs-comment">         * 消费方产生hello队列，放在默认的交换机(AMQP default)上。</span><br><span class="hljs-comment">         * 而默认的交换机有一个特点，只要你的routerKey的名字与这个</span><br><span class="hljs-comment">         * 交换机的队列有相同的名字，他就会自动路由上。</span><br><span class="hljs-comment">         * 生产端routingKey 叫hello ，消费端生产hello队列。他们就路由上了</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RabbitListener(queuesToDeclare = @Queue(value = &quot;hello&quot;))</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloCustomer</span> </span>&#123;<br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message = &quot;</span>+message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="topic订阅模型"><a href="#topic订阅模型" class="headerlink" title="topic订阅模型"></a>topic订阅模型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//生产者</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplicationTests</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;user.save.findAll&quot;</span>,<span class="hljs-string">&quot;user.save.findAll 的消息&quot;</span>);<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//消费者</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkCustomer</span> </span>&#123;<br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,</span><br><span class="hljs-meta">                    key = &#123;&quot;user.*&quot;&#125;,</span><br><span class="hljs-meta">                    exchange = @Exchange(type = &quot;topic&quot;,name = &quot;topics&quot;)</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive1</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message1 = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,</span><br><span class="hljs-meta">                    key = &#123;&quot;user.#&quot;&#125;,</span><br><span class="hljs-meta">                    exchange = @Exchange(type = &quot;topic&quot;,name = &quot;topics&quot;)</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive2</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message2 = &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="RabbitMQ集群架构"><a href="#RabbitMQ集群架构" class="headerlink" title="RabbitMQ集群架构"></a>RabbitMQ集群架构</h2><hr><h3 id="普通集群-副本集群"><a href="#普通集群-副本集群" class="headerlink" title="普通集群(副本集群)"></a>普通集群(副本集群)</h3><h4 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210805214401251.png" alt="image-20210805214401251"></p><p>解决了当集群中某一时刻master节点宕机，可以切换到从节点，必须提供服务</p><p>如果主节点宕机了，就切换到备用节点，但并<code>不能</code>保证数据的不丢失，因为只同步了<code>交换机</code>(不能故障转移)</p><p>比如当主节点宕机后，不能通过从节点访问队列中的信息，主节点恢复后消息队列中的消息久没了</p><p>当主节点正常运行时，可以通过从节点消费队列中的消息</p><h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><p>这里环境中使用的三台服务器分别作为三个节点</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">node1: 10.15.0.3  mq1  master 主节点</span><br><span class="hljs-code">node2: 10.15.0.4  mq2  repl1  副本节点</span><br><span class="hljs-code">node3: 10.15.0.5  mq3  repl2  副本节点</span><br><span class="hljs-code"></span><br><span class="hljs-code"># 1.克隆三台机器主机名和ip映射</span><br><span class="hljs-code">vim /etc/hosts加入:</span><br><span class="hljs-code">10.15.0.3 mq1</span><br><span class="hljs-code">    10.15.0.4 mq2</span><br><span class="hljs-code">    10.15.0.5 mq3</span><br><span class="hljs-code">node1: vim /etc/hostname 加入:  mq1</span><br><span class="hljs-code">node2: vim /etc/hostname 加入:  mq2</span><br><span class="hljs-code">node3: vim /etc/hostname 加入:  mq3</span><br><span class="hljs-code"></span><br><span class="hljs-code"># 2.三个机器安装rabbitmq,并同步cookie文件,在node1上执行:</span><br><span class="hljs-code">scp /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/</span><br><span class="hljs-code">scp /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/</span><br><span class="hljs-code"></span><br><span class="hljs-code"># 3.查看cookie是否一致:</span><br><span class="hljs-code">node1: cat /var/lib/rabbitmq/.erlang.cookie </span><br><span class="hljs-code">node2: cat /var/lib/rabbitmq/.erlang.cookie </span><br><span class="hljs-code">node3: cat /var/lib/rabbitmq/.erlang.cookie </span><br><span class="hljs-code"></span><br><span class="hljs-code"># 4.后台启动rabbitmq所有节点执行如下命令,启动成功访问管理界面:</span><br><span class="hljs-code">rabbitmq-server -detached </span><br><span class="hljs-code"></span><br><span class="hljs-code"># 5.在node2和node3执行加入集群命令:</span><br><span class="hljs-code">1.关闭       rabbitmqctl stop_app</span><br><span class="hljs-code">2.加入集群    rabbitmqctl join_cluster rabbit@mq1</span><br><span class="hljs-code">3.启动服务    rabbitmqctl start_app</span><br><span class="hljs-code"></span><br><span class="hljs-code"># 6.查看集群状态,任意节点执行:</span><br><span class="hljs-code">rabbitmqctl cluster_status</span><br><span class="hljs-code"></span><br><span class="hljs-code"># 7.如果出现如下显示,集群搭建成功:</span><br><span class="hljs-code">Cluster status of node rabbit@mq3 ...</span><br><span class="hljs-code">[&#123;nodes,[&#123;disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;]&#125;,</span><br><span class="hljs-code">&#123;running_nodes,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;,</span><br><span class="hljs-code">&#123;cluster_name,&lt;&lt;&quot;rabbit@mq1&quot;&gt;&gt;&#125;,</span><br><span class="hljs-code">&#123;partitions,[]&#125;,</span><br><span class="hljs-code">&#123;alarms,[&#123;rabbit@mq1,[]&#125;,&#123;rabbit@mq2,[]&#125;,&#123;rabbit@mq3,[]&#125;]&#125;]</span><br><span class="hljs-code"></span><br><span class="hljs-code"># 8.登录管理界面,展示如下状态:</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h3 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h3><h4 id="集群架构图-1"><a href="#集群架构图-1" class="headerlink" title="集群架构图"></a>集群架构图</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210805215038719.png" alt="image-20210805215038719"></p><p>镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或者服务的不可用的情况，提升MQ集群的整体高可用性</p><h4 id="集群搭建-1"><a href="#集群搭建-1" class="headerlink" title="集群搭建"></a>集群搭建</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 0.策略说明</span><br>rabbitmqctl set<span class="hljs-emphasis">_policy [-p <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">vhost</span>&gt;</span></span>] [--priority <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">priority</span>&gt;</span></span>] [--apply-to <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">apply-to</span>&gt;</span></span>] <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span></span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span></span>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">definition</span>&gt;</span></span></span><br><span class="hljs-emphasis">-p Vhost： 可选参数，针对指定vhost下的queue进行设置</span><br><span class="hljs-emphasis">Name:     policy的名称</span><br><span class="hljs-emphasis">Pattern: queue(队列)的匹配模式(正则表达式)</span><br><span class="hljs-emphasis">Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode</span><br><span class="hljs-emphasis">ha-mode:指明镜像队列的模式，有效值为 all/exactly/nodes</span><br><span class="hljs-emphasis">all：表示在集群中所有的节点上进行镜像</span><br><span class="hljs-emphasis">exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定</span><br><span class="hljs-emphasis">nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定</span><br><span class="hljs-emphasis">ha-params：ha-mode模式需要用到的参数</span><br><span class="hljs-emphasis">ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual</span><br><span class="hljs-emphasis">    priority：可选参数，policy的优先级</span><br><span class="hljs-emphasis">      </span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.查看当前策略</span><br>rabbitmqctl list<span class="hljs-emphasis">_policies</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 2.添加策略</span><br><span class="hljs-emphasis">rabbitmqctl set_</span>policy ha-all &#x27;^hello&#x27; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27; <br>说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列<br><br><span class="hljs-section"># 3.删除策略</span><br>rabbitmqctl clear<span class="hljs-emphasis">_policy ha-all</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 4.测试集群</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210805225846242.png" alt="image-20210805225846242"></p><p>现在，这几个节点都可以消费信息</p><p>当主节点宕机时，该消息还是可用的，可以通过从节点继续访问该信息，实现了高可用</p><p>即主节点宕机后，只要从节点不宕机，还是可以正常提供服务的</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot-一些高级特性与原理解析</title>
    <link href="/2021/07/29/springboot-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
    <url>/2021/07/29/springboot-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h2><h3 id="SpringBoot-Actuator"><a href="#SpringBoot-Actuator" class="headerlink" title="SpringBoot Actuator"></a>SpringBoot Actuator</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210802150523519.png" alt="image-20210802150523519"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>1、引入starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、相关配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"># actuator 监控相关配置<br>management:<br>  endpoints:<br>    enabled-by-default: true # 默认开启所有的监控端点<br>    web:<br>      exposure:<br>        include: &#x27;*&#x27; #暴露所有监控端点<br></code></pre></td></tr></table></figure><p>3、访问<a href="http://localhost:8080/actuator">http://localhost:8080/actuator</a></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210802152714195.png" alt="image-20210802152714195"></p><h4 id="监控端点"><a href="#监控端点" class="headerlink" title="监控端点"></a>监控端点</h4><table><thead><tr><th><code>auditevents</code></th><th>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</th></tr></thead><tbody><tr><td><code>beans</code></td><td>显示应用程序中所有Spring Bean的完整列表。</td></tr><tr><td><code>caches</code></td><td>暴露可用的缓存。</td></tr><tr><td><code>conditions</code></td><td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td></tr><tr><td><code>configprops</code></td><td>显示所有<code>@ConfigurationProperties</code>。</td></tr><tr><td><code>env</code></td><td>暴露Spring的属性<code>ConfigurableEnvironment</code></td></tr><tr><td><code>flyway</code></td><td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td></tr><tr><td><code>health</code></td><td>显示应用程序运行状况信息。</td></tr><tr><td><code>httptrace</code></td><td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td></tr><tr><td><code>info</code></td><td>显示应用程序信息。</td></tr><tr><td><code>integrationgraph</code></td><td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td></tr><tr><td><code>loggers</code></td><td>显示和修改应用程序中日志的配置。</td></tr><tr><td><code>liquibase</code></td><td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td></tr><tr><td><code>metrics</code></td><td>显示当前应用程序的“指标”信息。</td></tr><tr><td><code>mappings</code></td><td>显示所有<code>@RequestMapping</code>路径列表。</td></tr><tr><td><code>scheduledtasks</code></td><td>显示应用程序中的计划任务。</td></tr><tr><td><code>sessions</code></td><td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td></tr><tr><td><code>shutdown</code></td><td>使应用程序正常关闭。默认禁用。</td></tr><tr><td><code>startup</code></td><td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td></tr><tr><td><code>threaddump</code></td><td>执行线程转储。</td></tr></tbody></table><p>最常用的Endpoint</p><ul><li><p><strong>Health：监控状况</strong></p></li><li><p><strong>Metrics：运行时指标</strong></p></li><li><p><strong>Loggers：日志记录</strong></p></li></ul><h4 id="Health-Endpoint"><a href="#Health-Endpoint" class="headerlink" title="Health Endpoint"></a>Health Endpoint</h4><p>健康检查端点，我们一般用于在云平台，平台会定时的检查应用的健康状况，我们就需要Health Endpoint可以为平台返回当前应用的一系列组件健康状况的集合。</p><p>重要的几点：</p><ul><li>health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告</li><li>很多的健康检查默认已经自动配置好了，比如：数据库、redis等</li><li>可以很容易的添加自定义的健康检查机制</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/1606908975702-4f9a3208-15ca-4a78-9f76-939ef986db7e.png" alt="image.png"></p><h4 id="Metrics-Endpoint"><a href="#Metrics-Endpoint" class="headerlink" title="Metrics Endpoint"></a>Metrics Endpoint</h4><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到；</p><ul><li>通过Metrics对接多种监控系统</li><li>简化核心Metrics开发</li><li>添加自定义Metrics或者扩展已有Metrics</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/1606909073222-c6e77ca3-4b1c-4f38-a1c6-8614dec4f7bc.png" alt="image.png"></p><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h3><ul><li>默认配置文件  application.yaml；任何时候都会加载</li><li>指定环境配置文件  application-{env}.yaml</li><li>激活指定环境</li><li>配置文件激活</li><li>命令行激活：java -jar xxx.jar –<strong>spring.profiles.active=prod  –person.name=haha</strong></li><li>修改配置文件的任意值，命令行优先**</li><li>默认配置与环境配置同时生效</li><li>同名配置项，profile配置优先</li></ul><p>1、默认配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 默认环境配置文件 在这里指定 可以指定生产或者测试 也可以不指定</span><br><span class="hljs-comment"># 应用名称</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">adminserver</span><br><span class="hljs-comment"># 应用服务 WEB 访问端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8888</span><br><span class="hljs-meta">person.name</span>=<span class="hljs-string">zhangsan</span><br><br><span class="hljs-comment"># 指定为生产环境 默认配置文件和指定环境的配置文件都会生效</span><br><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">prod</span><br><br></code></pre></td></tr></table></figure><p>2、生成配置文件application-prod.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 生产环境配置文件</span><br><span class="hljs-attr">person:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">prod-zhangsan</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">6000</span><br><br></code></pre></td></tr></table></figure><p>3、测试配置文件application-test.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 生产环境配置文件</span><br><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-zhangsan</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">1111</span><br><br></code></pre></td></tr></table></figure><p>注意是通过默认配置文件选择该使用哪个配置文件的，<font color="red">默认配置文件和指定的配置文件都会被加载</font></p><h3 id="条件装配"><a href="#条件装配" class="headerlink" title="条件装配"></a>条件装配</h3><p>即在不同的环境中装配不同的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Profile(&quot;prod&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductionConfiguration</span> </span>&#123;<br><br>    <span class="hljs-comment">// ...</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里表示该配置类在生成环境才会生效，即设置了<code>spring.profile.active=prod</code></p><h3 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h3><p>常用：<strong>Java属性文件</strong>、<strong>YAML文件</strong>、<strong>环境变量</strong>、<strong>命令行参数</strong>；</p><h4 id="配置文件查找位置"><a href="#配置文件查找位置" class="headerlink" title="配置文件查找位置"></a>配置文件查找位置</h4><p>(1) classpath 根路径</p><p>(2) classpath 根路径下config目录</p><p>(3) jar包当前目录</p><p>(4) jar包当前目录的config目录</p><p>(5) /config子目录的直接子目录</p><p>优先级依次上升</p><h4 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h4><ul><li>当前jar包内部的application.properties和application.yml</li><li>当前jar包内部的application-{profile}.properties 和 application-{profile}.yml</li><li>引用的外部jar包的application.properties和application.yml</li><li>引用的外部jar包的application-{profile}.properties 和 application-{profile}.yml</li></ul><p><font color="red">指定环境优先，外部有限，后面的可以覆盖前面的同名配置项</font></p><h3 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h3><p>1、创建atguigu-hello-spring-boot-starter（启动器）</p><p>只需要引入bobo-hello-spring-boot-stater-autoconfigure依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.bobo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>bobo-hello-spring-boot-stater-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个模块可以是一个空maven项目</p><p>2、创建atguigu-hello-spring-boot-starter-autoconfigure（自动配置包）</p><p>2.1、创建service以及pojo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(&quot;bobo.hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String prefix;<br>    <span class="hljs-keyword">private</span> String suffix;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPrefix</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> prefix;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrefix</span><span class="hljs-params">(String prefix)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.prefix = prefix;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSuffix</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> suffix;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSuffix</span><span class="hljs-params">(String suffix)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.suffix = suffix;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    HelloProperties helloProperties;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> helloProperties.getPrefix() + <span class="hljs-string">&quot;:&quot;</span> + username + <span class="hljs-string">&quot;&gt;&quot;</span> + helloProperties.getSuffix();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.2、创建自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConditionalOnMissingBean(HelloService.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(HelloProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServiceAutoConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HelloService <span class="hljs-title">helloService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HelloService();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.3、在resources-META-INF下的spring.factories下 指定项目启动时需要加载的自动配置包</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210802222246634.png" alt="image-20210802222246634"></p><p>这样就可以在其他项目中引入这个自定义starter了</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210802222125727.png" alt="image-20210802222125727"></p><p>使用helloservice这个类</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/%20images/image-20210802222426643.png" alt="image-20210802222426643"></p><h2 id="SpringBoot原理"><a href="#SpringBoot原理" class="headerlink" title="SpringBoot原理"></a>SpringBoot原理</h2><h3 id="SpringApplication初始化创建"><a href="#SpringApplication初始化创建" class="headerlink" title="SpringApplication初始化创建"></a>SpringApplication初始化创建</h3><blockquote><ul><li>保存一些信息。</li><li>判定当前应用的类型。ClassUtils。Servlet</li><li><strong>bootstrappers</strong>：初始启动引导器（<strong>List<Bootstrapper>**）：去spring.factories文件中找org.springframework.boot.**Bootstrapper</strong></li><li>找 <strong>ApplicationContextInitializer</strong>；去<strong>spring.factories</strong>找 <strong>ApplicationContextInitializer</strong></li><li>List&lt;ApplicationContextInitializer&lt;?&gt;&gt; <strong>initializer</strong></li><li>找 <strong>ApplicationListener  ；应用监听器。</strong>去spring.factories找 <strong>ApplicationListener</strong></li><li>List&lt;ApplicationListener&lt;?&gt;&gt; <strong>listeners</strong></li></ul></blockquote><p>把一些关键的组件读取出来，保存在SpringApplication里面</p><h3 id="SpringApplication运行流程"><a href="#SpringApplication运行流程" class="headerlink" title="SpringApplication运行流程"></a>SpringApplication运行流程</h3><p>插眼 后期补上</p>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot-视图解析与模板引擎</title>
    <link href="/2021/07/26/springboot-%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <url>/2021/07/26/springboot-%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210728233135.png" alt="image-20210728233135825"></p><p>上面是springboot支持的视图处理方式</p><h2 id="thymeleaf的基本使用"><a href="#thymeleaf的基本使用" class="headerlink" title="thymeleaf的基本使用"></a>thymeleaf的基本使用</h2><p>1、引入start</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、自动配置好了thymeleaf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(</span><br><span class="hljs-meta">    proxyBeanMethods = false</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;ThymeleafProperties.class&#125;)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123;TemplateMode.class, SpringTemplateEngine.class&#125;)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123;WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThymeleafAutoConfiguration</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>自动配置好的策略</li><li>所有thymeleaf的配置都在ThymeleafProperties</li><li>配置好了SpringTemplateEngine</li><li>配置好了ThymeleafViewResolver</li><li>我们只需要开发页面</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210728234558.png" alt="image-20210728234558926"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.cctv.com&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;link&#125;&quot;</span>&gt;</span>去百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>使用这个模板引擎与jsp类似，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewTestController</span> </span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/thymeleaf&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">thymeTest</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;你好&quot;</span>);<br>        model.addAttribute(<span class="hljs-string">&quot;link&quot;</span>,<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本身已经配置好了，我们直接使用即可</p><h2 id="springboot拦截器"><a href="#springboot拦截器" class="headerlink" title="springboot拦截器"></a>springboot拦截器</h2><h3 id="拦截器的基本使用"><a href="#拦截器的基本使用" class="headerlink" title="拦截器的基本使用"></a>拦截器的基本使用</h3><p>这里的项目需求是配置一个验证是否登录的拦截器</p><p>1、需要实现HandlerInceptor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//登录检查逻辑</span><br>        HttpSession session = request.getSession();<br>        Object loginUser = session.getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>);<br>        <span class="hljs-keyword">if</span> (loginUser != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;请先登录&quot;</span>);<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/&quot;</span>).forward(request,response);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在Config类中进行配置需要拦截的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminWebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> LoginInterceptor()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;/fonts/**&quot;</span>, <span class="hljs-string">&quot;/images/**&quot;</span>, <span class="hljs-string">&quot;/js/**&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里需要注意的是不能拦截静态资源</p><h3 id="拦截器的原理"><a href="#拦截器的原理" class="headerlink" title="拦截器的原理"></a>拦截器的原理</h3><p>1、根据当前请求，找到<strong>HandlerExecutionChain【</strong>可以处理请求的handler以及handler的所有 拦截器】</p><p>2、先来<strong>顺序执行</strong> 所有拦截器的 preHandle方法</p><ul><li>1、如果当前拦截器prehandler返回为true。则执行下一个拦截器的preHandle</li><li>2、如果当前拦截器返回为false。直接    倒序执行所有已经执行了的拦截器的  afterCompletion；</li></ul><p><strong>3、如果任何一个拦截器返回false。直接跳出不执行目标方法</strong></p><p><strong>4、所有拦截器都返回True。执行目标方法</strong></p><p><strong>5、倒序执行所有拦截器的postHandle方法。</strong></p><p><strong>6、前面的步骤有任何异常都会直接倒序触发</strong> afterCompletion</p><p>7、页面成功渲染完成以后，也会倒序触发 afterCompletion</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210729232503.png" alt="image.png"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>1、前端页面编写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/upload&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span></span><br><span class="hljs-tag">                                           <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入邮箱&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span></span><br><span class="hljs-tag">                                           <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span>头像<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;headerImg&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、后端逻辑编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span><br><span class="hljs-function"><span class="hljs-params">                        <span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span><br><span class="hljs-function"><span class="hljs-params">                        <span class="hljs-meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>       System.out.println(email + <span class="hljs-string">&quot;,&quot;</span> + username);<br>       <span class="hljs-keyword">if</span> (!headerImg.isEmpty()) &#123;<br>           <span class="hljs-comment">//保存文件</span><br>           String originalFilename = headerImg.getOriginalFilename();<br>           File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/&quot;</span> + originalFilename);<br>           System.out.println(file.getAbsolutePath());<br>           headerImg.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/&quot;</span> + originalFilename));<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>可以修改默认配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 单个文件上传大小</span><br><span class="hljs-meta">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-comment"># 上传多文件文件带下限制</span><br><span class="hljs-meta">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">100MB</span><br></code></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="默认规则"><a href="#默认规则" class="headerlink" title="默认规则"></a>默认规则</h3><ul><li>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</li><li>对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210730140222.png" alt="image.png"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210730140228.png" alt="image.png"></p><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><p>template 的error文件夹下的4xx、5xx会被自动解析，当发送错误时会自动跳转到4xx或者5xx页面</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210730141101.png" alt="image-20210730141101632"></p><h3 id="错误处理步骤"><a href="#错误处理步骤" class="headerlink" title="错误处理步骤"></a>错误处理步骤</h3><p>1、执行目标方法，目标方法运行期间有任何异常都会被catch，而且标志当前请求结束；并且用DispatchException</p><p>2、进行视图解析流程</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210730175314.png" alt="image-20210730175314797"></p><p>3、处理方法异常，通过processHandlerException，处理handler发送的异常，处理完成返回ModelAndView</p><p>​    a、遍历所有的HandlerExceptionResolver，看谁能处理当前异常</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210730175617.png" alt="image-20210730175617516"></p><p>​    b、系统默认的  异常解析器；</p><p>​            DefaultErrorAttributes先来处理异常。把异常信息保存到request域，并且返回null；</p><p>​            默认没有任何人能处理异常，所以异常会被抛出</p><blockquote><ul><li>如果没有任何人能处理最终底层就会发送 /error 请求。会被底层的BasicErrorController处理</li><li>解析错误视图：遍历所有的ErrorViewResolver 看谁能解析</li><li>默认的 DefaultErrorViewResolver ,作用是把响应状态码作为错误页的地址，error/500.html</li><li>模板引擎最终响应这个页面 error/500.html</li></ul></blockquote><p>​</p><h2 id="web原生组件注入"><a href="#web原生组件注入" class="headerlink" title="web原生组件注入"></a>web原生组件注入</h2><h3 id="使用Servlet-API"><a href="#使用Servlet-API" class="headerlink" title="使用Servlet API"></a>使用Servlet API</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210731133034.png" alt="image-20210731133034015"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;666&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用RegistrationBean"><a href="#使用RegistrationBean" class="headerlink" title="使用RegistrationBean"></a>使用RegistrationBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRegistConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">myServlet</span><span class="hljs-params">()</span></span>&#123;<br>        MyServlet myServlet = <span class="hljs-keyword">new</span> MyServlet();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServletRegistrationBean(myServlet,<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/my02&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">myFilter</span><span class="hljs-params">()</span></span>&#123;<br><br>        MyFilter myFilter = <span class="hljs-keyword">new</span> MyFilter();<br><span class="hljs-comment">//        return new FilterRegistrationBean(myFilter,myServlet());</span><br>        FilterRegistrationBean filterRegistrationBean = <span class="hljs-keyword">new</span> FilterRegistrationBean(myFilter);<br>        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/css/*&quot;</span>));<br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletListenerRegistrationBean <span class="hljs-title">myListener</span><span class="hljs-params">()</span></span>&#123;<br>        MySwervletContextListener mySwervletContextListener = <span class="hljs-keyword">new</span> MySwervletContextListener();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServletListenerRegistrationBean(mySwervletContextListener);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="嵌入式Servlet容器"><a href="#嵌入式Servlet容器" class="headerlink" title="嵌入式Servlet容器"></a>嵌入式Servlet容器</h2><h3 id="切换嵌入式Servlet容器"><a href="#切换嵌入式Servlet容器" class="headerlink" title="切换嵌入式Servlet容器"></a>切换嵌入式Servlet容器</h3><ul><li><p>默认支持的webServer</p><ul><li><code>Tomcat</code>, <code>Jetty</code>, or <code>Undertow</code></li><li><code>ServletWebServerApplicationContext 容器启动寻找ServletWebServerFactory 并引导创建服务器</code></li></ul></li><li><p>切换服务器</p></li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210731143715.png" alt="image.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>原理<ul><li>SpringBoot应用启动发现当前是Web应用。web场景包-导入tomcat</li><li>web应用会创建一个web版的ioc容器 <code>ServletWebServerApplicationContext</code></li><li><code>ServletWebServerApplicationContext</code> 启动的时候寻找 <code>**ServletWebServerFactory**``（Servlet 的web服务器工厂---&gt; Servlet 的web服务器）</code></li><li>SpringBoot底层默认有很多的WebServer工厂；<code>TomcatServletWebServerFactory</code>, <code>JettyServletWebServerFactory</code>, or <code>UndertowServletWebServerFactory</code></li><li><code>底层直接会有一个自动配置类。ServletWebServerFactoryAutoConfiguration</code></li><li><code>ServletWebServerFactoryAutoConfiguration导入了ServletWebServerFactoryConfiguration（配置类）</code></li><li><code>ServletWebServerFactoryConfiguration 配置类 根据动态判断系统中到底导入了那个Web服务器的包。（默认是web-starter导入tomcat包），容器中就有 TomcatServletWebServerFactory</code></li><li><code>TomcatServletWebServerFactory 创建出Tomcat服务器并启动；TomcatWebServer 的构造器拥有初始化方法initialize---this.tomcat.start();</code></li><li><code>内嵌服务器，就是手动把启动服务器的代码调用（tomcat核心jar包存在）</code></li></ul></li></ul><h3 id="定制Servlet容器"><a href="#定制Servlet容器" class="headerlink" title="定制Servlet容器"></a>定制Servlet容器</h3><ul><li><p>实现  <strong>WebServerFactoryCu</strong>stomizer<ConfigurableServletWebServerFactory></p><ul><li>把配置文件的值和<code>**ServletWebServerFactory 进行绑定**</code></li></ul></li><li><p>修改配置文件 <strong>server.xxx</strong></p></li><li><p>直接自定义 <strong>ConfigurableServletWebServerFactory</strong></p></li></ul><p>xxxxxCustomize：定制化器，可以改变xxxx的默认规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;<span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-meta">@Componentpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomizationBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebServerFactoryCustomizer</span>&lt;<span class="hljs-title">ConfigurableServletWebServerFactory</span>&gt; </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">customize</span><span class="hljs-params">(ConfigurableServletWebServerFactory server)</span> </span>&#123;        server.setPort(<span class="hljs-number">9000</span>);    &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="定制化原理"><a href="#定制化原理" class="headerlink" title="定制化原理"></a>定制化原理</h3><p>场景starter-xxxxAutoConfiguration-导入xxx组件-绑定xxxproperties–绑定配置文件项</p><h4 id="定制化方式"><a href="#定制化方式" class="headerlink" title="定制化方式"></a>定制化方式</h4><ul><li>修改配置文件</li><li>xxxxCustomizer</li><li>编写自定义的配置类 xxxConfiguration；+@Bean，增加容器中的默认组件；视图解析器</li><li>web应用实现webmvcConfigurer即可定制化web功能，并通过@bean扩展一些组件</li><li>@EnableWebMvc+WebMvcConfiguer可全面接管SpringMVC，所有规则全部自己重新配置；实现定制和扩展功能</li></ul>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2021/07/25/SSM-SpringMVC/"/>
    <url>/2021/07/25/SSM-SpringMVC/</url>
    
    <content type="html"><![CDATA[<h2 id="回顾MVC"><a href="#回顾MVC" class="headerlink" title="回顾MVC"></a>回顾MVC</h2><ul><li>MCV：模型(dao、service) 视图(Jsp) 控制区(Servlet)</li><li>将业务的逻辑、数据、显示分离来组织代码</li><li>MVC的主要作用是降低视图与业务逻辑间的耦合</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210722210738.png" alt="图片"></p><h2 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h2><h3 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h3><p>Spring的web框架围绕DispatcherServlet设计，DispatcherServlet是将请求分发到不同的处理器，Spring 2.5开始，可以采用注解的Controller声明实现</p><p>SpringMVC也是以请求为驱动，围绕中心Servlet分派请求和提供其他功能，DispatcherServlet也是一个Servlet</p><p>相当于在用户请求不同Servlet加一层DispatcherServlet，这个请求再选择不同的Servlet</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210722234424.png" alt="image-20210722234424818"></p><p>SpringMVC的原理如下图所示：</p><p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210722234731.png" alt="图片"></p><h3 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210723163402.png" alt="图片"></p><ul><li>DispatcherServlet表示前置控制器，是整个MVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求</li></ul><p>​    假设请求的url为：<a href="http://localhost:8080/s2/hello">http://localhost:8080/s2/hello</a></p><blockquote><p>如上url拆分为三部分</p><ul><li><a href="http://localhost:8080服务器域名">http://localhost:8080服务器域名</a></li><li>SpringMVC部署在服务器上的web站点</li><li>hello表示控制器</li><li>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器</li></ul></blockquote><ul><li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li><li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li><li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ul><h2 id="使用注解配置第一个Spring项目"><a href="#使用注解配置第一个Spring项目" class="headerlink" title="使用注解配置第一个Spring项目"></a>使用注解配置第一个Spring项目</h2><p>1、配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截</span><br><span class="hljs-comment">  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>2、配置springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截</span><br><span class="hljs-comment">  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>3、添加hello.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: Yanbo<br>  Date: 2021/7/23<br>  Time: 20:36<br>  To change this template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>拜托 拜托<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>4、编写HelloController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.controller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        <span class="hljs-comment">//封装数据</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,springAnnotation&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<span class="hljs-comment">//会被视图解析器处理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Resful-风格"><a href="#Resful-风格" class="headerlink" title="Resful 风格"></a>Resful 风格</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>RestFul风格就是一个资源定位及资源操作的风格，不是标准也不协议，只是一种风格。基于这个风格设计的软件更加简洁，更有层次，更易于实现缓存</p><p>功能</p><ul><li>资源：互联网所有的事务都可以被抽象为资源</li><li>资源操作：使用POST、DELETE、PUT、GET等不同的方法对资源进行操作</li><li>分别对应添加、删除、修改、查询</li></ul><p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><blockquote><p>​    <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p><p>​    <a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p></blockquote><p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><blockquote><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p></blockquote><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><h4 id="使用method属性指定请求类型"><a href="#使用method属性指定请求类型" class="headerlink" title="使用method属性指定请求类型"></a>使用method属性指定请求类型</h4><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是POST请求</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>   model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello!&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@GetMapping</span><br><span class="hljs-variable">@PostMapping</span><br><span class="hljs-variable">@PutMapping</span><br><span class="hljs-variable">@DeleteMapping</span><br><span class="hljs-variable">@PatchMapping</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = a + b;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果为&quot;</span> + res);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重定向和转发"><a href="#重定向和转发" class="headerlink" title="重定向和转发"></a>重定向和转发</h2><p>通过视图解析器</p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC2</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//转发</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//重定向</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>       <span class="hljs-comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接收前端参数和数据回显"><a href="#接收前端参数和数据回显" class="headerlink" title="接收前端参数和数据回显"></a>接收前端参数和数据回显</h2><h3 id="接收前端请求参数"><a href="#接收前端请求参数" class="headerlink" title="接收前端请求参数"></a>接收前端请求参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/t1&quot;)</span><br>    <span class="hljs-comment">//url上的参数名与形参上的名字一样</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(String name, Model model)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到前端参数：&quot;</span>+name);<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;/t2&quot;)</span><br>    <span class="hljs-comment">//url上的参数名与形参上的名字一样</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name1, Model model)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到前端参数：&quot;</span>+name1);<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name1);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>推荐都把@RequestParam() 这个注解加上，加上这个注解就表示是从前端传递来的参数，约束前端传来的参数名</p><p><strong>当前端传来的是对象时</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    接收前端传递的参数，判断参数的名字，假设名字直接在方法上，可以直接使用</span><br><span class="hljs-comment">//    假设传递的是一个对象User，匹配User字段中的对象名：应该与字段中的属性名一致</span><br>    <span class="hljs-meta">@GetMapping(&quot;/t3&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test3</span><span class="hljs-params">(User user)</span></span>&#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><h3 id="第一种：通过ModelAndView"><a href="#第一种：通过ModelAndView" class="headerlink" title="第一种：通过ModelAndView"></a>第一种：通过ModelAndView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//返回一个模型视图对象</span><br>       ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>       mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest1&quot;</span>);<br>       mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>       <span class="hljs-keyword">return</span> mv;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二种-通过ModelMap"><a href="#第二种-通过ModelMap" class="headerlink" title="第二种 : 通过ModelMap"></a><strong>第二种 : 通过ModelMap</strong></h3><p>ModelMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span></span>&#123;<br>   <span class="hljs-comment">//封装要显示到视图中的数据</span><br>   <span class="hljs-comment">//相当于req.setAttribute(&quot;name&quot;,name);</span><br>   model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,name);<br>   System.out.println(name);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第三种-通过Model"><a href="#第三种-通过Model" class="headerlink" title="第三种 : 通过Model"></a><strong>第三种 : 通过Model</strong></h3><p>Model</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/ct2/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;<br>   <span class="hljs-comment">//封装要显示到视图中的数据</span><br>   <span class="hljs-comment">//相当于req.setAttribute(&quot;name&quot;,name);</span><br>   model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name);<br>   System.out.println(name);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决乱码"><a href="#解决乱码" class="headerlink" title="解决乱码"></a>解决乱码</h3><p>使用spring提供的过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><h3 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h3><p>使用@RestController就可以默认返回一个字符串</p><p>封装一个JackJson的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.utils;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonUtils</span> </span>&#123;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> getJson(object,<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object,String dateFormat)</span> </span>&#123;<br>       ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>       <span class="hljs-comment">//不使用时间戳的方式</span><br>       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);<br>       <span class="hljs-comment">//自定义日期格式对象</span><br>       SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(dateFormat);<br>       <span class="hljs-comment">//指定日期格式</span><br>       mapper.setDateFormat(sdf);<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">return</span> mapper.writeValueAsString(object);<br>      &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>           e.printStackTrace();<br>      &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>比较建议的json格式化工具，不再赘述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/j2&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json2</span><span class="hljs-params">()</span> </span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;bobo&quot;</span>, <span class="hljs-number">18</span>);<br>    String str = JSON.toJSONString(user);<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h2><h3 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h3><p>创建实体类Books</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:书籍实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-07-24 16:46</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Books</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookID;<br>    <span class="hljs-keyword">private</span> String bookName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookCounts;<br>    <span class="hljs-keyword">private</span> String detail;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Books</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Books</span><span class="hljs-params">(<span class="hljs-keyword">int</span> bookID, String bookName, <span class="hljs-keyword">int</span> bookCounts, String detail)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bookID = bookID;<br>        <span class="hljs-keyword">this</span>.bookName = bookName;<br>        <span class="hljs-keyword">this</span>.bookCounts = bookCounts;<br>        <span class="hljs-keyword">this</span>.detail = detail;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getBookID</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBookID</span><span class="hljs-params">(<span class="hljs-keyword">int</span> bookID)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bookID = bookID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBookName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBookName</span><span class="hljs-params">(String bookName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bookName = bookName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getBookCounts</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookCounts;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBookCounts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> bookCounts)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bookCounts = bookCounts;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDetail</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> detail;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDetail</span><span class="hljs-params">(String detail)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.detail = detail;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Books&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;bookID=&quot;</span> + bookID +<br>                <span class="hljs-string">&quot;, bookName=&#x27;&quot;</span> + bookName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, bookCounts=&quot;</span> + bookCounts +<br>                <span class="hljs-string">&quot;, detail=&#x27;&quot;</span> + detail + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>持久层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.dao;<br><br><span class="hljs-keyword">import</span> com.bobo.pojo.Books;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookMapper</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books books)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;bookId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;<br>    <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;bookId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">getBooksList</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryBookByName</span><span class="hljs-params">(String bookName)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--关联数据库连接文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:database.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 关闭连接后不自动commit --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommitOnClose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 获取连接超时时间 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryAttempts&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--绑定mybatis配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置jdbc扫描包 动态实现了Dao接口注入到Spring容器中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入sqlSessionFactory--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--扫描dao包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.bobo.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>database.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置数据源交给spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.bobo.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.dao.BookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>dao 层需要做的主要是将mybatis注入到Spring 容器中</p><h3 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--扫描service下的包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.bobo.service&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--将所有的业务层 注入到spring中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.service.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookMapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--声明式事务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>业务层接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.service;<br><br><span class="hljs-keyword">import</span> com.bobo.dao.BookMapper;<br><span class="hljs-keyword">import</span> com.bobo.pojo.Books;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: book相关操作实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-07-24 17:13</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span></span>&#123;<br>    <span class="hljs-comment">//组合dao</span><br>    <span class="hljs-keyword">private</span> BookMapper bookMapper;<br>    <span class="hljs-comment">//这里通过set进行注入</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBookMapper</span><span class="hljs-params">(BookMapper bookMapper)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bookMapper = bookMapper;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.addBook(books);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.deleteBookById(id);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.updateBook(books);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.queryBookById(id);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title">getBooksList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.getBooksList();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title">queryBookByName</span><span class="hljs-params">(String bookName)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookMapper.queryBookByName(bookName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h3><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置SpringMVC --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 4.扫描web相关的bean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.bobo.controller&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>controller层业务代码编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;bookServiceImpl&quot;)</span> <span class="hljs-comment">//一个接口有多个实现的时候，为了指名具体调用哪个类的实现</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-comment">//查询全部书籍 返回到一个书籍展示页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/allBook&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>        List&lt;Books&gt; booksList = bookService.getBooksList();<br>        model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>, booksList);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allBook&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//跳转到增加书籍页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/toAddPage&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toaddPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;addBook&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//添加书籍的请求</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/addBook&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addBook</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>        bookService.addBook(books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//查询书籍</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/queryBook&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">queryBook</span><span class="hljs-params">(String queryBookName, Model model)</span> </span>&#123;<br>        List&lt;Books&gt; books = bookService.queryBookByName(queryBookName);<br>        model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>,books);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allBook&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置wen.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--encodingFilter--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><br>            org.springframework.web.filter.CharacterEncodingFilter<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>拦截器是SpringMVC框架中自带的，只有使用了SpringMVC框架的工程才能使用</p><p>拦截器智慧拦截访问中的控制器方法(controller中的请求)，如果访问的是jsp/html/css等，不会进行拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">//return true执行下一个拦截器，放行</span><br>    <span class="hljs-comment">//return false不执行下一个拦截器</span><br>    <span class="hljs-comment">//preHandle：在业务处理器处理请求之前被调用。预处理，可以进行编码、安全控制、权限校验等处理；</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;+++++++++++处理前+++++++++&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//在业务处理器处理请求执行完成后，生成视图之前执行。后处理（调用了Service并返回ModelAndView，但未进行页面渲染），有机会修改ModelAndView</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;+++++++++++处理后+++++++++&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//在DispatcherServlet完全处理完请求后被调用，可用于清理资源等。返回处理（已经渲染了页面）；</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;+++++++++++清理+++++++++&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--拦截器配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--包括这个请求下面的所有资源--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.config.MyInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--包括这个请求下面的所有资源--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/user/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.config.LoginInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过spring 对拦截器进行配置</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>首先在spring中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10485760&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>上传方式1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span><br>    <span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException, IOException </span>&#123;<br><br>        <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span><br>        String uploadFileName = file.getOriginalFilename();<br><br>        <span class="hljs-comment">//如果文件名为空，直接回到首页！</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(uploadFileName))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件名 : &quot;</span>+uploadFileName);<br><br>        <span class="hljs-comment">//上传路径保存设置</span><br>        String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>        <span class="hljs-comment">//如果路径不存在，创建一个</span><br>        File realPath = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>            realPath.mkdir();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>        InputStream is = file.getInputStream(); <span class="hljs-comment">//文件输入流</span><br>        OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(realPath,uploadFileName)); <span class="hljs-comment">//文件输出流</span><br><br>        <span class="hljs-comment">//读取写出</span><br>        <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>            os.write(buffer,<span class="hljs-number">0</span>,len);<br>            os.flush();<br>        &#125;<br>        os.close();<br>        is.close();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上传方式2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 采用file.Transto 来保存上传的文件</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/upload2&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String  <span class="hljs-title">fileUpload2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>       <span class="hljs-comment">//上传路径保存设置</span><br>       String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>       File realPath = <span class="hljs-keyword">new</span> File(path);<br>       <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>           realPath.mkdir();<br>       &#125;<br>       <span class="hljs-comment">//上传文件地址</span><br>       System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>       <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span><br>       file.transferTo(<span class="hljs-keyword">new</span> File(realPath +<span class="hljs-string">&quot;/&quot;</span>+ file.getOriginalFilename()));<br><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>下载文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/download&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">downloads</span><span class="hljs-params">(HttpServletResponse response , HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>      <span class="hljs-comment">//要下载的图片地址</span><br>      String  path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>      String  fileName = <span class="hljs-string">&quot;基础语法.jpg&quot;</span>;<br><br>      <span class="hljs-comment">//1、设置response 响应头</span><br>      response.reset(); <span class="hljs-comment">//设置页面不缓存,清空buffer</span><br>      response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">//字符编码</span><br>      response.setContentType(<span class="hljs-string">&quot;multipart/form-data&quot;</span>); <span class="hljs-comment">//二进制传输数据</span><br>      <span class="hljs-comment">//设置响应头</span><br>      response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<br>              <span class="hljs-string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>      File file = <span class="hljs-keyword">new</span> File(path,fileName);<br>      <span class="hljs-comment">//2、 读取文件--输入流</span><br>      InputStream input=<span class="hljs-keyword">new</span> FileInputStream(file);<br>      <span class="hljs-comment">//3、 写出文件--输出流</span><br>      OutputStream out = response.getOutputStream();<br><br>      <span class="hljs-keyword">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>      <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>      <span class="hljs-comment">//4、执行 写出操作</span><br>      <span class="hljs-keyword">while</span>((index= input.read(buff))!= -<span class="hljs-number">1</span>)&#123;<br>          out.write(buff, <span class="hljs-number">0</span>, index);<br>          out.flush();<br>      &#125;<br>      out.close();<br>      input.close();<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5</title>
    <link href="/2021/07/22/SSM-Spring/"/>
    <url>/2021/07/22/SSM-Spring/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="-简介"></a>-简介</h2><h3 id="百科介绍"><a href="#百科介绍" class="headerlink" title="百科介绍"></a>百科介绍</h3><p>Spring框架是由于软件开发](<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/3448966)%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7%E8%80%8C%E5%88%9B%E5%BB%BA%E7%9A%84%E3%80%82Spring%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%E5%9F%BA%E6%9C%AC%E7%9A%84JavaBean%E6%9D%A5%E5%AE%8C%E6%88%90%E4%BB%A5%E5%89%8D%E5%8F%AA%E5%8F%AF%E8%83%BD%E7%94%B1EJB%E5%AE%8C%E6%88%90%E7%9A%84%E4%BA%8B%E6%83%85%E3%80%82%E7%84%B6%E8%80%8C%EF%BC%8CSpring%E7%9A%84%E7%94%A8%E9%80%94%E4%B8%8D%E4%BB%85%E4%BB%85%E9%99%90%E4%BA%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E5%BC%80%E5%8F%91%E3%80%82%E4%BB%8E%E7%AE%80%E5%8D%95%E6%80%A7%E3%80%81%E5%8F%AF%E6%B5%8B%E8%AF%95%E6%80%A7%E5%92%8C%E6%9D%BE%E8%80%A6%E5%90%88%E6%80%A7%E8%A7%92%E5%BA%A6%E8%80%8C%E8%A8%80%EF%BC%8C%E7%BB%9D%E5%A4%A7%E9%83%A8%E5%88%86Java%E5%BA%94%E7%94%A8%E9%83%BD%E5%8F%AF%E4%BB%A5%E4%BB%8ESpring%E4%B8%AD%E5%8F%97%E7%9B%8A%E3%80%82">https://baike.baidu.com/item/软件开发/3448966)的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</a></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>Spring是一个开源的免费框架</li><li>Spring轻量级，非入侵式框架</li><li>控制反转(<strong>IOC</strong>)，面向切面编程(<strong>AOP</strong>)</li><li>支持事务的处理，对框架整合的支持</li></ul><p>总结:Spring是一个轻量级的IOC和AOP框架</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210718220000.png" alt="image-20200821075431512"></p><p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p><ul><li><strong>核心容器</strong>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用<em>控制反转</em>（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li><li><strong>Spring 上下文</strong>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li><li><strong>Spring AOP</strong>：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</li><li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li><li><strong>Spring ORM</strong>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li><li><strong>Spring Web 模块</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li><li><strong>Spring MVC 框架</strong>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210718220017.png" alt="image-20210718220017554"></p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>SpringCloud是基于SpringBoot实现的</li></ul></li></ul><p>学习SpringBoot的前提，需要完全掌握Spring即SpringMVC</p><p>弊端：发展太久了，配置比较繁琐，<code>配置地狱</code></p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="引入控制反转"><a href="#引入控制反转" class="headerlink" title="引入控制反转"></a>引入控制反转</h3><p>新建一个空白的maven项目</p><p>我们先用我们原来的方式写一段代码 .</p><p>1、先写一个UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、再去写Dao的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;获取用户数据&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、然后去写UserService的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、最后写Service的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>       userDao.getUser();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>   UserService service = <span class="hljs-keyword">new</span> UserServiceImpl();<br>   service.getUser();<br>&#125;<br></code></pre></td></tr></table></figure><p>这是我们原来的方式 , 开始大家也都是这么去写的对吧 . 那我们现在修改一下 .</p><p>把Userdao的实现类增加一个 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoMySqlImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;MySql获取用户数据&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>紧接着我们要去使用MySql的话 , 我们就需要去service实现类里面修改对应的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> UserDao userDao = <span class="hljs-keyword">new</span> UserDaoMySqlImpl();<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>       userDao.getUser();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoOracleImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;Oracle获取用户数据&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么我们要使用Oracle , 又需要去service实现类里面修改对应的实现 . 假设我们的这种需求非常大 , 这种方式就根本不适用了, 甚至反人类对吧 , 每次变动 , 都需要修改大量代码 . 这种设计的耦合性太高了, 牵一发而动全身 .</p><p><strong>那我们如何去解决呢 ?</strong></p><p>我们可以在需要用到他的地方 , 不去实现它 , 而是留出一个接口 , 利用set , 我们去代码里修改下 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> UserDao userDao;<br><span class="hljs-comment">// 利用set实现</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.userDao = userDao;<br>  &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>       userDao.getUser();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在去我们的测试类里 , 进行测试 ;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>   UserServiceImpl service = <span class="hljs-keyword">new</span> UserServiceImpl();<br>   service.setUserDao( <span class="hljs-keyword">new</span> UserDaoMySqlImpl() );<br>   service.getUser();<br>   <span class="hljs-comment">//那我们现在又想用Oracle去实现呢</span><br>   service.setUserDao( <span class="hljs-keyword">new</span> UserDaoOracleImpl() );<br>   service.getUser();<br>&#125;<br></code></pre></td></tr></table></figure><p>大家发现了区别没有 ? 可能很多人说没啥区别 . 但是同学们 , 他们已经发生了根本性的变化 , 很多地方都不一样了 . 仔细去思考一下 , 以前所有东西都是由程序去进行控制创建 , 而现在是由我们自行控制创建对象 , 把主动权交给了调用者 . 程序不用去管怎么创建,怎么实现了 . 它只负责提供一个接口 .</p><p>这种思想 , 从本质上解决了问题 , 我们程序员不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型</p><h3 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h3><p>控制反转IOC是一种设计思想，DI(依赖注入)是实现IoC的一种方式，没有IOC的程序中，我们使用面向对象编程，对象的创建和对象之间的依赖关系完全写死在程序中，对象的创建由程序控制，控制反转则将对象的创建移交给第三方，所谓的控制反转就是：获得依赖对象的方式反转了</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210719131925.png" alt="image-20210719131925172"></p><p>Spring中使用XML或者注解可以实现IoC，新版的Sping也可以零配置实现IoC</p><p>所谓的控制反转就是通过描述(XML或者注解)并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，实现的方式是依赖注入(Dependency Injdection,DI)</p><p>1、编写一个Hello实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> String name;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> name;<br>  &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.name = name;<br>  &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;Hello,&quot;</span>+ name );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、编写我们的spring文件 , 这里我们命名为beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;!--suppress SpringFacetInspection --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--bean就是java对象 , 由Spring创建和管理--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里就相当于new了一个hello对象--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        id对应可变量名</span><br><span class="hljs-comment">        class = new 的对象</span><br><span class="hljs-comment">        property相当于给对象的属性设置一个值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.pojo.Hello&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-comment">//解析beans.xml文件 , 生成管理相应的Bean对象</span><br>   ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>   <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span><br>   Hello hello = (Hello) context.getBean(<span class="hljs-string">&quot;hello&quot;</span>);<br>   hello.show();<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里是通过编写xml配置文件，由Spring生成对象，由Spring容器设置对象的属性，这就是控制反转</p><p>这个过程就叫控制反转 :</p><ul><li>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的</li><li>反转 : 程序本身不创建对象 , 而变成被动的接收对象 .</li></ul><p>依赖注入 : 就是利用set方法来进行注入的.</p><p>IOC是一种编程思想，由主动的编程变成被动的接收</p><p>这样就不需要在程序中去改动了，要实现不同的操作，只需要在xml配置文件中进行修改，所谓的IoC，对象由Spring来创建、管理、装配</p><h3 id="IOC创建对象方式"><a href="#IOC创建对象方式" class="headerlink" title="IOC创建对象方式"></a>IOC创建对象方式</h3><p>1、使用无参构造创建对象(默认)</p><p>2、通过有参构造方式</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 第一种根据index参数下标设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.UserT&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- index指构造方法 , 下标从0开始 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;kuangshen2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 第二种根据参数名字设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.UserT&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- name指参数名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;kuangshen2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span><br><span class="hljs-comment">&lt;!-- 这种方式不建议使用户 当有参构造有几个相同类型的参数时 就不可以用了 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.UserT&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;kuangshen2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>总结</p></blockquote><p>在配置文件加载的时候，容器中管理的对象就已经被初始化了</p><h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><h3 id="bean的配置"><a href="#bean的配置" class="headerlink" title="bean的配置"></a>bean的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   id:bean的唯一标识符 相当于我们学的对象名</span><br><span class="hljs-comment">   class:bean对象所对应的全限定名:包名+类型</span><br><span class="hljs-comment">   name:别名 可以取多个别名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.pojo.User&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user2,u2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bobo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>多个配置文件进行合并 导入合并为一个</p><p>团队的合作通过import来实现 .</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;path&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/beans.xml&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><h3 id="通过set方式注入【重点】"><a href="#通过set方式注入【重点】" class="headerlink" title="通过set方式注入【重点】"></a>通过set方式注入【重点】</h3><p>依赖注入：Set注入</p><ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中所有属性，由容器来注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       id:bean的唯一标识符 相当于我们学的对象名</span><br><span class="hljs-comment">       class:bean对象所对应的全限定名:包名+类型</span><br><span class="hljs-comment">       name:别名 可以取多个别名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.pojo.Address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重庆邮电大学&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.pojo.Student&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第一种 普通类型注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bobo&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--第二种 bean注入 ref--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--第三种 数组注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第四种 List注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbys&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>写代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第五种 Map注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;身份证&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;学生证&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;101&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第六种 Set注入 ref--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;game&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>LOL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>DNF<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--空值注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--property注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;学号&quot;</span>&gt;</span>103<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="扩展方式"><a href="#扩展方式" class="headerlink" title="扩展方式"></a>扩展方式</h3><h4 id="p命名空间和c命名空间注入"><a href="#p命名空间和c命名空间注入" class="headerlink" title="p命名空间和c命名空间注入"></a>p命名空间和c命名空间注入</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210719202622.png" alt="image-20210719202621916"></p><p>注意点：p命名和c命名不能直接使用，需要导入xml约束</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210719202845.png" alt="image-20210719202845188"></p><h2 id="bean作用域"><a href="#bean作用域" class="headerlink" title="bean作用域"></a>bean作用域</h2><p>Spring 3中为Bean定义了5中作用域，分别为singleton（单例）、prototype（原型）、request、session和global session，5种作用域说明如下：</p><h3 id="单例作用域"><a href="#单例作用域" class="headerlink" title="单例作用域"></a>单例作用域</h3><p>是默认的作用域</p><p>单例模式，Spring IoC容器中只会存在一个共享的Bean实例，无论有多少个Bean引用它，始终指向同一对象。Singleton作用域是Spring中的缺省作用域，也可以显示的将Bean定义为singleton模式，配置为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.pojo.Student&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>每次通过Spring容器获取prototype定义的bean时，容器都将创建一个新的Bean实例，每个Bean实例都有自己的属性和状态，而singleton全局只有一个对象。根据经验，对有状态的bean使用prototype作用域，而对无状态的bean使用singleton作用域。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.pojo.Student&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="request-session-application"><a href="#request-session-application" class="headerlink" title="request session application"></a>request session application</h3><p>在web开发中使用到</p><h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><p>自动装配是Spring满足bean依赖一种方式！</p><p>Spring会在上下文中自动寻找，并自动给bean装配属性</p><p>Spring中有三种装配方式</p><ol><li>在xml中显式的配置</li><li>在java中配置</li><li>隐式的自动装配bean【重要】</li></ol><h3 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.pojo.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid</p><p>如上所示，由于配置IDEbean的id分别为cat和dog，与People中的属性值cat、dog相同，所以会自动装配</p><h3 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>会自动在容器上下文中查找，和自己对象属性类型相同的bean</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210719214809.png" alt="image-20210719214809758"></p><h3 id="注解实现自动装配"><a href="#注解实现自动装配" class="headerlink" title="注解实现自动装配"></a>注解实现自动装配</h3><p>使用注解</p><p>jdk1.5开始支持注解，spring2.5开始全面支持注解。</p><p>准备工作：利用注解的方式注入属性。</p><p>1、在spring配置文件中引入context文件头</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br><br>http://www.springframework.org/schema/context<br>http://www.springframework.org/schema/context/spring-context.xsd<br></code></pre></td></tr></table></figure><p>2、开启属性注解支持！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><ul><li>@Autowired是按类型自动转配的，不支持id匹配。</li><li>需要导入 spring-aop的包！</li></ul><p>测试：</p><p>1、将User类中的set方法去掉，使用@Autowired注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> Cat cat;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> Dog dog;<br>   <span class="hljs-keyword">private</span> String str;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Cat <span class="hljs-title">getCat</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> cat;<br>  &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">getDog</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> dog;<br>  &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStr</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> str;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、此时配置文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>3、测试，成功输出结果！</p><p>【小狂神科普时间】</p><p>@Autowired(required=false)  说明：false，对象可以为null；true，对象必须存对象，不能为null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果允许对象为null，设置required = false,默认为true</span><br><span class="hljs-meta">@Autowired(required = false)</span><br><span class="hljs-keyword">private</span> Cat cat;<br></code></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><ul><li>@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配</li><li>@Qualifier不能单独使用。</li></ul><p>测试实验步骤：</p><p>1、配置文件修改内容，保证类型存在对象。且名字不为类的默认名字！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>2、没有加Qualifier测试，直接报错</p><p>3、在属性上添加Qualifier注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(value = &quot;cat2&quot;)</span><br><span class="hljs-keyword">private</span> Cat cat;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(value = &quot;dog2&quot;)</span><br><span class="hljs-keyword">private</span> Dog dog;<br></code></pre></td></tr></table></figure><p>测试，成功输出！</p><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><ul><li>@Resource如有指定的name属性，先按该属性进行byName方式查找装配；</li><li>其次再进行默认的byName方式进行装配；</li><li>如果以上都不成功，则按byType的方式自动装配。</li><li>都不成功，则报异常。</li></ul><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>   <span class="hljs-comment">//如果允许对象为null，设置required = false,默认为true</span><br>   <span class="hljs-meta">@Resource(name = &quot;cat2&quot;)</span><br>   <span class="hljs-keyword">private</span> Cat cat;<br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> Dog dog;<br>   <span class="hljs-keyword">private</span> String str;<br>&#125;<br></code></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>测试：结果OK</p><p>配置文件2：beans.xml ， 删掉cat2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>实体类上只保留注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> Cat cat;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> Dog dog;<br></code></pre></td></tr></table></figure><p>结果：OK</p><p>结论：先进行byName查找，失败；再进行byType查找，成功。</p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>@Autowired与@Resource异同：</p><p>1、@Autowired与@Resource都可以用来装配bean。都可以写在字段上，或写在setter方法上。</p><p>2、@Autowired默认按类型装配（属于spring规范），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用</p><p>3、@Resource（属于J2EE复返），默认按照名称进行装配，名称可以通过name属性进行指定。如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</p><p>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired先byType，@Resource先byName。</p><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>在spring4之后，想要使用注解形式，必须得要引入aop的包</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IzypAUHDfDEujP4ry6cHxWTvAS6qRS0qrmMCic3QqF9icGNcPj8IZwNo3R9VEgpAgWHrStBN1ya6Tg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>在配置文件当中，还得要引入一个context约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Bean的实现"><a href="#Bean的实现" class="headerlink" title="Bean的实现"></a>Bean的实现</h3><p>我们之前都是使用 bean 的标签进行bean注入，但是实际开发中，我们一般都会使用注解！</p><p>1、配置扫描哪些包下的注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--指定注解扫描包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.pojo&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>2、在指定包下编写类，增加注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">@Component(&quot;user&quot;)<br>// 相当于配置文件中 <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;当前注解的类&quot;</span>/&gt;</span><br>public class User &#123;<br>   public String name = &quot;秦疆&quot;;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>   ApplicationContext applicationContext =<br>       <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>   User user = (User) applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>   System.out.println(user.name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h3><p>使用注解注入属性</p><p>1、可以不用提供set方法，直接在直接名上添加@value(“值”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><br><span class="hljs-comment">// 相当于配置文件中 &lt;bean id=&quot;user&quot; class=&quot;当前注解的类&quot;/&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>   <span class="hljs-meta">@Value(&quot;秦疆&quot;)</span><br>   <span class="hljs-comment">// 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;秦疆&quot;/&gt;</span><br>   <span class="hljs-keyword">public</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、如果提供了set方法，在set方法上添加@value(“值”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>   <span class="hljs-keyword">public</span> String name;<br><br>   <span class="hljs-meta">@Value(&quot;秦疆&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.name = name;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="衍生注解"><a href="#衍生注解" class="headerlink" title="衍生注解"></a>衍生注解</h3><p>我们这些注解，就是替代了在配置文件当中配置步骤而已！更加的方便快捷！</p><h4 id="Component三个衍生注解"><a href="#Component三个衍生注解" class="headerlink" title="@Component三个衍生注解"></a><strong>@Component三个衍生注解</strong></h4><p>为了更好的进行分层，Spring可以使用其它三个注解，功能一样，目前使用哪一个功能都一样。</p><ul><li>@Controller：web层</li><li>@Service：service层</li><li>@Repository：dao层</li></ul><p>写上这些注解，就相当于将这个类交给Spring管理装配了！</p><h4 id="自动装配注解"><a href="#自动装配注解" class="headerlink" title="自动装配注解"></a>自动装配注解</h4><p>在Bean的自动装配已经讲过了，可以回顾！</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>@scope</p><ul><li>singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。</li><li>prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller(&quot;user&quot;)</span><br><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>   <span class="hljs-meta">@Value(&quot;秦疆&quot;)</span><br>   <span class="hljs-keyword">public</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p><strong>XML与注解比较</strong></p><ul><li>XML可以适用任何场景 ，结构清晰，维护方便</li><li>注解不是自己提供的类使用不了，开发简单方便</li></ul><p><strong>xml与注解整合开发</strong> ：推荐最佳实践</p><ul><li>xml管理Bean</li><li>注解完成属性注入</li><li>使用过程中， 可以不用扫描，扫描是为了类上的注解</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">&lt;<span class="hljs-symbol">context:</span><span class="hljs-keyword">annotation</span>-<span class="hljs-title">config</span>/&gt;  <br></code></pre></td></tr></table></figure><p>作用：</p><ul><li><p>进行注解驱动注册，从而使注解生效</p></li><li><p>用于激活那些已经在spring容器里注册过的bean上面的注解，也就是显示的向Spring注册</p></li><li><p>如果不扫描包，就需要手动配置bean</p></li><li><p>如果不加注解驱动，则注入的值为null！</p></li></ul><h2 id="基于Java类进行配置"><a href="#基于Java类进行配置" class="headerlink" title="基于Java类进行配置"></a>基于Java类进行配置</h2><p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p><p>测试：</p><p>1、编写一个实体类，Dog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//将这个类标注为Spring的一个组件，放到容器中！</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> String name = <span class="hljs-string">&quot;dog&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、新建一个config配置包，编写一个MyConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//代表这是一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;<br><br>   <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//通过方法注册一个bean，这里的返回值就Bean的类型，方法名就是bean的id！</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">dog</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Dog(); <span class="hljs-comment">//返回值就是要注入的bean对象</span><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//如果完全使用了配置类方式去做 我们就只能通过AnnotationConfig上下文来获取容器 通过配置类的class对象加载</span><br>   ApplicationContext applicationContext =<br>           <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);<br>   Dog dog = (Dog) applicationContext.getBean(<span class="hljs-string">&quot;dog&quot;</span>);<br>   System.out.println(dog.name);<br>&#125;<br></code></pre></td></tr></table></figure><p>4、成功输出结果！</p><p><strong>导入其他配置如何做呢？</strong></p><p>1、我们再编写一个配置类！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//代表这是一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig2</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在之前的配置类中我们来选择导入这个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(MyConfig2.class)</span>  <span class="hljs-comment">//导入合并其他配置类，类似于配置文件中的 inculde 标签</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">dog</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Dog();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于这种Java类的配置方式，我们在之后的SpringBoot 和 SpringCloud中还会大量看到，我们需要知道这些注解的作用即可！</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>为什么要学习代理模式？因为这就是SpringAOP的底层</p><p>代理又分为静态代理和动态代理</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色后 一般会做一些附属操作</li><li>客户：访问代理对象的人</li></ul><p>代理模式的好处</p><ul><li>可以使真实角色的操作更加纯粹，不需要关注一些公共业务</li><li>公共的交给代理角色 实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><p>代理模式的坏处</p><p>一个正式角色就是产生一个代理角色，开发效率降低</p><p>实现：</p><p>1、接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 房东(真实角色)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-07-20 23:03</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;房东要租房子&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 中介(代理角色)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-07-20 23:05</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Host host;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>&#123;<br>        seeHouse();<br>        host.rent();<br>        contract();<br>        fee();<br>    &#125;<br><br>    <span class="hljs-comment">//看房</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;中介带你看房&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//手中接费</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fee</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;收中介费&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//签合同</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contract</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;签合同&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>4、客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 客户访问代理角色</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-07-20 23:04</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//房东要出租房子</span><br>        Host host = <span class="hljs-keyword">new</span> Host();<br>        <span class="hljs-comment">//代理 中介帮房东租房子</span><br>        Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);<br>        <span class="hljs-comment">//但是你不用面对房东 主角找中介</span><br>        proxy.rent();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210720232435.png" alt="image-20210720232435409"></p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理和静态代理角色一样</p><p>动态代理的代理类是动态生成的，不是直接用写好的</p><p>动态代理分为基于接口的动态代理，基于类的动态代理</p><ul><li>基于接口–JDK动态代理</li><li>基于类-cglib</li><li>java字节码：javasist</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo02;<br><br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 代理程序类 等会儿会用这个类动态生成代理类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-07-21 10:36</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-comment">//被代理的接口</span><br>    <span class="hljs-keyword">private</span> Object target;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRent</span><span class="hljs-params">(Object target)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//生成得到的代理类</span><br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//处理代理实例 返回结果</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object o, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        Object result = method.invoke(target, args);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>用这个类，动态生成代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//真实角色</span><br>        Host host = <span class="hljs-keyword">new</span> Host();<br>        <span class="hljs-comment">//代理角色</span><br>        ProxyInvocationHandler proxyInvocationHandler = <span class="hljs-keyword">new</span> ProxyInvocationHandler();<br>        <span class="hljs-comment">//通过调用程序处理角色处理我们要调用的接口对象</span><br>        proxyInvocationHandler.setRent(host);<br>        <span class="hljs-comment">//这里的代理是动态生成的</span><br>        Rent proxy = (Rent) proxyInvocationHandler.getProxy();<br>        proxy.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>AOP意思是面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210721112347.png" alt="image-20210721112347865"></p><h3 id="AOP在Spring中的作用"><a href="#AOP在Spring中的作用" class="headerlink" title="AOP在Spring中的作用"></a>AOP在Spring中的作用</h3><p>以下名词需要了解下：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。(例如日志)</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。(比如说日志中相关方法)</li><li>目标（Target）：被通知对象(代理目标对象，客户)。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象(代理对象)。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义(在哪里切入)。</li><li>连接点（JointPoint）：与切入点匹配的执行点(在哪里执行)。</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210721113017.png" alt="img"></p><h3 id="使用Spring实现AOP1"><a href="#使用Spring实现AOP1" class="headerlink" title="使用Spring实现AOP1"></a>使用Spring实现AOP1</h3><p><strong>通过 Spring API 实现</strong></p><p>首先编写我们的业务接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;增加用户&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;删除用户&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;更新用户&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;查询用户&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后去写我们的增强类 , 我们编写两个 , 一个前置增强 一个后置增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodBeforeAdvice</span> </span>&#123;<br><br>   <span class="hljs-comment">//method : 要执行的目标对象的方法</span><br>   <span class="hljs-comment">//objects : 被调用的方法的参数</span><br>   <span class="hljs-comment">//Object : 目标对象</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(Method method, Object[] objects, Object o)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>       System.out.println( o.getClass().getName() + <span class="hljs-string">&quot;的&quot;</span> + method.getName() + <span class="hljs-string">&quot;方法被执行了&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AfterLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AfterReturningAdvice</span> </span>&#123;<br>   <span class="hljs-comment">//returnValue 返回值</span><br>   <span class="hljs-comment">//method被调用的方法</span><br>   <span class="hljs-comment">//args 被调用的方法的对象的参数</span><br>   <span class="hljs-comment">//target 被调用的目标对象</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;执行了&quot;</span> + target.getClass().getName()<br>       +<span class="hljs-string">&quot;的&quot;</span>+method.getName()+<span class="hljs-string">&quot;方法,&quot;</span><br>       +<span class="hljs-string">&quot;返回值：&quot;</span>+returnValue);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后去spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 .</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/aop</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--注册bean--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.service.UserServiceImpl&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;beforelog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.log.BeforeLog&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.log.AfterLog&quot;</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!--aop的配置--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--切入点 expression:表达式匹配要执行的方法--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;afterlog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>       ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>       UserService userService = (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>       userService.search();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210721115446.png" alt="image-20210721115446384"></p><p>Aop的重要性 : 很重要 . 一定要理解其中的思路 , 主要是思想的理解这一块 .</p><p>Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加进来 . 实现公共业务的重复利用 . 领域业务更纯粹 , 程序猿专注领域业务 , 其本质还是动态代理 .</p><h3 id="使用Spring实现AOP2"><a href="#使用Spring实现AOP2" class="headerlink" title="使用Spring实现AOP2"></a>使用Spring实现AOP2</h3><p>自定义实现AOP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.diy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:切面类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-07-21 16:22</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointCut</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=========方法执行前========&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;==========方法执行后=======&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.diy.DiyPointCut&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--自定义切面，ref要引用的类--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;diy&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--切入点--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.bobo.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210721163428.png" alt="image-20210721163428247"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210721163702.png" alt="image-20210721163702646"></p><h3 id="通过注解实现"><a href="#通过注解实现" class="headerlink" title="通过注解实现"></a>通过注解实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//标注这个类是一个切面</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationPointCut</span> </span>&#123;<br>    <span class="hljs-meta">@Before(&quot;execution(* com.bobo.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;====方法执行前=======&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;annotationPonitCut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.diy.AnnotationPointCut&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--开启注解支持--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="mybatis-spring"><a href="#mybatis-spring" class="headerlink" title="mybatis-spring"></a>mybatis-spring</h2><p>1、编写数据源配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、IOC实现sqlSessionFactory</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!--关联Mybatis--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/bobo/mapper/*.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、IOC实现sqlSessionTemplate</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--利用构造器注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、给接口加实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> SqlSessionTemplate sqlSession;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSqlSession</span><span class="hljs-params">(SqlSessionTemplate sqlSession)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sqlSession = sqlSession;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span> </span>&#123;<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; userList = mapper.getUserList();<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、注入到Spring中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.bobo.mapper.UserMapperImpl&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSession&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="回顾事务"><a href="#回顾事务" class="headerlink" title="回顾事务"></a>回顾事务</h3><ul><li>把一组业务当做一个业务来做，要么都成功，要么都失败</li><li>事务在项目开发中，涉及到数据的一致性问题</li><li>确保完整性和一致性事务的ACID原则</li></ul><p>事务的ACID原则：</p><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><h3 id="spring中事务管理"><a href="#spring中事务管理" class="headerlink" title="spring中事务管理"></a>spring中事务管理</h3><p>Spring在不同的事务管理API之上定义了一个抽象层，使得开发人员不必了解底层的事务管理API就可以使用Spring的事务管理机制。Spring支持编程式事务管理和声明式的事务管理。</p><h4 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a><strong>声明式事务管理</strong></h4><ul><li>一般情况下比编程式事务好用。</li><li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</li><li>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务管理。</li></ul><p><strong>使用Spring管理事务，注意头文件的约束导入 : tx</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;<br>http://www.springframework.org/schema/tx<br>http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;<br></code></pre></td></tr></table></figure><p><strong>事务管理器</strong></p><ul><li>无论使用Spring的哪种事务管理策略（编程式或者声明式）事务管理器都是必须的。</li><li>就是 Spring的核心事务管理抽象，管理封装了一组独立于技术的方法。</li></ul><p>1、配置JDBC事务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、配置好事务管理器后我们需要去配置事务的通知</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置事务通知--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、配置AOP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置aop织入事务--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.kuang.dao.*.*(..))&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointcut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a><strong>编程式事务管理</strong></h4><ul><li>将事务管理代码嵌到业务方法中来控制事务的提交和回滚</li><li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码</li></ul>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/2021/07/17/SSM-Mybatis/"/>
    <url>/2021/07/17/SSM-Mybatis/</url>
    
    <content type="html"><![CDATA[<p>介绍</p><p><img src="https://mybatis.org/images/mybatis-logo.png" alt="img"></p><ul><li>MyBatis 是一款优秀的<code>持久层</code>框架</li><li>它支持自定义 SQL、存储过程以及高级映射。</li><li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li><li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li></ul><blockquote><p>数据持久化</p><p>持久化就是将程序中的数据在持久状态和瞬时状态转化的过程</p><p>内存：断电即失</p><p>数据库(jdbc) io文件持久化</p><p><strong>持久层</strong></p><p>Dao层、Service层 Controllers层</p></blockquote><h3 id="为什么需要Mybatis"><a href="#为什么需要Mybatis" class="headerlink" title="为什么需要Mybatis"></a>为什么需要Mybatis</h3><p>方便</p><p>简化JDBC代码，简化。框架，自动化</p><p>只是Mybatis，只是Mybatis更容易上手</p><h2 id="创建第一个mybatis文件"><a href="#创建第一个mybatis文件" class="headerlink" title="创建第一个mybatis文件"></a>创建第一个mybatis文件</h2><p>首先需要创建maven项目 并导入相应的依赖</p><p>Mybatis核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?userSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>User实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 用户实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-07-11 12:49</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span><span class="hljs-params">(String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口实现类由原来的UserDaoImp转变成为一个Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.bobo.dao.UserDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>测试</p><p>错误：org.apache.ibatis.binding.BindingException: Type interface com.bobo.dao.UserDao is not known to the MapperRegistry.</p><p>每个Mapper.xml需要在Mybatis核心配置文件中进行注册</p><p>形如这样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解决target目录下没有xml文件，这是由于maven的约定大于配置，在maven中，默认情况下，Maven是不会导处资源目录的，需要在maven配置中加入如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="crud-增删改查"><a href="#crud-增删改查" class="headerlink" title="crud 增删改查"></a>crud 增删改查</h2><p>注意增删改需要提交事务</p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>       select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>id：就是对应的namespace中的方法名</li><li>resultType：执行后的返回值类型</li><li>paramsType:参数类型</li></ul><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>        insert into mybatis.user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的insert语句新增用户时，必须要new一个对象出来，这样会有些不方便，也可以采用map这种格式</p><p>当数据库中的字段太多的时候，可以采用map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser_&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>    insert into mybatis.user(id,name,pwd) values (#&#123;userId&#125;,#user&#123;userName&#125;,#&#123;password&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser_</span><span class="hljs-params">()</span> </span>&#123;    SqlSession sqlSession = MybatissUtils.getSqlSession();    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);    Map&lt;String, Object&gt; map= <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;userid&quot;</span>,<span class="hljs-number">5</span>);    map.put(<span class="hljs-string">&quot;userName&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>);    map.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-number">2333333</span>);    userMapper.addUser_(map);    sqlSession.close();&#125;<br></code></pre></td></tr></table></figure><p>这样写sql语句中的每个value的名字可以自己随便取，只需要将值放入map时进行对应即可</p><h3 id="upadte"><a href="#upadte" class="headerlink" title="upadte"></a>upadte</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.bobo.pojo.User&quot;</span>&gt;</span>    update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span>        delete from mybatis.user where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210711182602539.png" alt="image-20210711182602539"></p><h3 id="如何进行模糊查询"><a href="#如何进行模糊查询" class="headerlink" title="如何进行模糊查询"></a>如何进行模糊查询</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210711183241733.png" alt="image-20210711183241733"></p><h2 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">configuration</span>（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境配置）environment（环境变量）transactionManager（事务管理器）dataSource（数据源）databaseIdProvider（数据库厂商标识）mappers（映射器）<br></code></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;properties resource=<span class="hljs-string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;    &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;dev_user&quot;</span>/&gt;     &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;F2Fa3!33TYyg&quot;</span>/&gt; &lt;/properties&gt;<br></code></pre></td></tr></table></figure><p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;driver&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;typeAliases&gt; &lt;typeAlias <span class="hljs-attribute">alias</span>=<span class="hljs-string">&quot;Author&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;domain.blog.Author&quot;</span>/&gt;         &lt;typeAlias <span class="hljs-attribute">alias</span>=<span class="hljs-string">&quot;Blog&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;domain.blog.Blog&quot;</span>/&gt;          &lt;typeAlias <span class="hljs-attribute">alias</span>=<span class="hljs-string">&quot;Comment&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;domain.blog.Comment&quot;</span>/&gt;          &lt;typeAlias <span class="hljs-attribute">alias</span>=<span class="hljs-string">&quot;Post&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;domain.blog.Post&quot;</span>/&gt;          &lt;typeAlias <span class="hljs-attribute">alias</span>=<span class="hljs-string">&quot;Section&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;domain.blog.Section&quot;</span>/&gt;&lt;typeAlias <span class="hljs-attribute">alias</span>=<span class="hljs-string">&quot;Tag&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;domain.blog.Tag&quot;</span>/&gt;&lt;/typeAliases&gt;<br></code></pre></td></tr></table></figure><p>也可以指定一个包名，Mybatis会在包下面搜索需要的JavaBean，比如：扫描实体类的包，它的默认别名就是这个类的类名，首字母小写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;domain.blog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种方式无法使用别名，</p><p>可以使用注解使得上面这种形式也可使用别名</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Alias(<span class="hljs-meta-string">&quot;author&quot;</span>)</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Author</span> </span>&#123; ... &#125;<br></code></pre></td></tr></table></figure><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>日志</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true |false</td><td>true</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典Java 属性名 aColumn 。</td><td>true |false</td><td>False</td></tr></tbody></table><p>| logImpl                  | 指定MyBatis 所用日志的具体实现，未指定时将自动查找。         | SLF4J/LOG4J/<br>LOG4J2… | 未指定 |<br>| lazyLoadingEnabled       | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 | true |false          | false  |</p><h3 id="映射器-Mapper"><a href="#映射器-Mapper" class="headerlink" title="映射器(Mapper)"></a>映射器(Mapper)</h3><p>MapperRegistry:注册绑定我们的Mapper文件</p><p>方式1：<!-- 使用相对于类路径的资源引用 --></p><p>这种方式出现的问题最少，推荐使用这种</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;mappers&gt; &lt;mapper resource=<span class="hljs-string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span><span class="hljs-regexp">/&gt;     &lt;mapper resource=&quot;org/my</span>batis<span class="hljs-regexp">/builder/</span>BlogMapper.xml<span class="hljs-string">&quot;/&gt;     &lt;mapper resource=&quot;</span>org<span class="hljs-regexp">/mybatis/</span>builder<span class="hljs-regexp">/PostMapper.xml&quot;/</span>&gt; &lt;/mappers&gt;<br></code></pre></td></tr></table></figure><p>方式2：<!-- 使用映射器接口实现类的完全限定类名 --></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;mappers&gt;     &lt;mapper <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;     &lt;mapper <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;    &lt;mapper <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;&lt;/mappers&gt;<br></code></pre></td></tr></table></figure><p>但这种方式会存在一些问题</p><ul><li><p>接口和他的Mapper配置文件必须同名</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210712235949042.png" alt="image-20210712235949042"></p></li><li><p>接口和他的mapper配置文件必须在同一个文件夹下</p></li></ul><p>方式3：<!-- 将包内的映射器接口实现全部注册为映射器 --></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>存在的问题和方式2一样</p><h2 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h2><p>理解我们之前讨论过的不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p>SqlSessionFactoryBuilder</p><ul><li>它的作用是用来创建sqlSessionFactory，一旦创建了了就不需要了，</li><li>推荐使用局部变量</li></ul><p>SqlSessionFactory</p><ul><li>sqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或者重新创建另一个实例</li><li>可以想象为数据库连接池</li><li>最大作用域为应用作用域</li></ul><p>SqlSession</p><ul><li>每个线程都有一个sqlSession实例</li><li>相当于连接到连接池的一个请求</li><li>开启和关闭</li><li>SqlSession不是线程安全的，不能被共享，最佳的作用域是在一个方法里面，用完了就关闭。否则资源就会一直被占用</li></ul><h2 id="解决属性名和数据库字段不一致的问题"><a href="#解决属性名和数据库字段不一致的问题" class="headerlink" title="解决属性名和数据库字段不一致的问题"></a>解决属性名和数据库字段不一致的问题</h2><p>当实体的属性名与数据库的字不一致时，会导致执行sql语句后，实体的某个属性值为空</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210713001851391.png"></p><p>这种问题如何解决？？？</p><h3 id="起别名："><a href="#起别名：" class="headerlink" title="起别名："></a>起别名：</h3><p><code>select id,name,pwd as password from User</code></p><h3 id="resultMap结果集映射"><a href="#resultMap结果集映射" class="headerlink" title="resultMap结果集映射"></a>resultMap结果集映射</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC <code>ResultSets</code> 数据提取代码中解放出来，并在一些情形下允许你进行一些 JDBC 不支持的操作。实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 <code>resultMap</code> 能够代替实现同等功能的数千行代码。ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p><p>MyBatis 会在幕后自动创建一个 <code>ResultMap</code>，再根据属性名来映射列到 JavaBean 的属性上。如果列名和属性名不能匹配上，可以在 SELECT 语句中设置列别名（这是一个基本的 SQL 特性）来完成匹配。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  select    user_id             as &quot;id&quot;,    user_name           as &quot;userName&quot;,    hashed_password     as &quot;hashedPassword&quot;  from some_table  where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是也可以通过下面这种方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;hashed_password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span>  select user_id, user_name, hashed_password  from some_table  where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h3><p>有一个数据库出现异常，我们需要排错，日志就是最好的助手</p><ul><li>SLF4J</li><li>Apache Commons Logging</li><li>Log4j 2</li><li><code>Log4j</code>(掌握)</li><li>JDK logging</li><li><code>STDOUT_LOGGING</code>(掌握)</li></ul><p>在Mybatis中，具体使用哪种日志，要通过设置设定</p><p>在 MyBatis 配置文件 mybatis-config.xml 里面添加一项 setting 来选择其它日志实现。</p><h4 id="STDOUT-LOGGING"><a href="#STDOUT-LOGGING" class="headerlink" title="STDOUT_LOGGING"></a>STDOUT_LOGGING</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210713154927162.png" alt="image-20210713154927162"></p><p>最后的执行结果</p><h4 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h4><p>1、导入Log4J包</p><p>2、新建log4j.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志输出到console和file这两个目的地 console和file的定义在下面代码log4j.rootLogger=DEBUG,console,file#控制台输出的相关设置log4j.appender.console = org.apache.log4j.ConsoleAppenderlog4j.appender.console.Target = System.outlog4j.appender.console.Threshold=DEBUGlog4j.appender.console.layout = org.apache.log4j.PatternLayoutlog4j.appender.console.layout.ConversionPattern=【%c】-%m%n#文件输出的相关设置log4j.appender.file = org.apache.log4j.RollingFileAppenderlog4j.appender.file.File=./log/log4j.loglog4j.appender.file.MaxFileSize=10mblog4j.appender.file.Threshold=DEBUGlog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=【%p】【%d&#123;yy-MM-dd&#125;】【%c】%m%n#日志输出级别log4j.logger.org.mybatis=DEBUGlog4j.logger.java.sql=DEBUGlog4j.logger.java.sql.Statement=DEBUGlog4j.logger.java.sql.ResultSet=DEBUGlog4j.logger.java.sql.PreparedStatement=DEBUG</span><br></code></pre></td></tr></table></figure><p>3、配置Mybatis使用log4j</p><p>4、使用log4j</p><p>输出和使用STDOUT_LOGGING差不多</p><p>简单使用</p><blockquote><ul><li><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210713161955126.png"></li></ul></blockquote><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>为什么要分页？</p><ul><li>减少数据的处理量</li></ul><h3 id="使用limit分页"><a href="#使用limit分页" class="headerlink" title="使用limit分页"></a>使用limit分页</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> limit startIndex,pageSize;<br></code></pre></td></tr></table></figure><h3 id="使用mybatis实现分页"><a href="#使用mybatis实现分页" class="headerlink" title="使用mybatis实现分页"></a>使用mybatis实现分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分页实现查询List&lt;User&gt; getUserLimit(Map&lt;String,Integer&gt; map);</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>    select *    from mybatis.user    limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Testpublic</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUserByLimit</span><span class="hljs-params">()</span> </span>&#123;    SqlSession sqlSession = MybatissUtils.getSqlSession();    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);    HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();    map.put(<span class="hljs-string">&quot;startIndex&quot;</span>, <span class="hljs-number">0</span>);    map.put(<span class="hljs-string">&quot;pageSize&quot;</span>, <span class="hljs-number">2</span>);    List&lt;User&gt; userList = userMapper.getUserLimit(map);    <span class="hljs-keyword">for</span> (User user : userList) &#123;        System.out.println(user);    &#125;    sqlSession.close();&#125;<br></code></pre></td></tr></table></figure><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210713170127248.png" alt="image-20210713170127248"></p><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><p>为何要使用面向接口编程：原因在于解耦，可扩展，提高复用，分层开发，上层不用管具体的实现，大家遵守共同的标准，使得开发变得容易，并提高规范性</p><p>在面向对象的系统中，系统的各个功能是由许多对象协作完成的，这种情况下，各个对象内部是如何实现的，对系统设计人员来说就不那么重要了</p><p>而各个对象之间的协作关系则成为系统设计的关键，小到不同类的通信，大到各个模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统的主要设计内容，面向接口编程就是这种思想</p><p>对于接口的理解</p><ul><li>接口从更深层次的理解，应该是定义(规范、约束)与实现(名实分离的原则)</li><li>接口的本身反应了系统设计人员对系统的抽象理解</li><li>接口应有两类<ul><li>第一类是对一个个个体的抽象，它可对应为一个抽象体</li><li>第二类是对一个个个体某个方面的抽象，即形成一个抽象面</li></ul></li><li>一个体有可能有多个抽象面，抽象体与抽象面还是有区别的</li></ul><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;&#125;<br></code></pre></td></tr></table></figure><p>这样就不用配置xml，但这样有有些问题，特别是不能应用于复杂的sql，不能使用resultMap等，只能用于很简单的sql</p><p>需要在核心配置文件中绑定接口，</p><p>本质：反射机制实现</p><p>底层：使用的动态代理</p><h3 id="mybatis执行流程"><a href="#mybatis执行流程" class="headerlink" title="mybatis执行流程"></a>mybatis执行流程</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/9d82d158ccbf6c8130abb64fc4cd623331fa40f7.png" alt="img"></p><h3 id="crud"><a href="#crud" class="headerlink" title="crud"></a>crud</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user&quot;)</span>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//方法中存在多个参数，所有的参数必须加上 @params(参数名)注解    @Select(&quot;select * from user where id = #&#123;id&#125;&quot;)    User getUserById(@Param(&quot;id&quot;) int id, @Param(&quot;name&quot;) String name);    @Insert(&quot;insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)    int addUser(User user);    @Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;&quot;)    int updateUser(User user);    @Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)    int delete(@Param(&quot;uid&quot;) int id);&#125;</span><br></code></pre></td></tr></table></figure><p>关于@params() 注解</p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但建议大家都加上</li><li>我们在SQL中引用的就是我们这里的@params()中设定的属性名</li></ul><h2 id="复杂查询场景"><a href="#复杂查询场景" class="headerlink" title="复杂查询场景"></a>复杂查询场景</h2><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><h4 id="按照嵌套查询的方式"><a href="#按照嵌套查询的方式" class="headerlink" title="按照嵌套查询的方式"></a>按照嵌套查询的方式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--查询所有的学生信息根据学生的tid，查询对应的老师  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span>    select *    from student<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-comment">&lt;!--复杂的属性 需要单独处理--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>    select *    from teacher    where id = #&#123;id&#125;;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentList_&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span>&gt;</span>    select s.id sid, s.name sname, t.name tname    from student s,         teacher t    where s.tid = t.id;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>回顾Mysql夺标查询的方式</p><ul><li>子查询</li><li>联表查询</li></ul><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><h4 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span>        select s.tid sid, s.name sname, t.name tname, t.id tid        from student s,             teacher t        where s.tid = t.id          and t.id = #&#123;tid&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span>&gt;</span>        select *        from mybatis.teacher        where id = #&#123;tid&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>        select *        from mybatis.student        where tid = #&#123;tid&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>关联-association 多对一</p><p>集合-collection 一对多</p><p>javaType &amp; ofType</p><p>​    JavaType 用来指定实体类中属性的类型</p><p>​    ofType 用来映射到List或者集合中的pojo类型，泛型中的约束类型</p><p>注意点：</p><p>保证SQL的可读性，精良保证通俗易懂</p><p>注意一对多和多对一中，属性名和字段的问题</p><p>如果问题不好排查，可以使用日志，建议使用Log4j</p><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><p>用动态sql替代sql语句的拼接</p><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span>    select * from mybatis.blog where 1=1    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title!=null&quot;</span>&gt;</span>        and title like concat(&#x27;%&#x27;,#&#123;title&#125;,&#x27;%&#x27;) //由于模糊查询的有中文，所以需要%%    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author!=null&quot;</span>&gt;</span>        and author like #&#123;author&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询博客List&lt;Blog&gt; queryBlog(Map map);</span><br></code></pre></td></tr></table></figure><p>通过map进行传参，并通过mybatis的if标签进行判断</p><p>注意查询的有中文时，需要使用%%，使用的mapper.xml如上所示</p><h3 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">select id=&quot;findActiveBlogLike&quot;     resultType=&quot;Blog&quot;&gt;  SELECT * FROM BLOG  WHERE  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;state != null&quot;</span>&gt;</span>    state = #&#123;state&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span>    AND title like #&#123;title&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span>    AND author_name like #&#123;author.name&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果没有匹配的条件会怎么样？最终这条 SQL 会变成这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> BLOGWHERE<br></code></pre></td></tr></table></figure><p>所以这里可以使用where标签解决这个问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span>     <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span>  SELECT * FROM BLOG  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;state != null&quot;</span>&gt;</span>         state = #&#123;state&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span>        AND title like #&#123;title&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span>        AND author_name like #&#123;author.name&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>*<em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。**</p><p>例如当所有条件都不满足时，就不会插入where，即为</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> BLOG<br></code></pre></td></tr></table></figure><p>这样就就不会报错</p><h3 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a>choose标签</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><p>都点像java的switch语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span>        select * from mybatis.blog        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title!=null&quot;</span>&gt;</span>                    title = #&#123;title&#125;                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author!=null&quot;</span>&gt;</span>                    and author = #&#123;author&#125;                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span>                    and views = #&#123;views&#125;                <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里也是用了where标签，当子句开头为and时，where标签也会自动把and去除，这样查询才会成功</p><h3 id="set关键字"><a href="#set关键字" class="headerlink" title="set关键字"></a>set关键字</h3><p>用于动态更新语句的类似解决方案叫做 <em>set</em>。<em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span>  update Author    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>  where id=#&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个例子中，<em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p><h3 id="trim标签-用得少"><a href="#trim标签-用得少" class="headerlink" title="trim标签(用得少)"></a>trim标签(用得少)</h3><p>来看看与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素吧：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span>  ...<span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><p>所谓的动态SQL，本质上还是SQL语句，只是我们可以在sql层面，去执行一个逻辑代码</p><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><p>将经常使用的sql语句的一部分抽离出来，使其可以重复使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title!=null&quot;</span>&gt;</span>        and title like concat(&#x27;%&#x27;,#&#123;title&#125;,&#x27;%&#x27;)    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author!=null&quot;</span>&gt;</span>        and author like #&#123;author&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span>    select * from mybatis.blog    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="for-each"><a href="#for-each" class="headerlink" title="for-each"></a>for-each</h3><p>动态sql 的另一个需求是对一个集合进行遍历，通常是在构建IN条件语句的时候，比如：</p><p>传入的是一个集合，然后通过for each 遍历每个元素进行sql动态拼接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogForeach&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span>        select * from mybatis.blog        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span>                id = #&#123;id&#125;            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">List&lt;Blog&gt; <span class="hljs-title">queryBlogForeach</span><span class="hljs-params">(Map <span class="hljs-built_in">map</span>)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MybatissUtils.getSqlSession();    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);    HashMap map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    ArrayList&lt;Integer&gt; ids = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    map.put(<span class="hljs-string">&quot;ids&quot;</span>,ids);    ids.add(<span class="hljs-number">1</span>);    ids.add(<span class="hljs-number">2</span>);    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);    <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;        System.out.println(blog);    &#125;    sqlSession.close();&#125;<br></code></pre></td></tr></table></figure><p>动态SQL就是在凭借SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>一个查询的结果，暂存在一个可以直接渠道的地方，我们再次查询相同的数据的时候，直接走缓存，不用走数据库了</p><p>什么是缓存？</p><ul><li>存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存中，用户去查询数据就不用从磁盘(关系型数据库数据文件)查询，从缓存中查询，从而提高查询的效率，解决了高并发系统的性能问题</li></ul><p>为什么使用缓存？</p><ul><li>减少和数据库的交互次数，减少洗头工开销，提高系统效率</li></ul><p>什么样的数据能使用缓存</p><ul><li>经常查询并且不经常改变的数据[可以使用缓存]</li></ul><h3 id="mybatis缓存"><a href="#mybatis缓存" class="headerlink" title="mybatis缓存"></a>mybatis缓存</h3><ul><li>Mybatis包含非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提高查询效率</li><li>Mybatis系统中默认定义了两级缓存，一级缓存和二级缓存<ul><li>默认情况下，只有一级缓存开启。(SqlSession级别的缓存，当一个sqlSession对象关闭后，缓存消失，也称为本地缓存</li><li>二级缓存西药手动开启和配置，他是基于namespace级别的缓存</li><li>为了提高扩展性，Mybatis定义了缓存接口Cache。我们可以提供给实现Cache接口来自定义二级缓存</li></ul></li></ul><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>在一个sqlSession进行相同的查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlSession = MybatissUtils.getSqlSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        User user = mapper.queryUserById(<span class="hljs-number">1</span>);        System.out.println(user);        User user2 = mapper.queryUserById(<span class="hljs-number">1</span>);        System.out.println(user2);        System.out.println(user==user2);        sqlSession.close();    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210717124810.png" alt="image-20210717124733935"></p><p>可以发现，进行相同的查询，只查询了一次，另一次是从本地缓存中去取得</p><p>缓存失效的情况：</p><ul><li>查询不同的东西</li><li>增、删、该操作，可能会改变原来的数据，所以必定会刷新缓存</li><li>查询不同的Mapper</li><li>手动清理缓存</li></ul><p>小结：以及缓存默认是开启的，只在一次SqlSession中有效，可就是得到连接和关闭连接之间</p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>默认情况下，Mybatis只开启了一级缓存，如果要使用二级缓存，只需要在你的SQL映射文件中添加一行<code>&lt;cache/&gt;</code></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210717132034.png" alt="image-20210717132034565"></p><p>步骤</p><p>1、开启全局缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>2、在要使用二级缓存额Mapper中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>  <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span>  <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span>  <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span>  <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MybatissUtils.getSqlSession();    SqlSession sqlSession_ = MybatissUtils.getSqlSession();    UserMapper mapper = sqlSession.getMapper(UserMapper.class);    UserMapper mapper_ = sqlSession_.getMapper(UserMapper.class);    User user = mapper.queryUserById(<span class="hljs-number">1</span>);    System.out.println(user);    sqlSession.close();    User user2 = mapper_.queryUserById(<span class="hljs-number">1</span>);    System.out.println(user2);    sqlSession_.close();    System.out.println(user==user2); <span class="hljs-comment">//输出的结果为true&#125;</span><br></code></pre></td></tr></table></figure><p>问题：我们需要将实体类序列化，否则就会报错</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210717133614.png" alt="image-20210717133614738"></p><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下有小</li><li>所有的数据都会先放在一级缓存中</li><li>只有当会话提交，或者关闭后，才会提交到二级缓存中</li></ul><h3 id="缓存原理"><a href="#缓存原理" class="headerlink" title="缓存原理"></a>缓存原理</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20210717172606.png" alt="image-20210717172605993"></p><h3 id="自定义缓存"><a href="#自定义缓存" class="headerlink" title="自定义缓存"></a>自定义缓存</h3><p>可以通过实现你自己的缓存，或为其他第三方缓存方案创建适配器，来完全覆盖缓存行为。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">&lt;cache <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">&quot;com.domain.something.MyCustomCache&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>这里在实际使用时会配置即可，要用时再查blog</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC学习</title>
    <link href="/2021/07/10/JDBC%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/07/10/JDBC%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JDBC为访问不同的数据库提供了统一的接口，为使用者屏蔽了细节问题</p><p>Java程序员使用JDBC，可以连接任何提供了JDBC驱动程序的数据库系统，从而完成对数据库的各种操作</p><p>JDBC原理图</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210630183928415.png" alt="image-20210630183928415"></p><p>每个数据库厂商通过Java提供的数据库连接规范制定接口，即提供对应的jar包，从而可以操作指定的数据库</p><p>例如这种模式，首先定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.jdbc.myjdbc;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Jdbcinterface</span> </span>&#123;<br>    <span class="hljs-comment">//连接数据库</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//crud</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">crud</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//关闭连接数据库</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后mysql定义响应的实现类，即JDBC驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.jdbc.myjdbc;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 模拟实现jdbc接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-30 18:45</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MysqlJdbcImplement</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Jdbcinterface</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;成功连接Mysql&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">crud</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;完成Mysql增删改查&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;关闭连接&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>JDBC是Java提供一套用于数据库操作的接口API，<strong>Java程序员只需要面向这套接口编程即可</strong>，不同的数据库厂商，需要针对这套接口，提供不同的实现</p><p>JDBC API是一套接口，它统一和规范了应用程序与数据库的连接，执行SQL语句，得到返回结果等各类操作，相关类和接口在java.sql(包)与javax.sql(扩展包)包中</p><h2 id="JDBC快速入门"><a href="#JDBC快速入门" class="headerlink" title="JDBC快速入门"></a>JDBC快速入门</h2><h3 id="JDBC程序编写步骤"><a href="#JDBC程序编写步骤" class="headerlink" title="JDBC程序编写步骤"></a>JDBC程序编写步骤</h3><ol><li>注册驱动-加载Driver类</li><li>获取连接-得到Connection</li><li>执行增删改查-发送<code>SQL</code>给<code>mysql</code>执行</li><li>释放资源-关闭连接</li></ol><p>创建演员表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">CREATE table <span class="hljs-title">actor</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">id <span class="hljs-keyword">int</span> PRIMARY KEY auto_increment,</span></span><br><span class="hljs-function"><span class="hljs-params">name varchar(<span class="hljs-number">32</span>)</span> not <span class="hljs-keyword">null</span> DEFAULT &#x27;&#x27;,</span><br><span class="hljs-function">sex <span class="hljs-title">char</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span> not <span class="hljs-keyword">null</span> DEFAULT &#x27;女&#x27;,</span><br><span class="hljs-function">borndate datetime,</span><br><span class="hljs-function">phone <span class="hljs-title">varchar</span><span class="hljs-params">(<span class="hljs-number">12</span>)</span></span><br><span class="hljs-function">)</span>;<br></code></pre></td></tr></table></figure><p>按照上面的顺序进行编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBC01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">//前置工作:在项目下创建一个文件夹，把驱动jar包拷贝到该目录，并添加到项目中</span><br>        <span class="hljs-comment">//1--注册驱动</span><br>        Driver driver = <span class="hljs-keyword">new</span> Driver(); <span class="hljs-comment">//创建了一个Driver对象</span><br><br>        <span class="hljs-comment">//2--得到连接</span><br>        String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc_learn&quot;</span>;<br>        <span class="hljs-comment">// 将用户名和密码放入到properties对象</span><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        Connection connect = driver.connect(url, properties);<br>        <span class="hljs-comment">//3--执行操作</span><br>        <span class="hljs-comment">//执行操作</span><br>        String sql = <span class="hljs-string">&quot;update actor set name=&#x27;周星驰&#x27; where id = 1&quot;</span>;<br>        <span class="hljs-comment">//statement：执行静态SQL语句并返回结果</span><br>        Statement statement = connect.createStatement();<br>        <span class="hljs-keyword">int</span> row = statement.executeUpdate(sql);<span class="hljs-comment">//返回影响的行数</span><br>        System.out.println(row &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;成功&quot;</span> : <span class="hljs-string">&quot;失败&quot;</span>);<br><br>        <span class="hljs-comment">//4--释放连接</span><br>        statement.close();<br>        connect.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="连接数据库的5中方式"><a href="#连接数据库的5中方式" class="headerlink" title="连接数据库的5中方式"></a>连接数据库的5中方式</h3><h4 id="方式1–-gt-基本使用"><a href="#方式1–-gt-基本使用" class="headerlink" title="方式1–&gt;基本使用"></a>方式1–&gt;基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc_learn&quot;</span>;<br><span class="hljs-comment">// 将用户名和密码放入到properties对象</span><br>Properties properties = <span class="hljs-keyword">new</span> Properties();<br>properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>Connection connect = driver.connect(url, properties);<br></code></pre></td></tr></table></figure><h4 id="方式2-–-gt-利用反射"><a href="#方式2-–-gt-利用反射" class="headerlink" title="方式2 –&gt;利用反射"></a>方式2 –&gt;利用反射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connect02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException </span>&#123;<br>       <span class="hljs-comment">//利用反射</span><br>       Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>       Driver driver = (Driver)aClass.newInstance();<br>       String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc_learn&quot;</span>;<br>       <span class="hljs-comment">// 将用户名和密码放入到properties对象</span><br>       Properties properties = <span class="hljs-keyword">new</span> Properties();<br>       properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>       properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>       Connection connect = driver.connect(url, properties);<br>       System.out.println(connect);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="方式3-–-gt-利用driver-manager"><a href="#方式3-–-gt-利用driver-manager" class="headerlink" title="方式3 –&gt;利用driver manager"></a>方式3 –&gt;利用driver manager</h4><p>这样的好处在于可以统一进行管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connnet03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException </span>&#123;<br>      <span class="hljs-comment">//方式3 使用DriverManager代替Driver进行统一管理</span><br>      Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>      Driver driver = (Driver) aClass.newInstance();<br>      String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc_learn&quot;</span>;<br>      String user = <span class="hljs-string">&quot;root&quot;</span>;<br>      String password = <span class="hljs-string">&quot;123456&quot;</span>;<br>      DriverManager.registerDriver(driver);<span class="hljs-comment">//注册Driver驱动</span><br>      Connection connection = DriverManager.getConnection(url, user, password);<br>      System.out.println(connection);<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="方式4-–-gt-简化"><a href="#方式4-–-gt-简化" class="headerlink" title="方式4 –&gt;简化"></a>方式4 –&gt;简化</h4><p>这种方式是最推荐使用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connnet04</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        <span class="hljs-comment">//方式4-- 使用Class.forname自动完成后注册驱动，简化代码</span><br>        <span class="hljs-comment">//因为底层有一段静态代码块，已经帮忙执行了</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc_learn&quot;</span>;<br>        String user = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        DriverManager.getConnection(url, user, password);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210630231311841.png" alt="image-20210630231311841"></p><h4 id="方式5–-gt-加载配置文件"><a href="#方式5–-gt-加载配置文件" class="headerlink" title="方式5–&gt;加载配置文件"></a>方式5–&gt;加载配置文件</h4><p>通过新建一个配置文件，然后通过properties对象进行加载</p><p><code>mysql.properties</code>文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">user</span>=root<br><span class="hljs-attr">password</span>=<span class="hljs-number">123456</span><br><span class="hljs-attr">url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/jdbc_learn<br><span class="hljs-attr">driver</span>=com.mysql.cj.jdbc.Driver<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connnet05</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, SQLException </span>&#123;<br>    <span class="hljs-comment">//通过properties对象获取配置文件的信息</span><br>    Properties properties = <span class="hljs-keyword">new</span> Properties();<br>    properties.load(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>    <span class="hljs-comment">//获取相关的值</span><br>    String user= properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>    String password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>    String driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>    String url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>    Class.forName(driver );<br>    Connection connection = DriverManager.getConnection(url, user, password);<br>    System.out.println(connection);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Result-Set-结果集"><a href="#Result-Set-结果集" class="headerlink" title="Result_Set(结果集)"></a>Result_Set(结果集)</h3><ol><li>表示数据库结果集的数据表，通常通过执行查询数据库的语句生成。</li><li>ResultSet对象保持一个光标指向器当前的数据行，最初，光标位于第一行之前</li><li>next方法将光标移动到下一行，并且由于在ResultSet对象中没有更多行时返回false，因此可以在while循环中使用循环来遍历结果集</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">//前置工作:在项目下创建一个文件夹，把驱动jar包拷贝到该目录，并添加到项目中</span><br>        <span class="hljs-comment">//1--注册驱动</span><br>        Driver driver = <span class="hljs-keyword">new</span> Driver(); <span class="hljs-comment">//创建了一个Driver对象</span><br><br>        <span class="hljs-comment">//2--得到连接</span><br>        String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc_learn&quot;</span>;<br>        <span class="hljs-comment">// 将用户名和密码放入到properties对象</span><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        Connection connect = driver.connect(url, properties);<br>        <span class="hljs-comment">//3--执行操作</span><br>        <span class="hljs-comment">//执行操作</span><br>        <span class="hljs-comment">//statement：执行静态SQL语句并返回结果</span><br>        Statement statement = connect.createStatement();<br>        String sql = <span class="hljs-string">&quot;select id,name,sex,borndate from actor&quot;</span>;<br><br>        ResultSet resultSet = statement.executeQuery(sql);<span class="hljs-comment">//得到结果集</span><br>        <span class="hljs-comment">//使用while循环取出数据</span><br>        <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>            <span class="hljs-keyword">int</span> id = resultSet.getInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//获取改行第一列数据</span><br>            String name = resultSet.getString(<span class="hljs-number">2</span>);<span class="hljs-comment">//获取到改行第二列</span><br>            String sex = resultSet.getString(<span class="hljs-number">3</span>);<br>            Date date = resultSet.getDate(<span class="hljs-number">4</span>);<br>            System.out.println(id + <span class="hljs-string">&quot;\t&quot;</span> + name + <span class="hljs-string">&quot;\t&quot;</span> + sex + <span class="hljs-string">&quot;\t&quot;</span> + date);<br>        &#125;<br>        <span class="hljs-comment">//4--释放连接</span><br>        resultSet.close();<br>        statement.close();<br>        connect.close();<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>底层的一个数据结构</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210701000103903.png" alt="image-20210701000103903"></p><h3 id="statement"><a href="#statement" class="headerlink" title="statement"></a>statement</h3><h4 id="SQL注入问题"><a href="#SQL注入问题" class="headerlink" title="SQL注入问题"></a>SQL注入问题</h4><p>stament用来执行静态SQL语句，并返回结果</p><p>在连接建立后，需要对数据库进行访问，执行命令或者SQL语句，可以通过</p><ul><li><p>Statement[存在SQL注入]</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210701231332863.png" alt="image-20210701231332863"></p></li><li><p>PreparedStatement[预处理]</p></li><li><p>CallableStatement[存储过程]</p></li></ul><p>SQL注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的SQL语句段或命令，恶意攻击数据库</p><p>可以用PreparedStatement防止SQL注入问题</p><p>例如基于1=1</p><p>例如当通过用户名进行查询是，我们将？Userid设为105 OR 1=1</p><p>所以最后的sql查询语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Users <span class="hljs-keyword">WHERE</span> UserId <span class="hljs-operator">=</span> <span class="hljs-number">105</span> <span class="hljs-keyword">OR</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>这样黑客就可以访问到所有的用户名和密码</p><h4 id="解决SQL注入问题-通过PreparedStatement"><a href="#解决SQL注入问题-通过PreparedStatement" class="headerlink" title="解决SQL注入问题 通过PreparedStatement"></a>解决SQL注入问题 通过PreparedStatement</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210702191332900.png" alt="image-20210702191332900"></p><p>PraparedStament执行SQL语句中的参数用(?)来表示，调用PreparedStatement对象的setXxx()方来设置这些参数。setXxx()方法有两个参数，第一个参数是要设置的SQL语句的参数的索引，第二个时设置SQL语句中的参数的值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">调用executeQuery()；返回ReSultSet对象<br><br>调用executeUpdate：执行增，删，该 <span class="hljs-regexp">//</span>返回值后影响的行数<br></code></pre></td></tr></table></figure><p>好处</p><ul><li>不在使用+拼接SQL语句，减少语法处于</li><li>有效的解决了SQL注入问题</li><li>大大减少了编译次数，效率提高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>       <span class="hljs-comment">//前置工作:在项目下创建一个文件夹，把驱动jar包拷贝到该目录，并添加到项目中</span><br>       <span class="hljs-comment">//1--注册驱动</span><br>       Driver driver = <span class="hljs-keyword">new</span> Driver(); <span class="hljs-comment">//创建了一个Driver对象</span><br>       <span class="hljs-comment">//2--得到连接</span><br>       String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc_learn&quot;</span>;<br>       <span class="hljs-comment">// 将用户名和密码放入到properties对象</span><br>       Properties properties = <span class="hljs-keyword">new</span> Properties();<br>       properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>       properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>       Connection connect = driver.connect(url, properties);<br><br>       <span class="hljs-comment">//？这里表示的是占位符，后面通过reparedStatementP的setXxxx()方法填入值</span><br>       String sql = <span class="hljs-string">&quot;select username,password from admin where username=? and password=?&quot;</span>;<br>       PreparedStatement preparedStatement = connect.prepareStatement(sql);<br>       <span class="hljs-comment">//给？赋值</span><br>       preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>       preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;1234&quot;</span>);<br>       <span class="hljs-comment">//执行SQL语句</span><br>       <span class="hljs-comment">//这里执行查询时，这里不能在天SQL</span><br>       ResultSet resultSet = preparedStatement.executeQuery();<br>       <span class="hljs-keyword">if</span>(resultSet.next())&#123;<br>           System.out.println(<span class="hljs-string">&quot;恭喜 登录成功&quot;</span>);<br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>           System.out.println(<span class="hljs-string">&quot;对不起 登录失败&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>这样经过测试，发现不存在SQL注入问题</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210702195640863.png" alt="image-20210702195640863"></p><h3 id="封装JDBCUtils工具类"><a href="#封装JDBCUtils工具类" class="headerlink" title="封装JDBCUtils工具类"></a>封装JDBCUtils工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.jdbc.utils;<br><br><span class="hljs-keyword">import</span> sun.rmi.runtime.Log;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 完成mysql的连接和关闭资源</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-07-02 20:00</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtils</span> </span>&#123;<br>    <span class="hljs-comment">//定义相关的属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String user;<span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;<span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;<span class="hljs-comment">//连接数据库的url</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String dirver;<span class="hljs-comment">//驱动名</span><br><br>    <span class="hljs-comment">//通过静态代码块来进行初始化</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>            user = properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            dirver = properties.getProperty(<span class="hljs-string">&quot;dirver&quot;</span>);<br><span class="hljs-comment">//            Class.forName(dirver);</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException  e) &#123;<br>            <span class="hljs-comment">//实际开发中，我们这样处理</span><br>            <span class="hljs-comment">//将编译异常 转成运行异常 throw</span><br>            <span class="hljs-comment">//这时 调用者可以选择捕获该异常，也可以选择默认处理该异常，比较方便</span><br>            <span class="hljs-comment">//转为运行是异常后，程序就终止执行了</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//连接数据库 返回connection</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(url, user, password);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//关闭相关资源</span><br>    <span class="hljs-comment">//1--&gt;resultset PreparedStatement Connection</span><br>    <span class="hljs-comment">//需要关闭资源，就传入，否则传入null</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(ResultSet set, Statement statement, Connection connection)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (set != <span class="hljs-keyword">null</span>)<br>                set.close();<br>            <span class="hljs-keyword">if</span> (statement != <span class="hljs-keyword">null</span>)<br>                statement.close();<br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>)<br>                connection.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtilsTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        testDML();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDML</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        String sql = <span class="hljs-string">&quot;update actor set name = ? where id = ?&quot;</span>;<br>        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtils.getConnection();<br>            preparedStatement  = connection.prepareStatement(sql);<br>            <span class="hljs-comment">//给占位符赋值</span><br>            preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;刘德华&quot;</span>);<br>            preparedStatement.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>            preparedStatement.executeUpdate();<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>                e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.close(<span class="hljs-keyword">null</span>,preparedStatement,connection);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li>JDBC程序当一个Connection对象创建时，默认情况下是自动提交事务，每次执行一个SQL语句时，如果执行成功，就会向数据库自动提交，而不能回滚</li><li>JDBC程序中为了让多个SQL语句作为一个整体执行，需要使用事务</li><li>调用Connection的setAutoCommit(false)可以取消自动提交事务</li><li>在所有SQL语句都成功执行后，调用comiit();方法自动提交事务</li><li>在其中某个操作失败或出现异常时，调用rollback()方法回滚事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">noTransaction</span><span class="hljs-params">()</span></span>&#123;<br>      Connection connection = <span class="hljs-keyword">null</span>;<br>      String sql = <span class="hljs-string">&quot;update caaount set balance = balance - 100 where id = 1&quot;</span>;<br>      String sql_ = <span class="hljs-string">&quot;update caaount set balance = balance + 100 where id = 2&quot;</span>;<br>      PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>          connection = JDBCUtils.getConnection();<span class="hljs-comment">//在默认情况下 collection是默认自动提交的</span><br>          <span class="hljs-comment">//将collection设为不自动提交</span><br>          connection.setAutoCommit(<span class="hljs-keyword">false</span>);<br>          preparedStatement  = connection.prepareStatement(sql);<br>          preparedStatement.executeUpdate();<br>          preparedStatement = connection.prepareStatement(sql_);<br>          preparedStatement.executeUpdate();<br>          <span class="hljs-comment">//提交事务</span><br>          connection.commit();<br><br>      &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>              <span class="hljs-comment">//出现异常，回滚</span><br>              <span class="hljs-comment">//默认回滚到事务开始的地方</span><br>              connection.rollback();<br>          &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>              throwables.printStackTrace();<br>          &#125;<br>          e.printStackTrace();<br>      &#125;<span class="hljs-keyword">finally</span> &#123;<br>          JDBCUtils.close(<span class="hljs-keyword">null</span>,preparedStatement,connection);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>多条SQL语句当做一个整体来执行，当中间某条sql语句出现错误时，回滚，</p><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><ul><li><p>当需要成批插入或者更新记录是，可以采用Java的批量更新机制，这一机制允许许多条语句一次性提交给数据库进行处理。通常情况下比单独提交处理更有效率</p></li><li><p>JDBC的批量处理语句包括以下的方法：</p></li></ul><blockquote><p>addBath():添加需要批量处理的SQL语句或参数</p><p>executeBatch():执行批量处理语句</p><p>clearBatch();清空批处理包的语句</p></blockquote><ul><li><p>批处理往往和PrepardStatement一起搭配使用，可以既减少编译次数，又减少运行次数，效率大大提升</p></li><li><p>JDBC连接mysql时，如果要使用批处理功能，在url中加入参数</p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210702223652420.png" alt="image-20210702223652420" style="zoom:150%;" /></li></ul><p>否则批处理是无效的</p><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection connection = JDBCUtils.getConnection();<br>        String sql = <span class="hljs-string">&quot;insert into admin values(?,?)&quot;</span>;<br>        PreparedStatement preparedStatement = connection.prepareStatement(sql);<br>        <span class="hljs-comment">//开始执行</span><br>        System.out.println(<span class="hljs-string">&quot;开始执行&quot;</span>);<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>            preparedStatement.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;jack&quot;</span> + i);<br>            preparedStatement.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;666&quot;</span>);<br>            <span class="hljs-comment">//将sql语句加入到批处理包中</span><br>            preparedStatement.addBatch();<br>            <span class="hljs-comment">//当有1000条记录时，再批量执行</span><br>            <span class="hljs-keyword">if</span> ((i + <span class="hljs-number">1</span>) % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>) &#123;<br>                preparedStatement.executeBatch();<br>                <span class="hljs-comment">//情况</span><br>                preparedStatement.clearBatch();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (end - start));<br>        JDBCUtils.close(<span class="hljs-keyword">null</span>,preparedStatement,connection);<br></code></pre></td></tr></table></figure><p>通过测试，执行的速度大大提升，大约快了100倍</p><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><h4 id="传统的连接弊端"><a href="#传统的连接弊端" class="headerlink" title="传统的连接弊端"></a>传统的连接弊端</h4><p>传统的JDBC数据库连接使用DriverManager来获取，每次向数据库建立连接都要将Connection加载熬内存中，再验证IP地址，用户名和密码，需要数据库连接的时候，就像数据库要求一个，频繁的进行数据库连接操作将占用很多的系统资源，容易造成服务器崩溃</p><p>每一次数据库连接，使用完后都得断开，如果程序出现异常而未能关闭，将导致数据库内存泄漏，最终将导致数据库重启</p><p>传统获取连接的方式，不能控制创建的连接数量，如果连接过多，导致内存泄漏，Mysql崩溃</p><p>解决上述问题可以采用数据库连接池</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210703224633762.png" alt="image-20210703224633762"></p><h4 id="数据库连接池介绍"><a href="#数据库连接池介绍" class="headerlink" title="数据库连接池介绍"></a>数据库连接池介绍</h4><p>预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从”缓冲池”中取出一个，使用完毕后再放回去</p><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</p><p>当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210703225151044.png" alt="image-20210703225151044"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210703230317093.png" alt="image-20210703230317093"></p><h4 id="C3P0使用"><a href="#C3P0使用" class="headerlink" title="C3P0使用"></a>C3P0使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testC3P0_01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, PropertyVetoException, SQLException </span>&#123;<br>    <span class="hljs-comment">//创建数据源对象</span><br>    ComboPooledDataSource comboPooledDataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>    <span class="hljs-comment">//通过配置文件获取相关连接</span><br>    Properties properties = <span class="hljs-keyword">new</span> Properties();<br>    properties.load(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\main\\mysql.properties&quot;</span>));<br>    String user = properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>    String password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>    String url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>    String driver = properties.getProperty(<span class="hljs-string">&quot;com.&quot;</span>);<br>    <span class="hljs-comment">//给数据源设置相关参数</span><br>    comboPooledDataSource.setDriverClass(driver);<br>    comboPooledDataSource.setJdbcUrl(url);<br>    comboPooledDataSource.setUser(user);<br>    comboPooledDataSource.setPassword(password);<br>    <span class="hljs-comment">//初始化连接数</span><br>    comboPooledDataSource.setInitialPoolSize(<span class="hljs-number">10</span>);<br>    <span class="hljs-comment">//最大连接数</span><br>    comboPooledDataSource.setMaxPoolSize(<span class="hljs-number">50</span>);<br>    Connection connection = comboPooledDataSource.getConnection();<br>    System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="druid使用"><a href="#druid使用" class="headerlink" title="druid使用"></a>druid使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDruid</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    Properties properties = <span class="hljs-keyword">new</span> Properties();<br>    properties.load(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\druid.properties&quot;</span>));<br>    <span class="hljs-comment">//创建一个指定参数的数据库连接池</span><br>    DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);<br>    Connection connection = dataSource.getConnection();<br>    System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="封装Druid工具类"><a href="#封装Druid工具类" class="headerlink" title="封装Druid工具类"></a>封装Druid工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtilsByDruid</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource ds;<br><br>    <span class="hljs-comment">//在静态代码块完成 ds初始化</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\druid.properties&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//编写getConnection 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> ds.getConnection();<br>    &#125;<br><br>    <span class="hljs-comment">//关闭连接 在数据库连接池技术中 close不是真的断开连接，而是放回连接池</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Connection connection, ResultSet resultSet, PreparedStatement preparedStatement)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-keyword">null</span>) &#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (preparedStatement != <span class="hljs-keyword">null</span>) &#123;<br>                preparedStatement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>                connection.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h3><p>关闭connection后，resultSet结果集无法使用</p><p>resultSet不利于数据的管理</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210710121408431.png" alt="image-20210710121408431"></p><p>通过采用对象关系映射，将结果集保存到集合中，这样查询到的数据可以持久化存储</p><p>commons-dbutils是apache组织提供的一个开源JDBC工具类库，它是对JDBC的封装，使用dbutils能极大简化jdbc编码的工作量</p><ul><li>QueryRunner类：该类封装了SQL的执行，是线程安全的，可以实现增、删、改、查、批处理</li><li>使用QueryRunner类实现查询</li><li>ResultSetHandler接口：该接口用于处理结果集，将数据按照要求转换成另一种形式</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210710123034779.png" alt="image-20210710123034779"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryMany</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<span class="hljs-comment">//返回数据是多行的情况</span><br>       <span class="hljs-comment">//1--得到连接</span><br>       Connection connection = JDBCUtilsByDruid.getConnection();<br>       <span class="hljs-comment">//使用DBUtils 得到queryRunner对象</span><br>       QueryRunner queryRunner = <span class="hljs-keyword">new</span> QueryRunner();<br>       <span class="hljs-comment">//执行SQL语句 得到resultSet--》封装到ArrayList集合中</span><br>       <span class="hljs-comment">//返回集合</span><br>       <span class="hljs-comment">//connection：连接</span><br>       <span class="hljs-comment">//sql：要执行的SQL语句</span><br>       <span class="hljs-comment">//new BeadListHandler 利用反射机制获取Actor类的属性 然后进行封装</span><br>       List&lt;Actor&gt; list = queryRunner.query(connection, <span class="hljs-string">&quot;select * from actor where id&gt;=?&quot;</span>, <span class="hljs-keyword">new</span> BeanListHandler&lt;&gt;(Actor.class), <span class="hljs-number">1</span>);<br>       <span class="hljs-keyword">for</span> (Actor actor : list) &#123;<br>           System.out.println(actor);<br>       &#125;<br>       <span class="hljs-comment">//释放资源</span><br>       <span class="hljs-comment">//底层得到的resultset会在query后释放</span><br>       JDBCUtilsByDruid.close(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p>通过DBUtils这个工具类可以大大简化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryMany</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<span class="hljs-comment">//返回数据是多行的情况</span><br>        <span class="hljs-comment">//1--得到连接</span><br>        Connection connection = JDBCUtilsByDruid.getConnection();<br>        <span class="hljs-comment">//使用DBUtils 得到queryRunner对象</span><br>        QueryRunner queryRunner = <span class="hljs-keyword">new</span> QueryRunner();<br>        <span class="hljs-comment">//执行SQL语句 得到resultSet--》封装到ArrayList集合中</span><br>        <span class="hljs-comment">//返回集合</span><br>        <span class="hljs-comment">//connection：连接</span><br>        <span class="hljs-comment">//sql：要执行的SQL语句</span><br>        <span class="hljs-comment">//new BeadListHandler 利用反射机制获取Actor类的属性 然后进行封装</span><br>        List&lt;Actor&gt; list = queryRunner.query(connection, <span class="hljs-string">&quot;select * from actor where id&gt;=?&quot;</span>, <span class="hljs-keyword">new</span> BeanListHandler&lt;&gt;(Actor.class), <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (Actor actor : list) &#123;<br>            System.out.println(actor);<br>        &#125;<br>        <span class="hljs-comment">//释放资源</span><br>        <span class="hljs-comment">//底层得到的resultset会在query后释放</span><br>        JDBCUtilsByDruid.close(connection, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDML</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>      Connection connection = JDBCUtilsByDruid.getConnection();<br>      QueryRunner queryRunner = <span class="hljs-keyword">new</span> QueryRunner();<br>      String sql = <span class="hljs-string">&quot;update actor set name = ? where id = ?&quot;</span>;<br>      <span class="hljs-comment">//update方法可以执行增 删 改</span><br>      <span class="hljs-comment">//返回值是受影响的行数</span><br>      <span class="hljs-keyword">int</span> affrctedRow = queryRunner.update(connection, sql, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">1</span>);<br>      System.out.println(affrctedRow);<br>      <span class="hljs-comment">//释放资源</span><br>      JDBCUtilsByDruid.close(connection, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210710160356180.png" alt="image-20210710160356180"></p><h3 id="BasicDao"><a href="#BasicDao" class="headerlink" title="BasicDao"></a>BasicDao</h3><p>上面的这种开发方式也存在一些问题</p><ul><li>SQL语句时固定的，不能通过参数传入，通用性不好，需要进行改进，</li><li>对于select操作，如果有返回值，返回类型不能固定，需要使用泛型</li><li>将来的标配很多，业务需求复杂，不能只靠一个java类完成</li></ul><p>BasicDao：将各个DAO共同的操作放在这里，简化代码，提高维护性和可读性， 专门与数据库交互，完成crud操作</p><p>在BasicDao的基础上，实现一张表对应一个Dao，更好的完成功能，比如Customer表-Customer.java类-CustomerDao.java</p><p>DAO：data access object 数据访问对象</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210710162318058.png" alt="image-20210710162318058"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:BasicDao是其他Dao的父类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-07-10 16:29</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicDao</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> QueryRunner qr = <span class="hljs-keyword">new</span> QueryRunner();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 通用dml方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [sql, params]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: int</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(String sql, Object... params)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtilsByDruid.getConnection();<br>            <span class="hljs-keyword">int</span> update = qr.update(connection, sql, params);<br>            <span class="hljs-keyword">return</span> update;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtilsByDruid.close(connection, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 查询语句 并且返回的是多行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [sql, clazz(class对象 反射是要用), params(参数)]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: java.util.List&lt;T&gt;</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">queryMuti</span><span class="hljs-params">(String sql, Class&lt;T&gt; clazz, Object... params)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtilsByDruid.getConnection();<br>            List&lt;T&gt; query = qr.query(connection, sql, <span class="hljs-keyword">new</span> BeanListHandler&lt;T&gt;(clazz), params);<br>            <span class="hljs-keyword">return</span> query;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtilsByDruid.close(connection, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 查询当行结果的通用方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [sql, clazz, params]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: T</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">querySingle</span><span class="hljs-params">(String sql, Class&lt;T&gt; clazz, Object... params)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtilsByDruid.getConnection();<br>            T query = qr.query(connection, sql, <span class="hljs-keyword">new</span> BeanHandler&lt;T&gt;(clazz), params);<br>            <span class="hljs-keyword">return</span> query;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtilsByDruid.close(connection, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 查询的是单行单列的方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [sql, params]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: java.lang.Object</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">queryScalar</span><span class="hljs-params">(String sql, Object... params)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtilsByDruid.getConnection();<br>            <span class="hljs-keyword">return</span> qr.query(connection, sql, <span class="hljs-keyword">new</span> ScalarHandler&lt;&gt;(), params);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtilsByDruid.close(connection, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb文件上传</title>
    <link href="/2021/07/09/javaweb%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2021/07/09/javaweb%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="使用类介绍"><a href="#使用类介绍" class="headerlink" title="使用类介绍"></a>使用类介绍</h2><p>注意事项</p><ul><li>为保证服务器安全，上传文件应该放在外界无法访问的目录下，比如放在WEB-INF目录下</li><li>为保证文件覆盖的现象发生，上传文件产生一个唯一的文件名</li><li>限制上传文件的最大值</li><li>可以限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法</li></ul><p>需要用到的类的详解</p><h3 id="ServletFileUpload"><a href="#ServletFileUpload" class="headerlink" title="ServletFileUpload"></a><code>ServletFileUpload</code></h3><p>负责处理上传的文件数据,并将表单中每个输入项封装成一个<code>FileItem</code>对象， 在使用<code>ServletFileUpload</code>对象解析请求时需要<code>DiskFileItemFactory</code>对象。所以，我们需要在进行解析工作前构造好<code>DiskFileItemFactory</code>对象，通过<code>ServletFileUpload</code>对象的构造方法或<code>setFileItemFactory()</code>方法设置<code>ServletFileUpload</code>对象的<code>fileItemFactory</code>属性</p><h3 id="FileItem"><a href="#FileItem" class="headerlink" title="FileItem"></a><code>FileItem</code></h3><p>在HTML页面input 必须有 name <code>&lt;input type=&quot;file&quot; name=&quot;filename&quot;&gt;</code>，表单如果包含一个文件上传输入项的话，这个表单的<code>enctype</code>属性就必须设置为<code>multipart/form-data</code>，在服务器端想获取数据也要通过流</p><h3 id="DiskFileItemFactory"><a href="#DiskFileItemFactory" class="headerlink" title="DiskFileItemFactory"></a><code>DiskFileItemFactory</code></h3><p>将请求消息实体中的每一个项目封装成单独的<code>DiskFileItem</code> (<code>FileItem</code>接口的实现) 对象的任务<br>由 <code>org.apache.commons.fileupload.FileItemFactory </code>接口的默认实现<br><code>org.apache.commons.fileupload.disk.DiskFileItemFactory</code> 来完成。当上传的文件项目比较小时，直接保存在内存中（速度比较快），比较大时，以临时文件的形式，保存在磁盘临时文件夹（虽然速度慢些，但是内存资源是有限的）</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="代码的思路"><a href="#代码的思路" class="headerlink" title="代码的思路"></a>代码的思路</h3><ul><li>判断用户上传的文件是普通的表单还是带文件的表单</li><li>出杨建文件上传保存的路径，推荐将其保存到WEB-INF路径下，这个路径下无法直接通过<code>url</code>进行访问，比较安全</li><li>创建临时路径，如果文件超过了预期大小，则把他放在一个临时的文件中</li><li>创建<code>DiskFileItemFactory</code>对象，设置文件临时路径(<code>setRepository</code>)和大小的限制</li><li>创建<code>ServletFileUpload</code>对象，设置编码格式，当个文件最大值，能够上传文件的大小，监听文件上传进度等</li><li>通过<code>ServletFileUpload</code>对象的<code>parseRequest</code>方法吧前端请求解析，封装成一个<code>FileItem</code>对象，判断上传的文件是普通话的表单还是带文件的表单</li><li>通过<code>FileItem</code>的<code>getName</code>方法获取文件名字并判断是否为空，可以使用<code>UUID</code>保证文件名唯一</li><li>拼接文件真实存在路径，并给每个文件创建一个对应的文件夹</li><li>通过<code>FileItem</code>的<code>getInputStream</code>方法获取文件上传的流，并创建一个文件输出流将文件写入真实保存路径，最后关闭流</li><li>上传成功可将页面转发到新的提示页面</li></ul><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><p>我们将获取<code>DiskFileItemFactory</code>对象、<code>ServletFileUpload</code>对象，以及文件保存的方法进行封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileUtils</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 返回一个DiskFileItemFactory对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [file]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: org.apache.commons.fileupload.disk.DiskFileItemFactory</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DiskFileItemFactory <span class="hljs-title">getDiskFileItemFactory</span><span class="hljs-params">(File file)</span> </span>&#123;<br>        DiskFileItemFactory factory = <span class="hljs-keyword">new</span> DiskFileItemFactory();<br>        <span class="hljs-comment">//通过这个工厂设置一个缓冲区，当上传的文件大于这个缓冲区的时候，将他放到临时文件中</span><br>        factory.setSizeThreshold(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>); <span class="hljs-comment">//缓冲区大小为1M</span><br>        factory.setRepository(file);<span class="hljs-comment">//临时文件保存的目录，需要一个File</span><br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 得到ServletFileUpload对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [factory]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: org.apache.commons.fileupload.servlet.ServletFileUpload</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServletFileUpload <span class="hljs-title">getServletFileUpload</span><span class="hljs-params">(DiskFileItemFactory factory)</span> </span>&#123;<br>        ServletFileUpload upload = <span class="hljs-keyword">new</span> ServletFileUpload(factory);<br>        <span class="hljs-comment">//监听文件上传进度</span><br>        upload.setProgressListener(<span class="hljs-keyword">new</span> ProgressListener() &#123;<br>            <span class="hljs-comment">//pBytesRead:已经读取到的文件大小</span><br>            <span class="hljs-comment">//pContentLength ： 文件大小</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">long</span> pBytesRead, <span class="hljs-keyword">long</span> pContentLength, <span class="hljs-keyword">int</span> pItems)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;总大小：&quot;</span> + pContentLength + <span class="hljs-string">&quot;已上传&quot;</span> + pBytesRead);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//处理乱码问题</span><br>        upload.setHeaderEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">//设置单个文件的最大值</span><br>        upload.setFileSizeMax(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//设置总共能够上传文件的大小</span><br>        upload.setSizeMax(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">return</span> upload;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 上传文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [upload, request, uploadPath]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: java.lang.String</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">uploadParseRequest</span><span class="hljs-params">(ServletFileUpload upload, HttpServletRequest request, String uploadPath)</span> <span class="hljs-keyword">throws</span> FileUploadException, IOException, IOException </span>&#123;<br>        String msg = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//把前端请求解析，封装成一个FileItem对象</span><br>        List&lt;FileItem&gt; fileItems = upload.parseRequest(request);<br>        <span class="hljs-keyword">for</span> (FileItem fileItem : fileItems) &#123;<br>            <span class="hljs-keyword">if</span> (fileItem.isFormField())&#123;<br>                String name = fileItem.getFieldName();<br>                String value = fileItem.getString(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                System.out.println(name+<span class="hljs-string">&quot;:&quot;</span>+value);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//****************************处理文件****************************</span><br>                <span class="hljs-comment">//拿到文件名字</span><br>                String uploadFileName = fileItem.getName();<br>                System.out.println(<span class="hljs-string">&quot;上传的文件名：&quot;</span>+uploadFileName);<br>                <span class="hljs-keyword">if</span> (uploadFileName.trim().equals(<span class="hljs-string">&quot;&quot;</span>) || uploadFileName==<span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-comment">//获得上传的文件名</span><br>                String fileName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>)+<span class="hljs-number">1</span>);<br>                <span class="hljs-comment">//获得文件的后缀名</span><br>                String fileExName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * 如果文件后缀名fileExName不是所需的直接return，不进行处理，告诉用户文件类型不对</span><br><span class="hljs-comment">                 * */</span><br>                System.out.println(<span class="hljs-string">&quot;文件信息 [文件名：&quot;</span>+fileName+<span class="hljs-string">&quot;---文件类型&quot;</span>+fileExName+<span class="hljs-string">&quot;]&quot;</span>);<br>                <span class="hljs-comment">//可以使用UUID（唯一识别通用码）保证文件名唯一</span><br>                String uuidPath = UUID.randomUUID().toString();<br>                <span class="hljs-comment">//****************************处理文件完毕****************************</span><br>                <span class="hljs-comment">//真实存在的路径</span><br>                String realPath = uploadPath+<span class="hljs-string">&quot;/&quot;</span>+uuidPath;<br>                <span class="hljs-comment">//给每个文件创建一个对应的文件夹</span><br>                File realPathFile = <span class="hljs-keyword">new</span> File(realPath);<br>                <span class="hljs-keyword">if</span> (!realPathFile.exists())&#123;<br>                    realPathFile.mkdir();<br>                &#125;<br>                <span class="hljs-comment">//****************************存放地址完毕*****************************</span><br>                <span class="hljs-comment">//获得文件上传的流</span><br>                InputStream inputStream = fileItem.getInputStream();<br>                <span class="hljs-comment">//创建一个文件输出流</span><br>                <span class="hljs-comment">//realPath是真实的文件夹</span><br>                FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(realPath + <span class="hljs-string">&quot;/&quot;</span>+fileName);<br>                <span class="hljs-comment">//创建一个缓冲区</span><br>                <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>                <span class="hljs-comment">//判断是否读取完毕</span><br>                <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> ((len=inputStream.read(buffer))&gt;<span class="hljs-number">0</span>)&#123;<br>                    fos.write(buffer,<span class="hljs-number">0</span>,len);<br>                &#125;<br>                <span class="hljs-comment">//关闭流</span><br>                fos.close();<br>                inputStream.close();<br>                msg = <span class="hljs-string">&quot;文件上传成功&quot;</span>;<br>                fileItem.delete();<span class="hljs-comment">//上传成功，清除临时文件</span><br>                <span class="hljs-comment">//*************************文件传输完毕**************************</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="上传的Servlet编写"><a href="#上传的Servlet编写" class="headerlink" title="上传的Servlet编写"></a>上传的Servlet编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fileUpload</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException, FileUploadException </span>&#123;<br>    <span class="hljs-comment">//判断用户上传的文件是普通表单还是带文件的表单，如果是普通文件直接返回</span><br>    <span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(req)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//创建文件上传保存的路路径，在WEB-INF路径下是安全的，用户无法直接访问上传文件</span><br>    String uploadPath = <span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br>    System.out.println(uploadPath);<br>    File uploadFile = <span class="hljs-keyword">new</span> File(uploadPath);<br>    <span class="hljs-keyword">if</span> (!uploadFile.exists()) &#123;<br>        uploadFile.mkdir();<br>    &#125;<br>    <span class="hljs-comment">//临时路径,如果文件好过了预期大小，就把他放到一个临时文件中，过几天自动删除，或者提醒用户转存为永久</span><br>    String tmpPath = <span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">&quot;WEB-INF/tmp&quot;</span>);<br>    File file = <span class="hljs-keyword">new</span> File(tmpPath);<br>    <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>        file.mkdir();<br>    &#125;<br>    <span class="hljs-comment">//处理上传的文件，一般通过流来获取，可以使用request.getInputStream(),原生态的文件上传流获取，十分麻烦</span><br>    <span class="hljs-comment">//建议使用 Apache的文件上传组件来实现，common-fileupload，它需要依赖于 commons-io组件；</span><br>    <span class="hljs-comment">//1、创建DiskFileItemFactory对象，处理文件上传路径或大小的限制</span><br>    DiskFileItemFactory factory = FileUtils.getDiskFileItemFactory(uploadFile);<br>    <span class="hljs-comment">//2、获取ServletFileUpload</span><br>    ServletFileUpload upload = FileUtils.getServletFileUpload(factory);<br>    <span class="hljs-comment">//3、处理上传的文件</span><br><br>    <span class="hljs-keyword">try</span> &#123;<br>        String msg = FileUtils.uploadParseRequest(upload, req, uploadPath);<br>        req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, msg);<br>        req.getRequestDispatcher(<span class="hljs-string">&quot;msg.jsp&quot;</span>).forward(req, resp);<br>    &#125; <span class="hljs-keyword">catch</span> (FileUploadException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="前端编写"><a href="#前端编写" class="headerlink" title="前端编写"></a>前端编写</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;文件上传&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/upload.do&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    上传用户: &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br/&gt;<br>    上传文件：&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>&gt;&lt;br/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;消息提示&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2021/07/08/JavaWeb/"/>
    <url>/2021/07/08/JavaWeb/</url>
    
    <content type="html"><![CDATA[<h2 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h2><h3 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h3><p>ASP</p><ul><li><p>微软：国内最早流行的技术</p></li><li><p>在HTML中嵌入了VB脚本，ASP+DOM</p></li><li><p>在ASP开发中，基本一个页面就有几千行代码，页面混乱</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>&lt;%<br>       System.out.printLn(&#x27;hello&#x27;)<br>     %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>php</p><ul><li>PHP开发速度快，跨平台，代码简单(70%,WP)</li><li>无法承载大访问量的情况(局限性)</li></ul><p><strong>JSP/Servlet</strong></p><ul><li>sun公司主推的B/S架构</li><li>基于java语言的</li><li>可以承载三高问题带来的影响</li><li>语法像ASP</li></ul><h3 id="常用了Web服务器"><a href="#常用了Web服务器" class="headerlink" title="常用了Web服务器"></a>常用了Web服务器</h3><p>服务器y从来处理用户的一些请求给以及给用户一些响应</p><p>IIS</p><p>微软的；ASP…Windows中自带的</p><p>Tomcat</p><ul><li>技术先进，性能稳定，免费</li><li>实际上运行页面和Servlet和JSP</li><li>适合java的初学者</li></ul><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p><strong>为什么要学习Maven?</strong></p><ol><li>在JavaWeb的开发中，需要使用大量的jar包，我们需要手动去导入</li><li>如何能够让一个东西自动帮我导入和配置这个jar包，这就是Maven的功能</li></ol><h3 id="Maven项目架构管理工具"><a href="#Maven项目架构管理工具" class="headerlink" title="Maven项目架构管理工具"></a>Maven项目架构管理工具</h3><p>Maven的核心思想：约定大于配置</p><ul><li>约束不要去违反</li></ul><p>Maven会规定好如何去编写我们的Java代码，必须按照这个规定来</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h3><ul><li>Servlet是sun公司开发动态web的一门技术</li><li>Sun公司在这些API中提供了一个接口叫做：Servlet，如果想要开发一个Servlet程序，只需要完成两个小步骤<ul><li>编写好一个类，实现Servlet</li><li>把开发好的java类部署到web服务器中</li></ul></li></ul><p><strong>把实现了Servlet接口的java程序叫做Servlet</strong></p><h3 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h3><p>1、构建一个Maven项目，删掉里面的src，以后我们的学习就在这个项目中建立moudel，这个空的工程就是Maven的主工程、</p><p>2、添加一个moudel，也通过Maven构建，这里可以成为子工程</p><blockquote><p>对于Maven父子工程的理解</p><p>父项目会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>servlet-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>子项目会有</p><p>但是我的项目中并没有，可能是版本问题</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210630133724419.png" alt="image-20210630133724419"></p></blockquote><p>3、Maven环境优化</p><p>​    修改web.xml为最新；将maven项目的结构搭建完整</p><p>4、编写一个servlet程序</p><ul><li><p>创建一个普通类</p></li><li><p>实现一个servlet接口，直接继承httpServlet</p><ul><li><pre><code class="java">public class HelloServlet extends HttpServlet &#123;  /** 由于get或者post知识请求实现的不同方式，可以相互调用，业务逻辑都一样 */  @Override  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;      PrintWriter writer = resp.getWriter();      writer.println(&quot;helloServlet&quot;);  &#125;  @Override  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;      super.doPost(req, resp);  &#125;&#125;<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><br><br>- ![image-20210630135020213](https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210630135020213.png)<br><br><br><br>5、编写Servlet的映射<br><br>​为什么需要映射，我们写的是JAVA的程序，但是要通过浏览器进行访问，而浏览器需要连接web服务器，所以我们需要在web服务中注册我们写的Servlet，要需要给一个浏览器需要访问的路径<br><br>  ```xml<br>  <span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.4&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--  注册Servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bobo.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br>  <br></code></pre></td></tr></table></figure>6、配置Tomcar的路径</code></pre></li></ul></li></ul><p>注意项目的发布路径</p><p>7、启动测试</p><h3 id="servlet运行原理"><a href="#servlet运行原理" class="headerlink" title="servlet运行原理"></a>servlet运行原理</h3><p>Servlet程序是由Web服务器调用的，Web服务器收到客户端的Servlet访问请求后：</p><ul><li>①Web服务器首先检查是否已经装载并创建了该Servlet的实例对象。如果是，则直接执行第④步，否则，执行第②步；</li><li>②装载并创建该Servlet的一个实例对象；</li><li>③调用Servlet实例对象的init()方法；</li><li>④创建一个用于封装HTTP请求消息的HttpServletRequest对象和一个代表HTTP响应消息的HttpServletResponse对象，然后调用Servlet的service()方法并将请求和响应对象作为参数传递进去；</li><li>⑤Web应用程序被停止或重新启动之前，Servlet引擎将卸载Servlet，并在卸载之前调用Servlet的destroy()方法。</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/20190324155210143.gif" alt="img"></p><h3 id="Mapping问题"><a href="#Mapping问题" class="headerlink" title="Mapping问题"></a>Mapping问题</h3><p>1、一个servlet可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、一个Servlet可以指定多个映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、通过通配符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、指定一些后缀或者前缀等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.qinjiang<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>优先级问题</p><p>指定了固定的映射路径优先级最高，如果找不到就会走默认的处理请求</p><h3 id="servletContext-上下文"><a href="#servletContext-上下文" class="headerlink" title="servletContext(上下文)"></a>servletContext(上下文)</h3><p>作用可以看成类似于session，作用是使得不同Servlet之间可以通信</p><p>Web容器在启动时，它为每个Web程序创建一个对应的ServletContext对象，它代表了当前的Web应用;</p><p>作用</p><blockquote><p>共享数据：我在这个ServletContext中保存的数据，可以在另外一个Servlet中拿到</p><p>Servlet-01</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;     ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();     String username = <span class="hljs-string">&quot;bobo&quot;</span>;     servletContext.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<span class="hljs-comment">//将一个数据保存到ServletContext中     System.out.println(&quot;我执行了！&quot;); &#125;</span><br></code></pre></td></tr></table></figure><p>Servlet-02</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;     ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();     String username = (String)servletContext.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);     resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);     resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);     resp.getWriter().println(<span class="hljs-string">&quot;名字&quot;</span>+username); &#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><p>请求转发和重定向不同，请求转发的路径不会发生变化，而重定向的url会发生变化，</p><p>实现</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210701132903793.png" alt="image-20210701132903793"></p><h4 id="读取资源文件"><a href="#读取资源文件" class="headerlink" title="读取资源文件"></a>读取资源文件</h4><p>Properties</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现：被打包到了同一个路径下：classes，我们俗称为类路径(class path)</p><p>实现代码</p><p>注意：新增资源文件也需要提供Maven重新编译，生成target文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo04</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HelloServlet</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();        InputStream is = servletContext.getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/mysql.properties&quot;</span>);        Properties prop = <span class="hljs-keyword">new</span> Properties();        prop.load(is);        System.out.println(prop.getProperty(<span class="hljs-string">&quot;username&quot;</span>)+<span class="hljs-string">&quot;:&quot;</span>+prop.getProperty(<span class="hljs-string">&quot;password&quot;</span>));    &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>Web服务器接收到客户端的请求后，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p><ul><li>如果要获取客户端请求过来的参数，找HttpServletRequest</li><li>如果要给客户端响应一些信息，找HttpServletResponse</li></ul><h4 id="负责向浏览器发送数据"><a href="#负责向浏览器发送数据" class="headerlink" title="负责向浏览器发送数据"></a>负责向浏览器发送数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ServletOutputStream <span class="hljs-title">getOutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<span class="hljs-function">PrintWriter <span class="hljs-title">getWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;。。。<br></code></pre></td></tr></table></figure><h4 id="负责设置响应头"><a href="#负责设置响应头" class="headerlink" title="负责设置响应头"></a>负责设置响应头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setCharacterEncoding</span><span class="hljs-params">(String var1)</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentType</span><span class="hljs-params">(String var1)</span></span>;。。。<br></code></pre></td></tr></table></figure><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><p>记住常见的即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> SC_OK = <span class="hljs-number">200</span>;<span class="hljs-keyword">int</span> SC_CREATED = <span class="hljs-number">201</span>;<span class="hljs-keyword">int</span> SC_MULTIPLE_CHOICES = <span class="hljs-number">300</span>;<span class="hljs-keyword">int</span> SC_MOVED_PERMANENTLY = <span class="hljs-number">301</span>;<span class="hljs-keyword">int</span> SC_MOVED_TEMPORARILY = <span class="hljs-number">302</span>;<span class="hljs-keyword">int</span> SC_FOUND = <span class="hljs-number">302</span>;<span class="hljs-keyword">int</span> SC_SEE_OTHER = <span class="hljs-number">303</span>;<span class="hljs-keyword">int</span> SC_NOT_MODIFIED = <span class="hljs-number">304</span>;<span class="hljs-keyword">int</span> SC_BAD_REQUEST = <span class="hljs-number">400</span>;<span class="hljs-keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="hljs-number">500</span>;<span class="hljs-keyword">int</span> SC_BAD_GATEWAY = <span class="hljs-number">502</span>;<br></code></pre></td></tr></table></figure><ul><li><h4 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h4></li><li><p>向浏览器输出消息</p></li><li><p>下载文件</p><ul><li>获取下载文件的路径</li><li>下载的文件名</li><li>浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到buffer缓冲区</li><li>使用OutputStream将缓冲区中的数据输出到客户端</li></ul></li></ul><h4 id="实现重定向"><a href="#实现重定向" class="headerlink" title="实现重定向"></a>实现重定向</h4><p>B一个Web资源收到客户端A请求后，B就会通知A客户端去访问另一个Web资源C，这个过程叫重定向</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210702124244253.png" alt="image-20210702124244253"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">resp.sendRedirect(<span class="hljs-string">&quot;/s2/code&quot;</span>);<span class="hljs-comment">//实现resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);resp.setStatus(302);</span><br></code></pre></td></tr></table></figure><blockquote><p>面试题：重定向与转发的区别</p><ul><li>相同点<ul><li>页面都会实现跳转</li></ul></li><li>不同点<ul><li>请求转发的时候，url不会产生变化</li><li>重定向的时候，url地址栏会发生变化</li></ul></li></ul></blockquote><h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><p>代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息</p><p>获取前端传递的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">req.getParameter(s1)req.getParameter(s2)req.getParameterValues(s3)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210702140815137.png" alt="image-20210702140815137"></p><h3 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h3><p>有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学曾经来过，称之为有状态会话</p><p>一个网站，怎么证明你来过</p><p>客户端 服务端</p><p>服务端给客户端一个信件，客户端下次访问服务端带上新建就可以了；cookie</p><p>服务端登记你来过，下次再进行访问的时候进行匹配即可 session</p><h4 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h4><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a><strong>cookie</strong></h4><p>从请求中拿到cookie信息</p><p>服务器响应给客户端的cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = req.getCookies();<span class="hljs-comment">//获得cookie        cookie.getName();//获得cookie的key        cookie.getValue();//获得cookie的value        new Cookie(key,value);//新建一个cookie        cookie.setMaxAge(秒);//设置过期时间</span><br></code></pre></td></tr></table></figure><p>cookie的上限</p><ul><li>一个cookie只能保存一个信息</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</li><li>cookie的大小限制为4kb</li><li>300个cookie浏览器上限</li></ul><p>cookie的删除</p><ul><li>不设置有效期，关闭浏览器，自动失效</li><li>设置有效时间为0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);        PrintWriter out = resp.getWriter();        <span class="hljs-comment">//cookie：服务端从客户端进行获取        Cookie[] cookies = req.getCookies();        //判断cookie是否存在        if (cookies != null) &#123;            //如果存在            for (Cookie cookie : cookies) &#123;                //获取cookie的名字                if (cookie.getName().equals(&quot;lastLoginTime&quot;)) &#123;                    //获取对应的值                    long lastLoginTime = Long.parseLong(cookie.getValue());                    Date date = new Date(lastLoginTime);                    out.write(&quot;上一次访问的时间是：&quot; + date.toLocaleString());                &#125;            &#125;        &#125; else &#123;            out.write(&quot;无cookie&quot;);        &#125;        resp.addCookie(new Cookie(&quot;lastLoginTime&quot;, System.currentTimeMillis() + &quot;&quot;));    &#125;</span><br></code></pre></td></tr></table></figure><h4 id="session"><a href="#session" class="headerlink" title="session"></a><strong>session</strong></h4><p>​    服务端技术，利用这个技术，可以保存用户的会话信息，把信息或者数据存储在Session中</p><p>常见的场景:</p><blockquote><p>保存一个用户的信息</p><p>购物车信息</p><p>在整个网站中经常会使用的数据，保存到Session中</p></blockquote><ul><li>服务器会给每个用户创建一个Session对象</li><li>一个session独占一个浏览器，只要浏览器没有关闭，这个session就存在</li><li>用户登录后，整个网站它都可以访问–&gt;用于保存用户信息，购物车信息等</li></ul><p>Session与Cookie的区别</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存()</li><li>Session是把用户的数据写入到用户独占的Session中，服务端进行保存(保存重要的信息，减少服务器资源的浪费)</li><li>Session对象有服务创建，当访问一个网站时，它会自动生成一个SessionId，而不需要手动去生成，sessionId可以区分不同的用户</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//得到Session        HttpSession session = req.getSession();        session.setAttribute(&quot;name&quot;, &quot;bobo&quot;);        //获取Session的ID        String id = session.getId();        //判断Session是否为最新的        if (session.isNew()) &#123;            resp.getWriter().write(&quot;session创建成功，ID&quot; + id);        &#125; else &#123;            resp.getWriter().write(&quot;session在服务器中已经存在：&quot; + id);        &#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210703142307804.png" alt="image-20210703142307804"></p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>Java Server Pages：java服务端页面，和Servlet一样，属于动态Web技术</p><p>最大的特点：写Jsp就像在写Html</p><p>区别</p><ul><li>​    HTML只给用户提供静态的数据</li><li>JSP页面可以嵌入JAVA代码，为用户提供动态数据</li></ul><h3 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理"></a>JSP原理</h3><p>浏览器向服务端发送请求，不管访问什么资源，其实都是在访问Servlet</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210703144508783.png" alt="image-20210703144508783"></p><p>Jsp本质上就是一个Servlet</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210703150413558.png" alt="image-20210703150413558"></p><p>在Jsp页面中，只要是Java代码，则会原封不动地输出</p><p>如果是HTML代码，则会转换成例如</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(&quot;&lt;html&gt;\r\n&quot;);<br></code></pre></td></tr></table></figure><p>这样的语句进行输出</p><h3 id="Jsp基础语法"><a href="#Jsp基础语法" class="headerlink" title="Jsp基础语法"></a>Jsp基础语法</h3><p>任何语言都有自己的语法，Java中有。Jsp作为java技术的一种应用，它拥有一些自己扩充的语法，Java的所有语法都支持</p><h4 id="Jsp表达式"><a href="#Jsp表达式" class="headerlink" title="Jsp表达式"></a>Jsp表达式</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%= <span class="hljs-keyword">new</span> java.util.Date()%&gt;<br></code></pre></td></tr></table></figure><h4 id="Jsp脚本片段"><a href="#Jsp脚本片段" class="headerlink" title="Jsp脚本片段"></a>Jsp脚本片段</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%-- Jsp脚本片段 --%&gt;&lt;%    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;        sum += i;    &#125;    out.print(<span class="hljs-string">&quot;&lt;h1&gt;Sum=&quot;</span> + sum + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);%&gt;<br></code></pre></td></tr></table></figure><h4 id="Jsp声明"><a href="#Jsp声明" class="headerlink" title="Jsp声明"></a>Jsp声明</h4><h3 id="Jsp-指令"><a href="#Jsp-指令" class="headerlink" title="Jsp 指令"></a>Jsp 指令</h3><p>JSP指令用来设置整个JSP页面相关的属性，如网页的编码方式和脚本语言。</p><p>语法格式如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>@ directive attribute=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><p>指令可以有很多个属性，它们以键值对的形式存在，并用逗号隔开。</p><p>JSP中的三种指令标签：</p><table><thead><tr><th align="left"><strong>指令</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">&lt;%@ page … %&gt;</td><td align="left">定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><tr><td align="left">&lt;%@ include … %&gt;</td><td align="left">包含其他文件</td></tr><tr><td align="left">&lt;%@ taglib … %&gt;</td><td align="left">引入标签库的定义</td></tr></tbody></table><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>下表列出与Page指令相关的属性：</p><table><thead><tr><th align="left"><strong>属性</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">buffer</td><td align="left">指定out对象使用缓冲区的大小</td></tr><tr><td align="left">autoFlush</td><td align="left">控制out对象的 缓存区</td></tr><tr><td align="left">contentType</td><td align="left">指定当前JSP页面的MIME类型和字符编码</td></tr><tr><td align="left">errorPage</td><td align="left">指定当JSP页面发生异常时需要转向的错误处理页面</td></tr><tr><td align="left">isErrorPage</td><td align="left">指定当前页面是否可以作为另一个JSP页面的错误处理页面</td></tr><tr><td align="left">extends</td><td align="left">指定servlet从哪一个类继承</td></tr><tr><td align="left">import</td><td align="left">导入要使用的Java类</td></tr><tr><td align="left">info</td><td align="left">定义JSP页面的描述信息</td></tr><tr><td align="left">isThreadSafe</td><td align="left">指定对JSP页面的访问是否为线程安全</td></tr><tr><td align="left">language</td><td align="left">定义JSP页面所用的脚本语言，默认是Java</td></tr><tr><td align="left">session</td><td align="left">指定JSP页面是否使用session</td></tr><tr><td align="left">isELIgnored</td><td align="left">指定是否执行EL表达式</td></tr><tr><td align="left">isScriptingEnabled</td><td align="left">确定脚本元素能否被使用</td></tr></tbody></table><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p>JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。</p><p>Include指令的语法格式如下：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;%@ include <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;文件相对 url 地址&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><p><strong>include</strong> 指令中的文件名实际上是一个相对的 URL 地址。</p><p>如果您没有给文件关联一个路径，JSP编译器默认在当前路径下寻找。</p><p>等价的XML语法：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">&lt;jsp:directive.<span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;文件相对 url 地址&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h3 id="9大内置对象"><a href="#9大内置对象" class="headerlink" title="9大内置对象"></a>9大内置对象</h3><ol><li>PageContext</li><li>Request</li><li>Response</li><li>Session</li><li>Application(<code>Serlvet Context</code>)</li><li>config(<code>SerlvetConfig</code>)</li><li>out</li><li>Page</li><li>excepetion</li></ol><p>生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;bobo1&quot;</span>);<span class="hljs-comment">//保存的数据只在一个页面中有效request.setAttribute(&quot;name2&quot;,&quot;bobo2&quot;);//只在一次请求中有效 请求转发会携带这个数据session.setAttribute(&quot;name3&quot;,&quot;bobo3&quot;);//在一次会话中有效 从打开浏览器到关闭浏览器application.setAttribute(&quot;name4&quot;,&quot;bobo4&quot;);//在服务器中有效 从打开服务器到关闭服务器</span><br></code></pre></td></tr></table></figure><p>上面的各个对象的作用域是由小变大的</p><p>都可以通过pageContext.getAttribute()方法进行操作</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210703191851669.png" alt="image-20210703191851669"></p><h3 id="JSP标签、JSTL标签、EL表达式"><a href="#JSP标签、JSTL标签、EL表达式" class="headerlink" title="JSP标签、JSTL标签、EL表达式"></a>JSP标签、JSTL标签、EL表达式</h3><p>EL表达式的作用：<code>$&#123;&#125;</code></p><ul><li>获取数据</li><li>执行运算</li><li>获取web开发的常用对象</li></ul><h4 id="JSP标签"><a href="#JSP标签" class="headerlink" title="JSP标签"></a>JSP标签</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210703194555169.png" alt="image-20210703194555169"></p><h4 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h4><p>JSTL标签库的使用是为了弥补HTML标签的不足，它自定义许多标签，可以供我们使用，标签的功能和Java代码一样</p><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><p>实体类</p><p>JavaBean有特定的写法</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法</li></ul><p>一般用来和数据库字段做映射ORM</p><p>ORM：对象关系映射</p><p>表——————&gt;类</p><p>字段—————&gt;属性</p><p>行记录————&gt;对象</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>bobo1</td><td>3</td><td>重庆</td></tr><tr><td>2</td><td>bobo2</td><td>10</td><td>重庆</td></tr><tr><td>3</td><td>bobo3</td><td>21</td><td>重庆</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span></span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<span class="hljs-keyword">private</span> String name;<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<span class="hljs-keyword">private</span> String address;&#125;<br></code></pre></td></tr></table></figure><h3 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h3><p>什么是MVC Model view Controller</p><p>分别是模型、视图、控制器</p><p>早些年的架构</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210704125936177.png" alt="image-20210704125936177"></p><p>用户直接访问控制层，控制层直接操作数据库</p><p>servlet- -CRUD–数据库</p><p>弊端：程序时分臃肿，不利于维护</p><p>Servlet的代码。既要处理请求，响应，视图跳转，处理JDBC，处理业务代码，处理逻辑代码</p><p>MVC的三层架构</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210704130826143.png" alt="image-20210704130826143"></p><p>Model</p><ul><li>业务处理：业务逻辑(Service)</li><li>数据持久层：CRUD (Dao)</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求</li></ul><p>Controller</p><ul><li>接收用户的请求：(req：请求参数，Session信息)</li><li>交给业务层处理对应的代码</li><li>控制视图的跳转</li></ul><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">例如登录的逻辑登录</span>--&gt;<span class="hljs-comment">接收用户的登录请求</span>--<span class="hljs-comment">》处理用户的请求(获取用户登录的参数，username，password)</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">》交给业务层处理登录业务</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">》Dao层查询用户名和密码是否正确</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-comment">数据库</span><br></code></pre></td></tr></table></figure><h3 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器(Filter)"></a>过滤器(Filter)</h3><p>处理中文乱码</p><p>登录验证</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210704134336586.png" alt="image-20210704134336586"></p><p>过滤器如何添加</p><p>1 导入包 主义 这个filter是在Servlet包下，不要导错了</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210704144720122.png" alt="image-20210704144720122"></p><p>2 编写过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo.filter;<span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/** * <span class="hljs-doctag">@description</span>: 编码过滤器 * <span class="hljs-doctag">@author</span>: bobo * <span class="hljs-doctag">@create</span>: 2021-07-04 14:34 **/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;    <span class="hljs-comment">//Web服务器已启动,就初始化了    public void init(FilterConfig filterConfig) throws ServletException &#123;        System.out.println(&quot;过滤器初始化&quot;);    &#125;    //filterChain    //过滤器的代码，在过滤特定请求的的时候都要被执行    //必须要让过滤器继续通行    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;        servletRequest.setCharacterEncoding(&quot;utf-8&quot;);        servletResponse.setCharacterEncoding(&quot;utf-8&quot;);        servletResponse.setContentType(&quot;text/html;charset=UTF-8&quot;);        System.out.println(&quot;过滤器执行前&quot;);        //让请求继续继续走，如果不写，程序到这就要被拦截        filterChain.doFilter(servletRequest,servletResponse);        System.out.println(&quot;过滤器执行后&quot;);    &#125;    //web服务器关闭时，过滤就会被销毁    public void destroy() &#123;        System.out.println(&quot;过滤器销毁&quot;);    &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>3 配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.bobo.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-comment">&lt;!--只要是/下面的所有请求 都会执行过滤器--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注解与反射</title>
    <link href="/2021/07/06/java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <url>/2021/07/06/java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><code>Java.Annotation</code></p><p>Annotation是从<code>JDK5.0</code>开始引用的新技术</p><ul><li>Annotation的作用：<ul><li>不是程序本身，可以对程序作出解释</li><li>可以被其他程序读取</li></ul></li><li>Annotation的格式<ul><li>注解是以<code>@注释名</code>在代码中存在的可以添加一些参数值，例如：<code>@SupressWarning(value=&quot;unchecked&quot;)</code></li></ul></li><li>Annotation在哪里使用<ul><li>可以附加在package、class、method、field等上面，相当于给他们添加额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问</li></ul></li></ul><h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622162949894.png" alt="image-20210622162949894"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:内置注解</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-22 16:24</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//镇压警告</span><br><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndsideAnnotation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span></span>&#123;<br>    <span class="hljs-comment">//重写注解</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.toString();<br>    &#125;<br>    <span class="hljs-comment">//不推荐程序员使用 已经过时</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Deprecated&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        test(); <span class="hljs-comment">//已过时</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>元注解的作用就是负责注解其他注解，Java定义了4个标准的mata-annotation类型，他们被用来提供其他annotation类型作说明</p><p>这些类型和它们所支持的类在java.lang.annotation包中可以找到</p><p>@Target @Retention @Documented @inherited</p><p>@<code>Target</code>:用于描述注解的使用范围</p><p>@<code>Retention</code>：表示需要在什么级别保存该注释信息，用于描述注解的生命周期(SOURCE&lt;CLASS&lt;RUNTIME)</p><p>@Document：说明该注解将被包含在javadoc中</p><p>@inherited:说明子类可以继承父类中的该注解</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622193516117.png" alt="image-20210622193516117"></p><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622194759334.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 元注解</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-22 16:38</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MetaAnnotation</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注解可以显式赋值，如果没有默认值，则必须给注解赋值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@MyAnnotation(name = &quot;bobo&quot;, schools = &#123;&quot;重庆交通大学&quot;, &quot;重庆邮电大学&quot;&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//定义一个注解 并且只能用于方法中</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="hljs-comment">//注解的生命周期为RunTime</span><br><span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-comment">//注解的参数：参数类型+参数名()</span><br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -1</span>;<span class="hljs-comment">//如果默认值为-1，代表不存在</span><br><br>    String[] schools();<br>&#125;<br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> MyAnnotations3&#123;<br>    <span class="hljs-comment">//value 为默认的注解名</span><br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="反射-Reflection"><a href="#反射-Reflection" class="headerlink" title="反射(Reflection)"></a>反射(Reflection)</h2><p>Reflection是？Java被视作动态语言的关键，反射机制允许程序在执行期间借助于Reflection API取得任何类的内部消息，并能直接操作任意对象的内部属性及方法</p><p>Class c = Class.forName(“java.lang.String”)</p><p>加载完类之后，在堆内存的方法区中就会产生了一个Class类型的对象（一个类只有一个Class对象 ）</p><p>这个对象就包含了完整的类的结构信息，我们可以通过这个对象看到类的结构</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622200021905.png" alt="image-20210622200021905"></p><p>反射的优点和缺点：</p><p>优点：可以实现动态创建对象和编译，体现出很大的灵活性</p><p>缺点：对性能的影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622202036493.png" alt="image-20210622202036493"></p><h3 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622202338079.png" alt="image-20210622202338079"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622202407522.png" alt="image-20210622202407522"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:获取class类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-22 20:25</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        Person person = <span class="hljs-keyword">new</span> Student();<br>        System.out.println(<span class="hljs-string">&quot;这个人是&quot;</span>+person.name);<br>        <span class="hljs-comment">//方式1：通过对象获得</span><br>        Class c1 = person.getClass();<br>        <span class="hljs-comment">//方式2：forname获得</span><br>        Class c2 =  Class.forName(<span class="hljs-string">&quot;Reflection.Student&quot;</span>);<br>        <span class="hljs-comment">//方式3：通过类名.class</span><br>        Class c3 = Student.class;<br>        <span class="hljs-comment">//方式4：基本类型的包装类才有</span><br>        Class c4 = Integer.TYPE;<br>        <span class="hljs-comment">//获得父类类型</span><br>        Class c5 = c1.getSuperclass();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;老师&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="哪些类可以获得Class对象"><a href="#哪些类可以获得Class对象" class="headerlink" title="哪些类可以获得Class对象"></a>哪些类可以获得Class对象</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622203515955.png" alt="image-20210622203515955"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class c1 = Object.class;<br>        Class c2 = Comparable.class;<br>        Class c3 = String[].class;<br>        Class c4 = <span class="hljs-keyword">int</span>[][].class;<br>        Class c5 = Override.class;<br>        Class c6 = ElementType.class;<br>        Class c7 = Integer.class;<br>        Class c8 = Class.class;<br>        Class c9 = <span class="hljs-keyword">void</span>.class;<br>        System.out.println(c1);<span class="hljs-comment">//class java.lang.Object</span><br>        System.out.println(c2);<span class="hljs-comment">//interface java.lang.Comparable</span><br>        System.out.println(c3);<span class="hljs-comment">//class [Ljava.lang.String;</span><br>        System.out.println(c4);<span class="hljs-comment">//class [[I</span><br>        System.out.println(c5);<span class="hljs-comment">//interface java.lang.Override</span><br>        System.out.println(c6);<span class="hljs-comment">//class java.lang.annotation.ElementType</span><br>        System.out.println(c7);<span class="hljs-comment">//class java.lang.Integer</span><br>        System.out.println(c8);<span class="hljs-comment">//class java.lang.Class</span><br>        System.out.println(c9);<span class="hljs-comment">//void</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="Java类加载过程"><a href="#Java类加载过程" class="headerlink" title="Java类加载过程"></a>Java类加载过程</h3><p>Java中的内存分为堆、栈、方法区</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622222027865.png" alt="image-20210622222027865"></p><p>类加载的过程分为如下三步</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622222221099.png" alt="image-20210622222221099"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210622225022336.png" alt="image-20210622225022336"></p><h3 id="哪些情况会触发类的初始化"><a href="#哪些情况会触发类的初始化" class="headerlink" title="哪些情况会触发类的初始化"></a>哪些情况会触发类的初始化</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210623103749610.png" alt="image-20210623103749610"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 测试类什么时候会被初始化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-23 10:27</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test06</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Main类被加载&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//new一个对象时会主动加载</span><br>        Son son = <span class="hljs-keyword">new</span> Son();<br>        <span class="hljs-comment">//反射也会产生主动加载</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;Reflection.Son&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//不会产生类的主动加载的方法</span><br>        System.out.println(Son.b);<br>        Son[] array = <span class="hljs-keyword">new</span> Son[<span class="hljs-number">5</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类被加载&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类被加载&quot;</span>);<br>        m = <span class="hljs-number">300</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><h4 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h4><p>将class文件字节码内容加载到内存中，并将这些静态数据转化成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</p><p>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载一段时间。JVM垃圾回收机制可以回收这些Class文件</p><h4 id="三类类加载器"><a href="#三类类加载器" class="headerlink" title="三类类加载器"></a>三类类加载器</h4><ul><li>引导类加载器：用C++编写，是JVM自带的类加载器，负责Java平台核心库，用来装载核心类库，通过Java无法直接获取</li><li>扩展类加载器：负责Jre/lib/ext目录下的jar包或-D java.ext.dir指定目录下的jar包装入工作库</li><li>系统类加载器：负责java -classpath或-D java.class.path所指目录下的类与jar包装入工作，是最常用的类加载器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test07</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//获取系统类的加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader()<br>        System.out.println(systemClassLoader);<span class="hljs-comment">//jdk.internal.loader.ClassLoaders$AppClassLoader@66d3c617</span><br>        <span class="hljs-comment">//获取系统类加载器的父类加载器--&gt;扩展类加载器</span><br>        ClassLoader parent = systemClassLoader.getParent();<br>        System.out.println(parent);<span class="hljs-comment">//jdk.internal.loader.ClassLoaders$PlatformClassLoader@119d7047</span><br>        <span class="hljs-comment">//获取扩展类对象的父类加载器--&gt;根加载器</span><br>        ClassLoader parent1 = parent.getParent();<br>        System.out.println(parent1);<span class="hljs-comment">//null</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    双亲委派机制：保证自定义类不会与系统类的名称相同</p><h3 id="获取类运行时的结构"><a href="#获取类运行时的结构" class="headerlink" title="获取类运行时的结构"></a>获取类运行时的结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:获取类的完整信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-28 15:11</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test08</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;<br>        <span class="hljs-comment">//获得类的名字</span><br>        User user = <span class="hljs-keyword">new</span> User();<br>        Class c1 = user.getClass();<br>        System.out.println(c1.getName());   <span class="hljs-comment">//获得类名+包名</span><br>        System.out.println(c1.getSimpleName());   <span class="hljs-comment">//获得类名</span><br>        <span class="hljs-comment">// 获得类的属性(只能获得public属性)</span><br>        Field[] fields = c1.getFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br>        fields = c1.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br>        Field name = c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br>        <span class="hljs-comment">//获得类的方法(获得本类及其父类的全部public方法)</span><br>        Method[] methods = c1.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method);<br>        &#125;<br>        <span class="hljs-comment">//获取本类的方法</span><br>        methods = c1.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method);<br>        &#125;<br>        <span class="hljs-comment">//获取指定方法</span><br>        Method getName = c1.getMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br>        System.out.println(getName);<br>        <span class="hljs-comment">//获得所有的构造器(public)</span><br>        Constructor[] constructors = c1.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>        <span class="hljs-comment">//获取所有的构造器</span><br>        constructors = c1.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>        <span class="hljs-comment">//获取指定构造器</span><br>        c1.getDeclaredConstructor(String.class,<span class="hljs-keyword">int</span>.class,<span class="hljs-keyword">int</span>.class);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="动态创建对象"><a href="#动态创建对象" class="headerlink" title="动态创建对象"></a>动态创建对象</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210628172242865.png" alt="image-20210628172242865"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210628172305401.png" alt="image-20210628172305401"></p><p><code>Object invoke(Object obj, Object ..args)</code></p><ul><li>Object对应原方法的返回值码，若原方法无返回值，此时返回null</li><li>若原方法为静态方法，此时形参Object obj可为null</li><li>若原方法形参列表为空，则Object[] args为null</li><li>若原方法声明为private，则需要在调用此invoke()方法之前，显式调用方法对象的setAccessible(true)方法，这样才可以访问<ul><li>方法，属性，构造函数对象都有setAccessible()方法</li><li>setAccessible作用是启动和禁止访问安全检查的开关</li><li>参数值为true则指示反射的对象在使用时应该取消java语言访问检查<ul><li>提高反射的效率。如果代码中必须使用反射，而该句代码需要频繁被调用，此时应该设置为true</li><li>使得原本无法访问的私有成员也可以访问</li></ul></li></ul></li><li>参数值为false则指示反射的对象应该实施java语言访问检查</li></ul><h3 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        Class c1 = Class.forName(<span class="hljs-string">&quot;Reflection.Student2&quot;</span>);<br>        <span class="hljs-comment">//反射获取注解</span><br>        Annotation[] annotations = c1.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.println(annotation);<br>        &#125;<br>        <span class="hljs-comment">//获取注解的value的值</span><br>        <span class="hljs-comment">//获取指定注解</span><br>        Table table = (Table) c1.getAnnotation(Table.class);<br>        <span class="hljs-comment">//获取值</span><br>        String value = table.value();<br>        System.out.println(value);<br>        <span class="hljs-comment">//获取指定的注解</span><br>        java.lang.reflect.Field f = c1.getDeclaredField(<span class="hljs-string">&quot;id&quot;</span>);<br>        Field annotation = f.getAnnotation(Field.class);<br>        System.out.println(annotation.type());<br>        System.out.println(annotation.columnName());<br>        System.out.println(annotation.length());<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Table(&quot;db_student&quot;)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student2</span> </span>&#123;<br>    <span class="hljs-meta">@Field(columnName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-meta">@Field(columnName = &quot;db_name&quot;, type = &quot;int&quot;, length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-meta">@Field(columnName = &quot;db_name&quot;, type = &quot;varchar&quot;, length = 3)</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student2</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-keyword">int</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//类名注解</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> Table &#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//属性注解</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> Field &#123;<br>    <span class="hljs-function">String <span class="hljs-title">columnName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">type</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java后端知识体系</title>
    <link href="/2021/06/29/Java%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <url>/2021/06/29/Java%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/Java%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB.png" alt="Java后端技术体系"></p>]]></content>
    
    
    <categories>
      
      <category>JavaSe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaIO</title>
    <link href="/2021/06/08/JavaIO/"/>
    <url>/2021/06/08/JavaIO/</url>
    
    <content type="html"><![CDATA[<h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="File的构造方法"><a href="#File的构造方法" class="headerlink" title="File的构造方法"></a>File的构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">File (File parent, String child) 从父抽象路径名和子路径名字符串创建新的 File实例。 <br>File (String pathname) 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。 <br>File (String parent, String child) 从父路径名字符串和子路径名字符串创建新的 File实例。 <br>File (URI uri) 通过将给定的 file: URI转换为抽象路径名来创建新的 File实例。 <br></code></pre></td></tr></table></figure><h3 id="File的方法列表"><a href="#File的方法列表" class="headerlink" title="File的方法列表"></a>File的方法列表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">createNewFile</span> <span class="hljs-params">()</span> 当且仅当具有该名称的文件尚不存在时，原子地创建一个由该抽象路径名命名的新的空文件。 </span><br><span class="hljs-function"><span class="hljs-keyword">static</span> File <span class="hljs-title">createTempFile</span> <span class="hljs-params">(String prefix, String suffix)</span> 在默认临时文件目录中创建一个空文件，使用给定的前缀和后缀生成其名称。 </span><br><span class="hljs-function"><span class="hljs-keyword">static</span> File <span class="hljs-title">createTempFile</span> <span class="hljs-params">(String prefix, String suffix, File directory)</span> 在指定的目录中创建一个新的空文件，使用给定的前缀和后缀字符串生成其名称。 </span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">delete</span> <span class="hljs-params">()</span> 删除由此抽象路径名表示的文件或目录。 </span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">exists</span> <span class="hljs-params">()</span> 测试此抽象路径名表示的文件或目录是否存在。 </span><br><span class="hljs-function">File <span class="hljs-title">getAbsoluteFile</span> <span class="hljs-params">()</span> 返回此抽象路径名的绝对形式。 </span><br><span class="hljs-function">String <span class="hljs-title">getAbsolutePath</span> <span class="hljs-params">()</span> 返回此抽象路径名的绝对路径名字符串。 </span><br><span class="hljs-function">String <span class="hljs-title">getName</span> <span class="hljs-params">()</span> 返回由此抽象路径名表示的文件或目录的名称。 </span><br><span class="hljs-function">String <span class="hljs-title">getPath</span> <span class="hljs-params">()</span> 将此抽象路径名转换为路径名字符串。 </span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isDirectory</span> <span class="hljs-params">()</span> 测试此抽象路径名表示的文件是否为目录。 </span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isFile</span> <span class="hljs-params">()</span> 测试此抽象路径名表示的文件是否为普通文件。 </span><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">length</span> <span class="hljs-params">()</span> 返回由此抽象路径名表示的文件的长度。 </span><br><span class="hljs-function">String[] <span class="hljs-title">list</span> <span class="hljs-params">()</span> 返回一个字符串数组，命名由此抽象路径名表示的目录中的文件和目录。 </span><br><span class="hljs-function">String[] <span class="hljs-title">list</span> <span class="hljs-params">(FilenameFilter filter)</span> 返回一个字符串数组，命名由此抽象路径名表示的目录中满足指定过滤器的文件和目录。 </span><br><span class="hljs-function">File[] <span class="hljs-title">listFiles</span> <span class="hljs-params">()</span> 返回一个抽象路径名数组，表示由该抽象路径名表示的目录中的文件。 </span><br><span class="hljs-function">File[] <span class="hljs-title">listFiles</span> <span class="hljs-params">(FileFilter filter)</span> 返回一个抽象路径名数组，表示由此抽象路径名表示的满足指定过滤器的目录中的文件和目录。 </span><br><span class="hljs-function">File[] <span class="hljs-title">listFiles</span> <span class="hljs-params">(FilenameFilter filter)</span> 返回一个抽象路径名数组，表示由此抽象路径名表示的满足指定过滤器的目录中的文件和目录。 </span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">mkdir</span> <span class="hljs-params">()</span> 创建由此抽象路径名命名的目录。 </span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">mkdirs</span> <span class="hljs-params">()</span> 创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录。 </span><br><span class="hljs-function">String <span class="hljs-title">toString</span> <span class="hljs-params">()</span> 返回此抽象路径名的路径名字符串。 </span><br></code></pre></td></tr></table></figure><h3 id="案例-递归获取该文件夹下所有的文件名"><a href="#案例-递归获取该文件夹下所有的文件名" class="headerlink" title="案例 递归获取该文件夹下所有的文件名"></a>案例 递归获取该文件夹下所有的文件名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo_01;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        File dir = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\java学习&quot;</span>);<br>        showDir(dir);<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">showDir</span><span class="hljs-params">(File dir)</span></span>&#123;<br>        File[] files = dir.listFiles();<br>        <span class="hljs-keyword">for</span>(File file:files)&#123;<br>            <span class="hljs-keyword">if</span>(file.isDirectory())&#123;<br>                showDir(file);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                System.out.println(file.getName());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="InputStream字节输入流"><a href="#InputStream字节输入流" class="headerlink" title="InputStream字节输入流"></a>InputStream字节输入流</h3><p>输入输出针对的输入到源程序，输入流例如从内存中获取文本中读取字节流到程序中</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/1058428-20191225150455899-1464479690.png" alt="img"></p><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream (File file) 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 <br>FileInputStream (FileDescriptor fdObj) 通过使用文件描述符 fdObj创建 FileInputStream ，该文件描述符表示与文件系统中的实际文件的现有连接。 <br>FileInputStream (String name) 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。 <br></code></pre></td></tr></table></figure><p>其实构造方法3和构造方法1最终的效果差不多，使用方法3中也先创建了一个File对象，然后调用方法1</p><h4 id="方法列表"><a href="#方法列表" class="headerlink" title="方法列表"></a>方法列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> 关闭此文件输入流并释放与流相关联的任何系统资源。 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> 从该输入流读取一个字节的数据。 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b)</span> 从该输入流读取最多 b.length个字节的数据到一个字节数组。 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span> 从该输入流读取最多 len个字节的数据到字节数组。 </span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><h4 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h4><p>程序来自<a href="https://www.cnblogs.com/wugongzi/p/12092326.html">https://www.cnblogs.com/wugongzi/p/12092326.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">FileStream</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        readFile_3();<br>    &#125;<br> <br>    <span class="hljs-comment">//打开文件，一次读取刚刚好内容的字节</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readFile_3</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;fos.txt&quot;</span>);<br>         <br>        <span class="hljs-comment">//available()返回从此输入流中可以读取（或跳过）的剩余字节数的估计值，而不会被下一次调用此输入流的方法阻塞。</span><br>        <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[fis.available()];<span class="hljs-comment">//定义一个刚刚好的缓冲区。不用在循环了。</span><br> <br>        fis.read(buf);<br> <br>        System.out.println(<span class="hljs-keyword">new</span> String(buf));<br> <br>        fis.close();<br>    &#125;<br> <br> <br>    <span class="hljs-comment">//打开文件，一次读取多个字节</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readFile_2</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;fos.txt&quot;</span>);<br> <br>        <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((len=fis.read(buf))!=-<span class="hljs-number">1</span>)<br>        &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> String(buf,<span class="hljs-number">0</span>,len));<br>        &#125;<br> <br>        fis.close();<br>         <br>    &#125;<br> <br> <br>    <span class="hljs-comment">//打开文件，一次读取一个字节</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readFile_1</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br> <br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;fos.txt&quot;</span>);<br> <br>        <span class="hljs-keyword">int</span> ch = <span class="hljs-number">0</span>;<br> <br>        <span class="hljs-keyword">while</span>((ch=fis.read())!=-<span class="hljs-number">1</span>)<br>        &#123;<br>            System.out.println((<span class="hljs-keyword">char</span>)ch);<br>        &#125;<br> <br>        fis.close();<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OutPutStream输出字节流"><a href="#OutPutStream输出字节流" class="headerlink" title="OutPutStream输出字节流"></a>OutPutStream输出字节流</h3><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/1058428-20191225152925629-1137973087.png" alt="img"></p><h3 id="FileOutPutStream"><a href="#FileOutPutStream" class="headerlink" title="FileOutPutStream"></a>FileOutPutStream</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">FileOutputStream (File file) 创建文件输出流以写入由指定的 File对象表示的文件。 <br>FileOutputStream (FileDescriptor fdObj) 创建文件输出流以写入指定的文件描述符，表示与文件系统中实际文件的现有连接。 <br>FileOutputStream (File file, <span class="hljs-keyword">boolean</span> append) 创建文件输出流以写入由指定的 File对象表示的文件。 <br>FileOutputStream (String name) 创建文件输出流以指定的名称写入文件。 <br>FileOutputStream (String name, <span class="hljs-keyword">boolean</span> append) 创建文件输出流以指定的名称写入文件。<br></code></pre></td></tr></table></figure><p>构造方法的第二个参数如果为<code>true</code>，表示是从文件末尾进行追加</p><h4 id="方法列表-1"><a href="#方法列表-1" class="headerlink" title="方法列表"></a>方法列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span> <span class="hljs-params">()</span> 关闭此文件输出流并释放与此流相关联的任何系统资源。 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span> <span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b)</span> 将 b.length字节从指定的字节数组写入此文件输出流。</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span> <span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span> 将 len字节从指定的字节数组开始，从偏移量 off开始写入此文件输出流。 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> b)</span> 将指定的字节写入此文件输出流。 </span><br></code></pre></td></tr></table></figure><h4 id="实际使用-1"><a href="#实际使用-1" class="headerlink" title="实际使用"></a>实际使用</h4><p>程序来自<a href="https://www.cnblogs.com/wugongzi/p/12092326.html">https://www.cnblogs.com/wugongzi/p/12092326.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileStreamTest</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FileName = <span class="hljs-string">&quot;file.txt&quot;</span>;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        testWrite();<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * FileOutputStream 演示函数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 运行结果：</span><br><span class="hljs-comment">     * 在源码所在目录生成文件&quot;file.txt&quot;，文件内容是“abcdefghijklmnopqrstuvwxyz0123456789”</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 加入，我们将 FileOutputStream fileOut2 = new FileOutputStream(file, true);</span><br><span class="hljs-comment">     *       修改为 FileOutputStream fileOut2 = new FileOutputStream(file, false);</span><br><span class="hljs-comment">     * 然后再执行程序，“file.txt”的内容变成&quot;0123456789&quot;。</span><br><span class="hljs-comment">     * 原因是：</span><br><span class="hljs-comment">     * (01) FileOutputStream fileOut2 = new FileOutputStream(file, true);</span><br><span class="hljs-comment">     *      它是以“追加模式”将内容写入文件的。即写入的内容，追加到原始的内容之后。</span><br><span class="hljs-comment">     * (02) FileOutputStream fileOut2 = new FileOutputStream(file, false);</span><br><span class="hljs-comment">     *      它是以“新建模式”将内容写入文件的。即删除文件原始的内容之后，再重新写入。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testWrite</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建文件“file.txt”对应File对象</span><br>            File file = <span class="hljs-keyword">new</span> File(FileName);<br>            <span class="hljs-comment">// 创建文件“file.txt”对应的FileOutputStream对象，默认是关闭“追加模式”</span><br>            FileOutputStream fileOut1 = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>            <span class="hljs-comment">// 创建FileOutputStream对应的PrintStream，方便操作。PrintStream的写入接口更便利</span><br>            PrintStream out1 = <span class="hljs-keyword">new</span> PrintStream(fileOut1);<br>            <span class="hljs-comment">// 向“文件中”写入26个字母</span><br>            out1.print(<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>);<br>            out1.close();<br> <br>            <span class="hljs-comment">// 创建文件“file.txt”对应的FileOutputStream对象，打开“追加模式”</span><br>            FileOutputStream fileOut2 = <span class="hljs-keyword">new</span> FileOutputStream(file, <span class="hljs-keyword">true</span>);<br>            <span class="hljs-comment">// 创建FileOutputStream对应的PrintStream，方便操作。PrintStream的写入接口更便利</span><br>            PrintStream out2 = <span class="hljs-keyword">new</span> PrintStream(fileOut2);<br>            <span class="hljs-comment">// 向“文件中”写入&quot;0123456789&quot;+换行符</span><br>            out2.println(<span class="hljs-string">&quot;0123456789&quot;</span>);<br>            out2.close();<br> <br>        &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字节流读取中文文本不方便，Java提供了字符流</p><p>字符流 = 字节流 + 编码表</p><p>用字节流复制文本文件时，文本文件也会有中文，但是没有问题，原因是最终底层的操作会自动进行字节拼接成中文</p><p>这是由于汉字在存储时，无论选择哪种编码存储，第一个字节都是负数</p><h3 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h3><p>按照某种规则，将字符存储到计算机中，称为编码。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为解码</p><p><code>按照A编码存储码，必须按照A编码解析，这样才能显示正确的文本符号，否则将出现乱码现象</code></p><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><ul><li>是一个系统支持的所有字符的集合，包括各个国家文字，标点符号，图形符号，数字等</li><li>计算机要准确的存储和识别各种字符集符号，就需要进行字符编码，一套字符集必然至少有一套字符编码。</li><li>常见的字符集包括ASCII字符集，GBXXX字符集，UniCode字符集等</li></ul><h3 id="字符串中的编码解码问题"><a href="#字符串中的编码解码问题" class="headerlink" title="字符串中的编码解码问题"></a>字符串中的编码解码问题</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><ul><li>byte[] getBytes():使用平台默认字符集将该String编码为一系列字节，将结果存储到新的字节数组中</li><li>byte[] getBytes(String charsetName):使用指定的字符集将该String编码为一系列字节，将结果存储到新的字节数组中</li></ul><h4 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h4><ul><li>String(byte[] bytes):使用平台的默认字符集解码指定的字节数组来构造新的String</li><li>String(byte[] bytes,String charSetNmae):通过指定的字符集解码指定的字节数组来构造新的String</li></ul><h3 id="字符流中的编码解码问题"><a href="#字符流中的编码解码问题" class="headerlink" title="字符流中的编码解码问题"></a>字符流中的编码解码问题</h3><p>字符流抽象基类</p><p>Reader:字符输入流的抽象类</p><p>Writer：字符输出流的抽象类</p><p>字符流中的编码和解码相关的两个类</p><p><code>InputStreamReader</code>:从字节流到字符流的桥：它读取字节，并使用指定的charset将其解码为字符</p><p><code>OutputStreamWriter</code>：从字符流到字节流的桥梁，使用指定的编码将写入的字符编码为字节</p><h3 id="字符流写数据"><a href="#字符流写数据" class="headerlink" title="字符流写数据"></a>字符流写数据</h3><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">OutputStreamWriter(OutputStream out) 创建一个使用默认字符编码的OutputStreamWriter<br>OutputStreamWriter(OutputStream out, String charsetName) 创建一个使用命名字符集的OutputStreamWriter<br>OutputStreamWriter(OutputStream out, Charset cs) 创建一个使用给定字符集的OutputStreamWriter<br>OutputStreamWriter(OutputStream out, CharsetEncoder enc) 创建一个使用给定字符集编码器的OutputStreamWriter <br></code></pre></td></tr></table></figure><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span> <span class="hljs-params">()</span> 关闭流，先刷新。 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flush</span> <span class="hljs-params">()</span> 刷新流。 </span><br><span class="hljs-function">String <span class="hljs-title">getEncoding</span> <span class="hljs-params">()</span> 返回此流使用的字符编码的名称。 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span> <span class="hljs-params">(<span class="hljs-keyword">char</span>[] cbuf, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span> 写入字符数组的一部分。 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span> 写一个字符 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span> <span class="hljs-params">(String str, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span> 写一个字符串的一部分。 </span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputStreamDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        OutputStreamWriter osw = <span class="hljs-keyword">new</span> OutputStreamWriter(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;osw.txt&quot;</span>));<br>        osw.write(<span class="hljs-number">97</span>);<br>        osw.flush();<span class="hljs-comment">//注意输出完成后需要调用此方法，否则无法将输入的内容保存到文件中</span><br>        <span class="hljs-comment">//释放资源之前，也会自动刷新</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符流读数据"><a href="#字符流读数据" class="headerlink" title="字符流读数据"></a>字符流读数据</h3><h4 id="常用API-1"><a href="#常用API-1" class="headerlink" title="常用API"></a>常用API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> 一次读入一个字符数据</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] cbuf)</span> 一次读入到一个字符数组中</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputStreamDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;osw.txt&quot;</span>));<br><br>        <span class="hljs-comment">//一次读入一个字符</span><br>        <span class="hljs-keyword">int</span> ch;<br>        <span class="hljs-keyword">while</span>((ch=isr.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-keyword">char</span>)ch);<br>        &#125;<br>        <span class="hljs-comment">//读入到字符数组中</span><br>        InputStreamReader isr1 = <span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;osw.txt&quot;</span>));<br>        <span class="hljs-keyword">char</span>[] chs = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len=isr1.read(chs))!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.print(<span class="hljs-keyword">new</span> String(chs,<span class="hljs-number">0</span>,len));<br><br>        &#125;<br>        isr.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="子类-FileReader-FileWriter"><a href="#子类-FileReader-FileWriter" class="headerlink" title="子类(FileReader FileWriter)"></a>子类(FileReader FileWriter)</h3><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造方法</span><br>OutputStreamWriter (OutputStream out) 创建一个使用默认字符编码的OutputStreamWriter<br>OutputStreamWriter (OutputStream out, String charsetName) 创建一个使用命名字符集的OutputStreamWriter<br>OutputStreamWriter (OutputStream out, Charset cs) 创建一个使用给定字符集的OutputStreamWriter<br>OutputStreamWriter (OutputStream out, CharsetEncoder enc) 创建一个使用给定字符集编码器的OutputStreamWriter <br><br><span class="hljs-comment">// 常用API</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span> <span class="hljs-params">()</span> 关闭流，先刷新。 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flush</span> <span class="hljs-params">()</span> 刷新流。 </span><br><span class="hljs-function">String <span class="hljs-title">getEncoding</span> <span class="hljs-params">()</span> 返回此流使用的字符编码的名称。 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span> <span class="hljs-params">(<span class="hljs-keyword">char</span>[] cbuf, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span> 写入字符数组的一部分。 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span> 写一个字符 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span> <span class="hljs-params">(String str, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span> 写一个字符串的一部分。 </span><br></code></pre></td></tr></table></figure><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造方法</span><br>FileReader (File file) 创建一个新的 FileReader ，给出 File读取。 <br>FileReader (FileDescriptor fd) 创建一个新的 FileReader ，给予 FileDescriptor从中读取。 <br>FileReader (String fileName) 创建一个新的 FileReader ，给定要读取的文件的名称。 <br></code></pre></td></tr></table></figure><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><h4 id="BufferWriter"><a href="#BufferWriter" class="headerlink" title="BufferWriter"></a>BufferWriter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferWriterDemo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建一个字符写入流对象。</span><br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;buf.txt&quot;</span>);<br>        <span class="hljs-comment">//为了提高字符写入流效率。加入了缓冲技术。</span><br>    <span class="hljs-comment">//只要将需要被提高效率的流对象作为参数传递给缓冲区的构造函数即可。</span><br>        BufferedWriter bw=<span class="hljs-keyword">new</span> BufferedWriter(fw);<br>        <span class="hljs-keyword">char</span>[] c=&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>&#125;;<br>        bw.write(c,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br> <br>        <span class="hljs-comment">//换行</span><br>        bw.newLine();<br> <br>        <span class="hljs-comment">//再次写入</span><br>        bw.write(c,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br> <br>        <span class="hljs-comment">//刷新流</span><br>        bw.flush();<br>        <span class="hljs-comment">//其实关闭缓冲区，就是在关闭缓冲区中的流对象。</span><br>        bw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BufferReader"><a href="#BufferReader" class="headerlink" title="BufferReader"></a>BufferReader</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">FileReaderDemo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//创建一个文件读取流对象，和指定名称的文件相关联。</span><br>        <span class="hljs-comment">//要保证该文件是已经存在的，如果不存在，会发生异常FileNotFoundException</span><br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;demo.txt&quot;</span>);<br> <br>        <span class="hljs-comment">//调用读取流对象的read方法。</span><br>        <span class="hljs-comment">//read():一次读一个字符。而且会自动往下读。</span><br>         <br>        <span class="hljs-keyword">int</span> ch = <span class="hljs-number">0</span>;<br> <br>        <span class="hljs-keyword">while</span>((ch=fr.read())!=-<span class="hljs-number">1</span>)<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;ch=&quot;</span>+(<span class="hljs-keyword">char</span>)ch);<br>        &#125;<br> <br>        <span class="hljs-comment">//关闭流</span><br>        fr.close();<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="特有功能"><a href="#特有功能" class="headerlink" title="特有功能"></a>特有功能</h4><p>BufferWriter</p><p>void newLine():写一行分割符，行分隔符字符串由系统属性定义</p><p>BufferReader</p><p>public String readLine():读一行文字。结果包含行的内容字符串，不包含任何终止字符，如果流的结尾已经到达，则为null</p><h2 id="特殊操作流"><a href="#特殊操作流" class="headerlink" title="特殊操作流"></a>特殊操作流</h2><h3 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h3><h4 id="标准输入流"><a href="#标准输入流" class="headerlink" title="标准输入流"></a>标准输入流</h4><p><code>public static final InputStream in</code>:标准输入流 通常该流对应于键盘输入或有主机环境或用户指定的另一个输入源</p><p><code>public static final PrintStream out</code>:标准输出流。通常该流对应于显示输出或由主机环境或用户指定另一个输出目标</p><p>自己实现键盘录入数据</p><p><code>BufferedReader br = new BufferedReader(new InputStreamReader(System.in))</code></p><h4 id="标准输出流"><a href="#标准输出流" class="headerlink" title="标准输出流"></a>标准输出流</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">PrintStream ps = <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span><br><br>ps.println()<br></code></pre></td></tr></table></figure><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><h4 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h4><h4 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h4><h3 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h3><p>对象序列化：就是将对象保存到磁盘中，或者再网络中传输对象</p><p>这种机制就是使用一个字节序列表示一个对象，该字节序列包含：对象的类型，对象的数据和对象中存储属性等信息</p><p>字节序列写到文件之后，相当于文件中持久保存了一个对象的信息</p><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><p>ObjectOutputStream(OutputStream out):创建一个写入指定的OutputStream的ObjectOutput</p><h4 id="序列化对象的方法"><a href="#序列化对象的方法" class="headerlink" title="序列化对象的方法"></a>序列化对象的方法</h4><p><code>void writeObject(Object obj)</code>：将指定的对象写入ObjectOutputStream</p><p>一个对象要想被序列化，该对象所属的类必须实现<code>Serializable</code>接口</p><p><code>Serializable</code>是一个标记接口，实现该接口，不需要重写任何方法</p><h3 id="对象反序列化"><a href="#对象反序列化" class="headerlink" title="对象反序列化"></a>对象反序列化</h3><p><code>ObjectInputStream</code>反序列化先前使用ObjectOutputStream编写的原始数据和对象</p><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><p><code>ObjectInputStream(InputStream in)</code>:创建从指定的InputStream读取的ObjectInputStream</p><h4 id="反序列化方法"><a href="#反序列化方法" class="headerlink" title="反序列化方法"></a>反序列化方法</h4><p><code>Object readObject()</code>:从ObjectInputStream读取一个对象</p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul><li>是一个Map体系的集合类</li><li>Properties可以保存到流中或从流中加载</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/421872ba4f0852f343323131f53d7d9c15986431.png"></p><h4 id="与流向结合"><a href="#与流向结合" class="headerlink" title="与流向结合"></a>与流向结合</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/e84457836189fdf5b11a4ff906221d08cbbc50f4.png"></p>]]></content>
    
    
    <categories>
      
      <category>JavaSe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合</title>
    <link href="/2021/06/06/Java%E9%9B%86%E5%90%88/"/>
    <url>/2021/06/06/Java%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h3 id="集合知识体系"><a href="#集合知识体系" class="headerlink" title="集合知识体系"></a>集合知识体系</h3><p>集合类的特点：提供一种存储空间可变的存储模型，存储的数据容量可以随时发生改变</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/62ce3f4c92901d2bfa45d97e0d79886c9971be96.png"></p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><ul><li>是单例集合的顶层接口，它表示一组对象，这些对象也称为Collection的元素</li><li><code>JDK</code>不提供此接口的任何直接表现，它提供更具体的子接口(如Set和List)实现</li></ul><p>创建Collection集合的对象</p><ul><li>多态的方式</li><li>具体的实现类<code>ArrayList</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建Collection集合的对象</span><br>        Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        <span class="hljs-comment">//添加元素</span><br>        c.add(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        System.out.println(c);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/986a78081f3478fea9f1a8b78a0169c53c6d217f.png"></p><p>Collection 集合的遍历</p><p><code>lterator</code>：迭代器，集合的专用遍历形式</p><ul><li>Iterator<E>iterator():返回此集合中元素的迭代器，通过集合的iterator()方法得到</li><li>迭代器是通过集合的iterator()方法得到的，所以我们说它是依赖于集合而存在的</li></ul><p>Iterator的常用方法</p><ul><li>E next():返回迭代中的下一个元素</li><li>boolean hasNext():如果迭代器具有更多元素，则返回true</li></ul><h4 id="集合的使用方法"><a href="#集合的使用方法" class="headerlink" title="集合的使用方法"></a>集合的使用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 集合的使用方法</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建Collection集合的对象</span><br>        Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        <span class="hljs-comment">//添加元素</span><br>        c.add(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        <span class="hljs-comment">// 遍历集合</span><br>        Iterator&lt;String&gt; it  = c.iterator();          <span class="hljs-comment">//获取迭代器对象</span><br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;                    <span class="hljs-comment">//通过迭代器的hasNext()方法判断是否还有元素</span><br>            String s = it.next();                  <span class="hljs-comment">//通过迭代器对象的next()方法获取下一个元素</span><br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><ul><li>List集合也称为序列，用户可以精确控制列表每个元素的插入位置，用户可以通过整数索引访问元素，并搜索列表中的元素</li><li>与Set集合不同，列表通常允许重复的元素</li></ul><p>List集合的特点</p><ul><li>有序：存储和取出的元素顺序一致</li><li>可重复：存储的元素可以重复</li></ul><h4 id="List使用"><a href="#List使用" class="headerlink" title="List使用"></a>List使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        list.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;world&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 迭代器的方式遍历</span><br>        Iterator&lt;String&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            String s = it.next();<br>            System.out.println(s);<br>        &#125;<br>        <span class="hljs-comment">// 遍历方式2</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>            String s = list.get(i);<br>            System.out.printLn(s);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="List集合特有方法"><a href="#List集合特有方法" class="headerlink" title="List集合特有方法"></a>List集合特有方法</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/1033ac21c7445e1cad8eeafb4e628100e3345f2b.png"></p><h4 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h4><p>产生的原因：迭代器遍历List集合的过程中，我们通过调用add方法添加元素，这是<code>modcount</code>会加1，但是<code>expectedModCount</code>并没有发生改变，在遍历List集合过程中会比对这两个值是否相等，如果不相等，则会报并发修改异常的错误</p><p>解决方法</p><p>使用<code>for</code>循环+get()方法进行遍历进行遍历</p><h4 id="列表迭代器"><a href="#列表迭代器" class="headerlink" title="列表迭代器"></a>列表迭代器</h4><p><code>ListIterator</code></p><p>通过List集合的l<code>listIterator()</code>方法得到，所以说它是List集合特有的迭代器</p><p>它继承于<code>Iterator</code> 用于允许程序员沿着任意方向遍历列表</p><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">next</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//返回迭代器的下一个元素</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 如果迭代具有更多元素，则返回true</span><br><span class="hljs-function">E <span class="hljs-title">previous</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//返回列表中的上一个元素</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPrevious</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//如果此列表迭代器在相反方向遍历列表时具有更多元素，则返回true</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span><span class="hljs-comment">//将指定的元素插入列表(不会存在并发异常)</span></span><br></code></pre></td></tr></table></figure><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><p>简化数组和Collection集合的遍历</p><p>实现<code>Iterable</code>接口的类允许其对象成为增强型for语句的目标</p><p>它是<code>JDK5</code>之后出现的，其内部的实现原理是一个Iterator迭代器</p><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(元素数据类型 变量名: 数组或者Collection)&#123;<br><span class="hljs-comment">//此处使用变量即可</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="List集合子类"><a href="#List集合子类" class="headerlink" title="List集合子类"></a>List集合子类</h4><p><code>ArrayList</code>，<code>LinkedList</code></p><h4 id="LinkedList的特有功能"><a href="#LinkedList的特有功能" class="headerlink" title="LinkedList的特有功能"></a>LinkedList的特有功能</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/8dfcb7fefa4cd8100c9a7d7b9b993c10259d52fe.png"></p><h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p>不包含重复元素的集合。即集合不包含一对元素e1和e2，使得e1.equals(e2)，并且最多只有一个空元素。</p><p>Set集合的特点</p><ul><li>不包含重复元素的集合</li><li>没有带索引的方法，所以不能使用普通for循环遍历</li></ul><h4 id="对象的hashCode"><a href="#对象的hashCode" class="headerlink" title="对象的hashCode"></a>对象的<code>hashCode</code></h4><p>哈希值：是<code>JDK</code>根据对象的地址或者字符串或者数字算出来的int类型的数值</p><p>Object类中有一个方法可以获取对象的哈希码值</p><p><code>public int hashcode()</code></p><p>默认情况下，不同对象的哈希值是不相同的</p><p>通过方法的重写，可以实现不同对象的哈希值是相同的</p><p>比如说字符串重写了<code>hashcode</code>方法，不同字符串不能保证他们的<code>hashcode</code>不相同</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>对集合的迭代顺序不作任何保证</p><ul><li>底层的数据结构是hash表</li><li>对集合的迭代顺序不作任何保证，也就是说不保证存储和取出的元素顺序一致</li><li>没有带索引的方法，所以不能使用普通for循环遍历</li><li>由于是Set集合，所以不包含重复元素的集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">//创建集合对象</span><br><br>    Set&lt;String&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br>    <span class="hljs-comment">// 添加元素</span><br>    set.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>    set.add(<span class="hljs-string">&quot;world&quot;</span>);<br>    set.add(<span class="hljs-string">&quot;java&quot;</span>);<br>    <span class="hljs-comment">//遍历</span><br>    <span class="hljs-keyword">for</span> (String s:set)&#123;<br>        System.out.println(s);<span class="hljs-comment">//word;java;hello</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>如何保证<code>HashSet</code>保证元素唯一性的方法</p><ul><li>插眼、待更新</li></ul><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><ul><li>JDK8之前，底层采用了数组+链表实现，可以说是元素为链表的数组</li><li>JDK8以后，在长度比较长的时候，底层实现了优化</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/eae67b646e6c26a8e997d964d398a9ed6725bf9b.png"></p><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a><code>LinkedHashSet</code></h4><ul><li>哈希表+链表实现实现在Set接口，具有可预测的迭代次序</li><li>有链表保证元素有序，也就是说元素的存储和取出顺序是一致的</li><li>由哈希表保证元素唯一，也就是说没有重复的元素</li></ul><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><code>TreeSet</code></h4><p>元素有序，这里的顺序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体排序方式取决于构造方法</p><p><code>TreeSet()</code>：根据元素的自然排序进行排序</p><p><code>TreeSet(Comparator comparator)</code> 根据指定的比较器进行排序</p><p>没有带索引的方法，所以不能使用普通for循环</p><p>由于是Set集合，所以不包含重复元素</p><ul><li>用<code>TreeSet</code>集合存储自定义对象，带参构造方法使用的是比较器排序对元素进行排序的</li><li>比较器排序，就是让集合构造方法接收Comparator的实现类对象，重写<code>compare(T o1,T o2)</code>方法</li><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>泛型：是<code>JDK5</code>中引入的特性，它提供了编译时类型安全监测机制，该机制允许在编译时检测到非法的类型</p><p>它的本质是参数化类型，也就是说操作的数据类型被指定为一个参数</p><p>也就是将类型的原来的具体类型进行参数化，然后在使用/调用时传入具体的类型</p><p>这种参数类型可以用在类，方法和接口中，分别称为泛型类，泛型方法，泛型接口</p><p><code>Collection&lt;String&gt; c = new ArrayList&lt;String&gt;();</code></p><p>如上所示,<code>&lt;String&gt;</code>就是使用了泛型</p><ul><li>使用泛型的好处是在于可以将运行时的异常提前到编译器</li><li>避免了强制类型转换</li></ul><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>格式：<code>修饰符 class 类名 &lt;类型&gt;&#123;&#125;</code></p><p>范例：<code>public class Generic &lt;T&gt;&#123;&#125;</code></p><p>此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bobo_08;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:泛型的使用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-13 15:29</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generic</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> T t;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getT</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setT</span><span class="hljs-params">(T t)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.t = t;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Generic&lt;String&gt; g1 = <span class="hljs-keyword">new</span> Generic&lt;String&gt;(); <span class="hljs-comment">//指定String泛型</span><br>        g1.setT(<span class="hljs-string">&quot;20&quot;</span>);<br>        System.out.println(g1.getT());<br>        Generic&lt;Integer&gt; g2 = <span class="hljs-keyword">new</span> Generic&lt;Integer&gt;();<span class="hljs-comment">//指定整数类型的泛型</span><br>        g2.setT(<span class="hljs-number">30</span>);<br>        System.out.println(g2.getT());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(T t)</span></span>&#123;<br>System.out.println(t)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>格式：<code>修饰符 interface 接口名&lt;类型&gt;&#123;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Generic</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(T t)</span></span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><p>类型通配符</p><ul><li>为了标识各种泛型List的父类，可以使用类型通配符</li><li>类型通配符：&lt;?&gt;</li><li>List&lt;?&gt;:表示元素类型未知的List，它的元素可以匹配任何的类型</li><li>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中</li></ul><p><img src="https://z3.ax1x.com/2021/06/13/2okhDg.png" alt="2okhDg.png"></p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可变参数又称为参数个数可变，用作方法的形参出现，那么参数个数就是可变的了</p><p>格式：<code>修饰符 返回值类型 方法名(数据类型 ...变量名)&#123;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//例子 求和方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>... a)</span></span>&#123;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i:a)&#123; <span class="hljs-comment">//接收到的参数存储到了一个数组中，遍历该数组</span><br>        sum+=i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果有多个参数，应该把可变参数放在后面</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/3bc4f33958e300546af63a699650398c7bff8b51.png"></p><h3 id="map集合"><a href="#map集合" class="headerlink" title="map集合"></a>map集合</h3><ul><li><code>Interface Map&lt;K,V&gt; K:键的类型；V:值的类型</code></li><li>将键映射到值的对象，不能包含重复的键，每个键可以映射最多一个值</li></ul><p>创建map的方式，使用<code>hashmap</code></p><p>通过hash保证键的唯一性</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/6495c125a143688ecbf0ec882dd2861ba2a36aed.png"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/2b4f1cc5728847bce9fdc6d1fd91631f2be90c00.png"></p><h4 id="遍历方式1"><a href="#遍历方式1" class="headerlink" title="遍历方式1"></a>遍历方式1</h4><ul><li>获取所有键的集合，用<code>keySet()</code>方法实现</li><li>遍历键的集合，获取到每一个键</li><li>用键对找对应的值</li></ul><h4 id="遍历方式2"><a href="#遍历方式2" class="headerlink" title="遍历方式2"></a>遍历方式2</h4><ul><li>获取所有键值对对象的集合</li><li>遍历键值对对象的集合，得到每一个键值对对象</li><li>根据键值对对象获取键和值<ul><li>用<code>getKey()</code>方法获取键</li><li>用<code>getValue()</code>获取值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>        map.put(<span class="hljs-string">&quot;001&quot;</span>,<span class="hljs-string">&quot;bobo&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;002&quot;</span>,<span class="hljs-string">&quot;popo&quot;</span>);<br>        Set&lt;Map.Entry&lt;String,String&gt;&gt; entrySet =  map.entrySet();<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;String,String&gt; me:entrySet)&#123;<br>            String key = me.getKey();<br>            String value = me.getValue();<br>            System.out.println(key+<span class="hljs-string">&quot; &quot;</span>+value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ArrayList存储元素为Hashmap"><a href="#ArrayList存储元素为Hashmap" class="headerlink" title="ArrayList存储元素为Hashmap"></a><code>ArrayList</code>存储元素为<code>Hashmap</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;HashMap&lt;String,String&gt;&gt; array = <span class="hljs-keyword">new</span> ArrayList&lt;HashMap&lt;String,String&gt;&gt;();<br>        HashMap&lt;String,String&gt; hm1 = <span class="hljs-keyword">new</span> HashMap&lt;String,String&gt;();<br>        hm1.put(<span class="hljs-string">&quot;孙策&quot;</span>,<span class="hljs-string">&quot;大乔&quot;</span>);<br>        hm1.put(<span class="hljs-string">&quot;周瑜&quot;</span>,<span class="hljs-string">&quot;大乔&quot;</span>);<br>        array.add(hm1);<br>        HashMap&lt;String,String&gt; hm2 = <span class="hljs-keyword">new</span> HashMap&lt;String,String&gt;();<br>        hm2.put(<span class="hljs-string">&quot;郭靖&quot;</span>,<span class="hljs-string">&quot;黄蓉&quot;</span>);<br>        hm2.put(<span class="hljs-string">&quot;杨过&quot;</span>,<span class="hljs-string">&quot;小龙女&quot;</span>);<br>        array.add(hm2);<br>        <span class="hljs-comment">//遍历ArrayList集合</span><br>        <span class="hljs-keyword">for</span>(HashMap&lt;String,String&gt; hm:array)&#123;<br>            Set&lt;String&gt; keySet = hm.keySet();<br>            <span class="hljs-keyword">for</span>(String key:keySet)&#123;<br>                System.out.println(key+<span class="hljs-string">&quot; &quot;</span>+ hm.get(key));<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="hashmap集合存储ArrayList元素并遍历"><a href="#hashmap集合存储ArrayList元素并遍历" class="headerlink" title="hashmap集合存储ArrayList元素并遍历"></a>hashmap集合存储ArrayList元素并遍历</h4><h3 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h3><p>是针对集合操作的工具类</p><p>Collections类的常用方法</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/0040f461c49de98d19b80e26efa3f0424a027023.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionsDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;Student&gt; array = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;vovo&quot;</span>,<span class="hljs-number">20</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;fjfg&quot;</span>,<span class="hljs-number">18</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;fjfg1&quot;</span>,<span class="hljs-number">8</span>);<br>        array.add(s1);<br>        array.add(s2);<br>        array.add(s3);<br>        <span class="hljs-comment">//自定义比较器</span><br>        Collections.sort(array, <span class="hljs-keyword">new</span> Comparator&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Student s1, Student s2)</span> </span>&#123;<br>                <span class="hljs-keyword">int</span> num  = s1.getAge()-s2.getAge();<br>                <span class="hljs-keyword">int</span> num2 = num==<span class="hljs-number">0</span>?s1.getName().compareTo(s2.getName()):num;<br>                <span class="hljs-keyword">return</span> num2;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">for</span> (Student s:array)&#123;<br>            System.out.println(s.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象</title>
    <link href="/2021/06/04/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/06/04/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="Java面向对象的三条主线"><a href="#Java面向对象的三条主线" class="headerlink" title="Java面向对象的三条主线"></a>Java面向对象的三条主线</h3><p>Java类及类的成员：属性、方法、构造器；代码块、内部类</p><p>面向对象的三大特征：封装、继承、多态、（抽象性）</p><p>其他关键字:this、super、static、final、abstract、interface、package、import</p><blockquote><p>编程的两大思想：面向过程 (POP)      or           面向对象（OOP）</p><p>人把大象装进冰箱</p><p>面向过程思想</p><p>1、把冰箱门打开</p><p>2、抬起大象，装进冰箱</p><p>3、把冰箱门打开</p><p>面向对象：强调具备了功能的对象。以类/对象为最小单位，考虑谁来做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">人&#123;<br>打开(冰箱)<br>冰箱.开();<br>抬起(大象)<br>大象.抬起()<br>关闭(冰箱)<br>冰箱.闭合()<br>&#125;<br>冰箱&#123;<br>开开()&#123;&#125;<br>闭合()&#123;&#125;<br>&#125;<br>大象&#123;<br>抬起()&#123;&#125;<br>放下()&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>类和对象是面向对象的核心概念</p><ul><li><p>类是对一类事物的描述，是抽象的、概念上的定义</p></li><li><p>对象是实际存在的该类事物的每个个体。因而也称为实例(<code>instance</code>)</p><p>万事万物皆对象</p></li></ul><p>面向对象的核心是类的设计、类的设计，其实就是类的成员的设计</p><p>类的成员包括了属性和方法</p><p>属性 = 成员变量 = <code>field</code> = 域、字段</p><p>方法 = 成员方法 = 函数 = method</p><p>如果创建了类的多个对象，则每个对象都独立的拥有一套类的属性，互不干扰</p><p>如果修改一个对象的属性a，则不影响令一个对象属性a的值</p><h3 id="对象的内存解析"><a href="#对象的内存解析" class="headerlink" title="对象的内存解析"></a>对象的内存解析</h3><p>JAVA内存解析</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/image-20210605130843150.png" alt="image-20210605130843150"></p><p>堆内存区的唯一目的就是存放对象实例，几乎所有对象都要在这里分配内存，JAVA虚拟机的官方描述是：所有的对象实例以及数组都要在堆上分配</p><p>栈内存常用于存放局部变量，局部变量表存放了编译期可知长度的各种基本数据类型(Boolean、byte、char、int等)、对象引用(即对象在堆内存中的首地址)。方法执行完，即自动释放</p><p>方法区：用于存储已知被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</p><h3 id="属性与局部变量作对比"><a href="#属性与局部变量作对比" class="headerlink" title="属性与局部变量作对比"></a>属性与局部变量作对比</h3><ul><li>不同点<ul><li>在类中的声明的位置不同<ul><li>属性：直接定义在类的一对{}内</li><li>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部变量</li></ul></li><li>关于权限修饰符<ul><li>属性：可以在声明属性时，指明其权限，使用权限修饰符(常用的权限修饰符有private、public、缺省、protected)</li><li>局部变量：不能使用权限修饰符</li></ul></li><li>默认初始化值<ul><li>属性：根据其类型，都有默认初始化值(整数 0 浮点：0.0 字符型：0(或\u0000)、布尔： false 应用数据类型：null)</li><li>局部变量：没有默认初始化值，在使用局部变量前、一定要先赋值，形参在调用时：赋值即可</li></ul></li><li>在内存中加载的位置<ul><li>属性：加载到堆空间</li><li>局部变量：加载到栈空间</li></ul></li></ul></li><li>相同点<ul><li>定义变量的格式相同</li><li>先声明，后使用</li><li>变量都有其对应的作用域</li></ul></li></ul><h3 id="万事万物皆对象"><a href="#万事万物皆对象" class="headerlink" title="万事万物皆对象"></a>万事万物皆对象</h3><p><code>如何理解？</code></p><p>1、在Java语言范畴中，我们总是把功能结构等封装到类中，通过类的结构化，来调用具体的功能结构</p><p>2、涉及到Java语言与前端或者后端数据库的交互时，在Java层面交互时，都体现为类、对象</p><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>this关键字可以用来区别局部变量和成员变量</p><p>当局部变量和成员变量同名时，可以通过this关键字</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/f83296e26031205ea79cfcb846995861fb6d8c69.png"></p><p>this代表它所在函数所属对象的应用。哪个对象在调用this所在的函数，this就代表哪个对象。例如，当执行到Person p = new Person(“lisi”);时，建立Person对象，执行到Person对象的构造函数Person(String name)后，此时的this代表的是p引用。而当代码执行到Person p1 = new Person(“zhangsan”);时，执行到Person对象的构造函数Person(String name)后，this代表的是p1引用。<br>例如通过判断两个对象的年龄是否相同</p><ul><li><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/90e79e7fdb789ff6afbd5515ee318101e75addbf.png"></li></ul><p>在通过对象<code>p1.compare(p2)</code>即可判断对象p1是否和p2的姓名相同</p><p>this和p1的地址值是指向同一个对象。当执行到boolean b = p1.compare(p2);时，会调用到compare(Person p)方法，此时，p2会以参数形式传给compare()方法，而由于是由p1调用的compare()方法，所以p1引用即当前对象this引用。即his和p1的地址值是指向同一个对象。</p><p>可以通过this执行构造方法</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/c1b0a512606ab0ea9c1e2c1f6ae1116ee456e526.png"></p><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>static关键字：用于修饰成员(成员变量和成员函数)</p><p>被修饰后成员具备以下特点：</p><ul><li>随着类的加载而加载(类一加载到内存中，静态static就已经加载到内存中(方法区))中，随着类的消失而消失</li><li>优于对象存在</li><li>可以被类名调用</li></ul><p>使用注意：</p><ul><li><code>静态方法只能访问静态成员</code></li><li>静态方法不能使用 <code>this</code>、<code>super</code>等关键字</li><li>主函数是静态函数</li></ul><h4 id="实例变量和静态变量的区别"><a href="#实例变量和静态变量的区别" class="headerlink" title="实例变量和静态变量的区别"></a>实例变量和静态变量的区别</h4><ul><li>存放位置：类变量(静态成员变量)随着类的加载而存在于方法区;实例变量随着对象的建立而存在于堆内存中</li><li>生命周期:类变量生命周期最长;随着类的消失而消失;实例变量生命周期随着对象消失而消失</li></ul><p>通过静态函数可以封装相关的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> staticDemo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 封装工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-05 21:54</span><br><span class="hljs-comment"> **/</span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayTools</span> </span>&#123;<br>    <span class="hljs-comment">//将构造函数设成private防止实例化对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ArrayTools</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 返回数组的最大值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [arr]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: int</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMax</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; max)<br>                max = arr[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 选择排序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [arr]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: void</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[i] &gt; arr[j]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = arr[i];<br>                    arr[i] = arr[j];<br>                    arr[j] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>: 冒泡排序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span>: [arr]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: void</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length-i-<span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>                    swap(arr,j,j+<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> temp = arr[a];<br>        arr[a] = arr[b];<br>        arr[b] = temp;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="对象实例化的过程"><a href="#对象实例化的过程" class="headerlink" title="对象实例化的过程"></a>对象实例化的过程</h3><p>当类的主函数入口main()方法执行到Person p  = new Person(“boob”,20)；会有一个p引用加载到栈中:</p><ul><li>1）new Person()时会将Person.class文件从硬盘中通过java的虚拟机JVM加载进内存；</li><li>2）执行静态代码块</li><li>3）并开辟了堆内存空间。（非静态成员变量，如属性：name、age）</li><li>4）初始化动作，构造代码块</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的好处：提高代码的复用性；继承让类与类之间产生了关系</p><p>注意：千万不能为了获取其他类的功能，简化代码而继承。必须是类与类之间的所属关系才可以继承;java不支持多继承,但是可以通过接口实现多继承</p><p>当子类中出现非私有的同名变量时，子类要访问本类的变量;要用<code>this</code>；子类要访问父类的变量，要用<code>super</code></p><h4 id="方法覆盖"><a href="#方法覆盖" class="headerlink" title="方法覆盖"></a>方法覆盖</h4><p>如上图，若子父类中的方法一致，子类运行就会覆盖了父类中的方法。子类出现和父类一模一样的函数时，当子类对象调用该函数，会运行子类函数的内容，如同父类的函数被覆盖一样，这种情况是函数的另一个特性，重写（覆盖）。</p><p>如果要调用父类的方法，可以使用<code>super</code>关键字，但该父类方法必须是public</p><h3 id="子类对象实例化的过程"><a href="#子类对象实例化的过程" class="headerlink" title="子类对象实例化的过程"></a>子类对象实例化的过程</h3><p>子父类构造函数不能覆盖，因为覆盖必须函数名和返回值等都一模一样，但是构造函数的名字必须和类名一致;子类的构造函数有一句隐示的语句super();</p><p>当子类进行实例化时，子类构造函数含有一个隐式的super()、即父类那个空参数的构造函数，如果没有空参数的构造函数，则必须通过<code>super(参数1,参数2..)</code>进行指定那个非空的构造函数,主义，必须在子类构造函数的第一行</p><blockquote><p>结论（子类的实例化过程）：子类中所有的构造函数，默认都会访问父类中的空参数的构造函数，因为子类每一个构造函数内的第一行都有一句隐式的super()，当父类中没有空参数的构造函数时，子类必须手动通过super语句或者this语句形式来指定要访问的父类中的构造函数。子类的构造函数第一行也可以手动指定this语句来访问本类中的构造函数，子类中至少要有一个构造函数会访问父类中的构造函数(没写也会有默认的)。</p></blockquote><h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h4><ul><li>作为一个修饰符，可以修饰类、函数、变量。</li><li>被final修饰的类不可以被继承，</li><li>被final修饰的方法，不可以被复写</li><li>final修饰的变量则变成了一个常量，不可以被更改</li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>同一对象，在不同时刻表现出了不同的形态，就叫做多态</p><p>举例</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">猫 cat = <span class="hljs-keyword">new</span> <span class="hljs-type"></span>猫()<br>动物 animal = <span class="hljs-keyword">new</span> <span class="hljs-type"></span>猫()<br>猫在不同的时刻表现出的不同形态，就叫做多态<br></code></pre></td></tr></table></figure><p>多态的前提和体现</p><ul><li>有继承/实现关系</li><li>有方法重写</li><li>有父类引用指向子类对象</li></ul><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima_01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 实现多态测试</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-06 13:13</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnimalDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Animal a = <span class="hljs-keyword">new</span> Cat();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.itheima_01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: Animal类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-06 13:13</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">package</span> com.itheima_01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: Cat类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bobo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2021-06-06 13:13</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>多态访问成员变量或执行成员函数必须要父类中含有，若不含有则会报错</p><p>多态访问成员变量，应该是父类的成员变量(<code>编译看父类、执行看父类</code>)</p><p>多态访问成员函数，执行的是重写后的子类成员函数，而不是父类的成员函数(<code>编译看父类，执行看子类</code>)</p><p>多态的好处和弊端</p><ul><li><p>多态的好处：提高了程序的扩展性</p><p>具体体现：定义方法时，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作</p></li><li><p>多态的弊端：不能使用子类的特有功能</p></li></ul><h4 id="多态的转型"><a href="#多态的转型" class="headerlink" title="多态的转型"></a>多态的转型</h4><p>解决了多态中父类不能访问子类的特有功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//向上转型</span><br>   Animal a = <span class="hljs-keyword">new</span> Cat();<br><br><br>   <span class="hljs-comment">//向下转型</span><br>   Cat c = (Cat)a;<br>   c.eat();<br>   c.playGame();<br></code></pre></td></tr></table></figure><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>概述：在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类</p><p>抽象类的特点：</p><ul><li><p>抽象类和抽象方法必须使用abstract关键字进行修饰</p><ul><li><code>public abstract class 类名&#123;&#125;</code></li><li><code>public abstract void eat();</code></li></ul></li><li><p>抽象类不一定含有抽象方法，有抽象方法的类一定是抽象类</p></li><li><p>抽象类不能被实例化</p><p>如果要实例化，参照多态的方法，通过子类对象实例化，这叫做抽象类多态</p></li><li><p>抽象类的子类</p><ul><li>要么重写抽象类的所有方法</li><li>要么是抽象类</li></ul></li></ul><h4 id="抽象类的成员特点"><a href="#抽象类的成员特点" class="headerlink" title="抽象类的成员特点"></a>抽象类的成员特点</h4><ul><li><p>构造方法</p><ul><li>有构造函数，但是不能被实例化，用于子类访问父类数据的初始化</li></ul></li><li><p>成员方法</p><ul><li>可以有抽象方法：限定子类必须完成某些动作</li><li>也可以有非抽象方法，提高代码的复用性</li></ul></li><li><p>成员变量</p><p>可以是变量</p></li></ul><p>也可以是常量</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口是一种公共的规范，只要符合标准，大家都可以通用Java中的接口\</p><p>Java中的接口更多体现在对行为的抽象</p><h4 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h4><ul><li><p>接口用关键字interface修饰</p><p>​        <code>public interface 接口名&#123;&#125;</code></p></li><li><p>类实现接口用implement表示</p><p>​        <code>public class 类名 implement 接口名&#123;&#125;</code></p></li><li><p>接口不能实例化</p><p>接口可以参照多态的方式，通过类对象实例化，这叫做接口多态</p><p>多态的形式：具体类多态，抽象类多态，接口多态</p><p>多态的前提：有继承或者实现关系；有方法的重写；有父(类/接口)引用指向(子/实现)类对象</p></li><li><p>接口的实现类</p><p>​    要么重写接口中的所有抽象方法</p><p>​    要么是抽象类</p></li></ul><h4 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h4><ul><li>成员变量<ul><li>只能是常量</li><li>默认修饰符 public static void</li></ul></li><li>构造方法<ul><li>接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在的</li><li>一个类如果没有父类，则默认集成Object类</li></ul></li><li>成员方法<ul><li>只能是抽象方法</li><li>默认修饰符 ：public abstract</li></ul></li></ul><blockquote><p>关于接口中的方法，JDK8和9中有些新特性</p></blockquote><h4 id="抽象类与接口的区别"><a href="#抽象类与接口的区别" class="headerlink" title="抽象类与接口的区别"></a>抽象类与接口的区别</h4><ul><li><p>成员区别</p><p>​    抽象类： 变量、常量、有构造方法、有抽象方法，也有非抽象方法</p><p>​    接口：变量；抽象方法</p></li><li><p>关系区别</p><p>​    类与类 继承，</p><p>​    类与接口 实现，可以单实现，也可以多实现</p><p>​    接口与接口 继承，单继承、多继承</p></li><li><p>设计理念</p><p>​    抽象类 对类抽象，包括属性、行为</p><p>​    接口 对行为抽象 主要是行为</p></li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/c221685b74b106964bdc4f5303fde583616cf458.png"></p><h4 id="抽象类名作为形参和返回值"><a href="#抽象类名作为形参和返回值" class="headerlink" title="抽象类名作为形参和返回值"></a>抽象类名作为形参和返回值</h4><ul><li>方法的形参是抽象类名，需要的是该抽象类的子类对象</li><li>方法的返回值是抽象类名，返回的是该抽象类的子类对象</li></ul><h4 id="接口名作为形参和返回值"><a href="#接口名作为形参和返回值" class="headerlink" title="接口名作为形参和返回值"></a>接口名作为形参和返回值</h4><ul><li>方法的形参的是接口名，其实需要的是该接口的实现类对象</li><li>方法的返回值是接口名，其实返回的是该接口的实现类对象</li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类：就是在一个类中定义一个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 类名</span>&#123;<br>修饰符 <span class="hljs-class"><span class="hljs-keyword">class</span> 类名</span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="内部类的访问特点"><a href="#内部类的访问特点" class="headerlink" title="内部类的访问特点"></a>内部类的访问特点</h4><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，则必须创建对象</li></ul><h4 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h4><p>按照内部类中定义的位置不同，可以分为以下两种形式</p><ul><li><p>在类的成员位置：成员内部类</p><p>​    成员内部类，外界如何创建对象并使用呢？</p><p>格式：外界类名.内部类名 对象名 = 外部类对象.内部类对象</p><p><code>Outer.Inner oi =  new Outer().new Inner()</code>;</p></li><li><p>在类的局部位置：局部内部类（在类的方法里定义一个类）</p><p>局部内部类是在方法中定义的类，所以外界是无法直接使用的，需要在方法内部创建对象并使用</p><p>该类可以直接访问外部类的成员，也可以方法内的局部变量</p></li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/ca947e94ce88e44f20f036d5603f5de010dcaf40.png"></p><ul><li><p>匿名内部类</p><p>前提：存在一个类或者接口，这里的类可以是具体类也可以是抽象类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Inter</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本质：是一个继承了该类或者实现了该接口的子类匿名对象</p></li></ul><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/b0a88cb4420e16955887316a781070f7f1eea76e.png"></p><h4 id="System"><a href="#System" class="headerlink" title="System"></a>System</h4><p>System包含了几个有用的类字段和方法，它不能被实例化</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/42e54e303e4ff6daf0f5673933ebdfcbaaeebdf8.png"></p><h4 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h4><p>Object是类层次结构的根，每个类都可以将Object做为超类。所以类都直接或间接的继承自该类</p><p>构造方法：public Object()</p><p>所以说子类的构造方法默认访问的是父类的无参构造方法</p><p>因为它们的顶级父类只有无参构造方法</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">public</span> String <span class="hljs-keyword">to</span><span class="hljs-built_in">String</span>()<br></code></pre></td></tr></table></figure><p>返回对象的字符串表示形式。一般来说，  <code>toString</code>方法返回一个“textually代表”这个对象的字符串。结果应该是一个简明扼要的表达，容易让人阅读。建议所有子类覆盖此方法。</p><p>该<code>toString</code>类方法<code>Object</code>返回一个由其中的对象是一个实例，该符号字符<code>的类的名称的字符串</code>@`  ”和对象的哈希码的无符号的十六进制表示。 换句话说，这个方法返回一个等于下列值的字符串：</p><blockquote><p><code>getClass().getName() + &#39;@&#39; + Integer.toHexString(hashCode())</code></p></blockquote><p>在实际使用中，应该在子类中重写该方法，</p><p><img src="https://i0.hdslb.com/bfs/album/d0007087b66978f77489ae82fbbf5d0b6f48eea0.png"></p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-keyword">equals</span>(<span class="hljs-type">Object</span> obj)<br></code></pre></td></tr></table></figure><p>指示一些其他对象是否等于此。</p><p><code>equals</code>方法在非空对象引用上实现等价关系：</p><ul><li><em>自反性</em> ：对于任何非空的参考值<code>x</code> ，  <code>x.equals(x)</code>应该返回<code>true</code> 。</li><li>它是<em>对称的</em> ：对于任何非空引用值<code>x</code>和<code>y</code> ，  <code>x.equals(y)</code>应该返回<code>true</code>当且仅当<code>y.equals(x)</code>回报<code>true</code>  。</li><li><em>传递性</em> ：对于任何非空引用值<code>x</code> ， <code>y</code>和<code>z</code>  ，如果<code>x.equals(y)</code>回报<code>true</code>个<code>y.equals(z)</code>回报<code>true</code>  ，然后<code>x.equals(z)</code>应该返回<code>true</code> 。</li><li>它是<em>一致的</em> ：对于任何非空引用值<code>x</code>和<code>y</code>  ，多次调用<code>x.equals(y)</code>始终返回<code>true</code>或始终返回<code>false</code>  ，没有设置中使用的信息<code>equals</code>比较上的对象被修改。</li><li>对于任何非空的参考值<code>x</code> ，  <code>x.equals(null)</code>应该返回<code>false</code> 。</li></ul><p>该<code>equals</code>类方法<code>Object</code>实现对象上差别可能性最大的相等关系;  也就是说，对于任何非空的参考值<code>x</code>和<code>y</code>  ，当且仅当<code>x</code>和<code>y</code>引用相同的对象（ <code>x ==  y</code>具有值<code>true</code> ）时，该方法返回<code>true</code> 。</p><p>请注意，无论何时覆盖该方法，通常需要覆盖<code>hashCode</code>方法，以便维护<code>hashCode</code>方法的通用合同，该方法规定相等的对象必须具有相等的哈希码。</p><ul><li><p>参数</p><p><code>obj</code> - 与之比较的参考对象。</p></li><li><p>结果</p><p><code>true</code>如果此对象与obj参数相同;  <code>false</code>否则。</p></li><li><p>另请参见：</p><p><a href="../../java/lang/Object.html#hashCode--"><code>hashCode()</code></a> ， <a href="../../java/util/HashMap.html"><code>HashMap</code></a></p></li></ul><p>在比较两个对象是否相等时，直接调用比较是两个对象的所在的地址，所以需要对这个方法进行重写</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/76e8544f3a1bf63762b0260631b12806d31aada8.png"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/f8e11dc5add9f86c5ed5d7632c5deb5d5b6cff7b.png"></p><h4 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h4><p>Arrays类包含用于操作数组的各种方法</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/258a883acda5d0baad0204aceaa1c30bec60a6d4.png"></p><h4 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h4><p>将基本类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据</p><p>常用的操作之一：用于基本数据类型与字符串之间的转换</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/304e23ca8da82a88a85ca6b394be1cea7503cc14.png"></p><h4 id="字符串与数字之间的相互转换"><a href="#字符串与数字之间的相互转换" class="headerlink" title="字符串与数字之间的相互转换"></a>字符串与数字之间的相互转换</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/60ce1fe3293b6c1975535e62422b7ebe8de23dc2.png"></p><h4 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h4><ul><li>装箱：把基本数据类型转换成对应的包装类类型</li><li>拆箱：把包装类类型转换成对应的基本数据类型</li></ul><h3 id="时间类"><a href="#时间类" class="headerlink" title="时间类"></a>时间类</h3><h4 id="date类"><a href="#date类" class="headerlink" title="date类"></a>date类</h4><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/15f852d1521c3a891577482c37772428735dbe68.png"></p><h4 id="simpleDateFormat类"><a href="#simpleDateFormat类" class="headerlink" title="simpleDateFormat类"></a>simpleDateFormat类</h4><p>通过可以格式化日期文本、解析文本日期和规范化</p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/a6d371ef2e97a9d9ca3ab1aba77f3b728441736b.png"></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/4ddcdbd1e5a0eb0ae54df2c1490b425fc30b1673.png"></p><p>格式化(从Date到String)</p><p>public final String format(Date date):将日期格式化成日期/时间字符串</p><p>解析(从String到Date)</p><p>public Date parse(String source) 从字符串解析生成日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateTestDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d = <span class="hljs-keyword">new</span> Date();<br><span class="hljs-comment">//        SimpleDateFormat sdf = new SimpleDateFormat();</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>); <br>        String s = sdf.format(d);<br>        System.out.println(s);<span class="hljs-comment">//2021-06-08 10:56:48</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h4><p>Calendar类本身是抽象类，但提供了获取Calendar对象的方法</p><p>其日历字段已使用当前日期和时间初始化：</p><p><code>Calendar rightNow = Calendar.getinstance()</code></p><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/bbb4497cc5f29fbe1c814f7499466f72e2d4646f.png"></p>]]></content>
    
    
    <categories>
      
      <category>JavaSe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java语言基础1</title>
    <link href="/2021/06/02/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%801/"/>
    <url>/2021/06/02/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%801/</url>
    
    <content type="html"><![CDATA[<h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java程序的所有内容都应该放在类中</span><br><span class="hljs-comment">//这里也有命名规范 类名的所有单词都应该大写</span><br><span class="hljs-comment">//源代码的文件名必须和公共类名相同</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-comment">//main方法要声明成public</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//输出并换行</span><br>        System.out.println(<span class="hljs-string">&quot;这是我java的第一个程序&quot;</span>);<br>        <span class="hljs-comment">//如果是print方法则代表输出不换行</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>上述代码就是第一个java程序啦，java的程序风格和C/C++类似</p></li><li><p>Java区分大小写</p></li><li><p>java程序的所有内容都应该放在类中，类在命名时应该要有规范，即字母的首字母都应该大写</p></li><li><p>java的源文件名应该和公共类名相同</p></li><li><p><code>main</code>方法需要声明成<code>public</code></p></li></ul><h2 id="Java的数据类型"><a href="#Java的数据类型" class="headerlink" title="Java的数据类型"></a>Java的数据类型</h2><p>java是一种强类型语言，和C/C++类似 共有8种数据类型，其中包括4种整形，2中浮点类型，1种用于表示Unicode编码的字符单元的字符类型和boolen类型</p><h3 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h3><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>int</td><td>4字节</td><td>-2147483648-2147483648</td></tr><tr><td>short</td><td>2字节</td><td>-32768-32768</td></tr><tr><td>long</td><td>8字节</td><td></td></tr><tr><td>byte</td><td>1字节</td><td>-128-127</td></tr></tbody></table><blockquote><p>通常情况下，int类型最常用。但如果表示星球上的居住人数，就需要使用long 类型了。byte 和short 类型主要用于特定的应用场合，例如，底层的文件处理或者需要控制占用存储空间量的大数组。</p></blockquote><p>与C/C++的不同</p><ul><li>java没有无符号型</li><li>java是跨平台的，取值范围与目标平台无关</li></ul><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>大约± 3.402 823 47E+38F （有效位数为6 ” 7 位）</td></tr><tr><td>double</td><td>8字节</td><td>大约± I. 797 693 134 862 315 70E+ 308 （有效位数为15 位）</td></tr></tbody></table><p>double 表示这种类型的数值精度是float 类型的两倍（有人称之为双精度数值） 。绝大部分应用程序都采用double 类型。在很多情况下， float 类型的精度很难满足需求。实际上，只有很少的情况适合使用float 类型，例如，需要单精度数据的库，或者需要存储大量数据。</p><p><code>if(Double.isNaN(x)) //check whether x is &quot;not a number&quot;</code></p><h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><p>char类型和C中的char很类似，char类型的字面量值要用<code>单引号</code>括起来。例如：’A’的编码值为65所对应的字符常量</p><p>char 类型原本用于表示单个字符。不过，现在情况已经有所变化。如今，有些Unicode字符可以用一个char 值描述，另外一些Unicode 字符则需要两个char 值。</p><p>char 类型的字面量值要用单引号括起来。例如：’ A’是编码值为65 所对应的字符常量。它与” A”不同，”A”是包含一个字符A 的字符串。char 类型的值可以表示为十六进制值，其范围从＼uOOOO 到＼Uffff。例如： ＼ u2122 表示注册符号（™）， \u03CO 表示希腊字母π。</p><table><thead><tr><th>转义序列</th><th>名称</th><th>Unicode值</th></tr></thead><tbody><tr><td>\b</td><td>退格</td><td>\u0008</td></tr><tr><td>\t</td><td>制表</td><td>\u0009</td></tr><tr><td>\n</td><td>换行</td><td>\u000a</td></tr><tr><td>\r</td><td>回车</td><td>\u000d</td></tr><tr><td>\“</td><td>双引号</td><td>\u0022</td></tr><tr><td>\‘</td><td>单引号</td><td>\u0027</td></tr><tr><td>\\</td><td>反斜杠</td><td>\u005c</td></tr></tbody></table><h3 id="boole类型"><a href="#boole类型" class="headerlink" title="boole类型"></a>boole类型</h3><p>boolean （布尔）类型有两个值： false 和true ，用来判定逻辑条件。整型值和布尔值之间不能进行相五转换。</p><p>在java中，不能用0代替false，用非0值代替true，所以<code>if(x=0)</code>是不能编译通过的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs j">int x &#x3D; 1;<br>while(x)&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在Java 中，每个变量都有一个类型（ type ） 。在声明变量时，变量的类型位于变量名之<br>前。这里列举一些声明变量的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> salary;<br><span class="hljs-keyword">int</span> vacationDays;<br><span class="hljs-keyword">long</span> earthPopuation;<br><span class="hljs-keyword">boolean</span> done;<br></code></pre></td></tr></table></figure><p>可以看到，每个声明以分号结束。由于声明是一条完整的Java 语句，所以必须以分号结束。</p><p>变量名必须是一个以字母开头并由字母或数字构成的序列。需要注意，与大多数程序设计语言相比， Java 中“字母”和“数字”的范围更大。字母包括’A’～’z·~ ‘a’ - ‘z ’、” 、’$’或在某种语言中表示字母的任何Unicode 字符</p><h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><p>声明一个变量之后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化的<br>变量。例如， Java 编译器认为下面的语句序列是错误的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> vacationDays;<br>System.out.println(vacationDays); <span class="hljs-comment">//未对变量进行赋值，报错</span><br></code></pre></td></tr></table></figure><p>在java中，不区别变量的声明和注释，</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>在java中，利用<code>final</code>关键字指示常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java中的变量和常量</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Var</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> CM_PER_INCH = <span class="hljs-number">2.54</span>;<br>        <span class="hljs-keyword">double</span> paparWidth = <span class="hljs-number">8.5</span>;<br>        <span class="hljs-keyword">double</span> paperHeight = <span class="hljs-number">11</span>;<br>        System.out.println(<span class="hljs-string">&quot;Paper Size in centimers:&quot;</span>+paparWidth*CM_PER_INCH+paperHeight*CM_PER_INCH);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>关键字final表示这个变量只能被赋值一次。一旦被赋值之后，就不能修改了。习惯上，常量名使用全大写</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>在Java 中，使用算术运算符＋、－ 、＊、／表示加、减、乘、除运算。当参与／运算的两个操作数都是整数时，表示整数除法；否则，表示浮点除法。整数的求余操作（有时称为取模）用%表示。例如， 15/2 等于7’ 15%2 等于1, 15.0/2 等于7 . 5 。</p><h3 id="数学函数与常量"><a href="#数学函数与常量" class="headerlink" title="数学函数与常量"></a>数学函数与常量</h3><p>在Math类中，包含着许多数学函数，例如平方根，求幂等</p><h3 id="数值之家的类型转换"><a href="#数值之家的类型转换" class="headerlink" title="数值之家的类型转换"></a>数值之家的类型转换</h3><p>当使用上面两个数值进行二元操作时（例如n + f, n 是整数， f 是浮点数），先要将两个操作数转换为同一种类型，然后再进俯悖。</p><ul><li>如果两个操作数中有一个是double 类型，另一个操作数就会转换为doubl 巳类型。</li><li>否则，如果其中一个操作数是float 类型，另一个操作数将会转换为float 类型。</li><li>否则，如果其中一个操作数是long 类型，另一个操作数将会转换为long 类型。</li><li>否则，两个操作数都将被转换为int 类型。</li></ul><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/60b75bda26aee.jpg"></p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>和c中的类型转换几乎一模一样</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Java字符串就是Unicode字符序列，</p><p>但要注意的是，java中的字符串不可以修改单个字符，这点和C中的语法不同</p><h3 id="截取子串"><a href="#截取子串" class="headerlink" title="截取子串"></a>截取子串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String greeting = <span class="hljs-string">&quot;hello&quot;</span><br>String s = greeting.substring(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">// hel</span><br></code></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>和绝大多数的程序设计语言一样，java语言允许使用<code>+</code>进行字符串的拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String expletive = <span class="hljs-string">&quot;Expletive&quot;</span>;<br>String PG13 = <span class="hljs-string">&quot;deleted&quot;</span>;<br>String message = expletive + PG13<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过join方法进行字符串的拼接</span><br>String all = String.join(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;S&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;L&quot;</span>,<span class="hljs-string">&quot;XL&quot;</span>);<br>System.out.println(all);<br></code></pre></td></tr></table></figure><h3 id="判断字符串是否相等"><a href="#判断字符串是否相等" class="headerlink" title="判断字符串是否相等"></a>判断字符串是否相等</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">s.equals(t); <span class="hljs-comment">//判断字符串s和t是否相同</span><br><span class="hljs-comment">//主义不要使用 == 判断两个字符串是否相等</span><br><span class="hljs-comment">//这个只能判断两个字符串是否存储在相同的位置</span><br></code></pre></td></tr></table></figure><h3 id="空串和null串"><a href="#空串和null串" class="headerlink" title="空串和null串"></a>空串和null串</h3><p>空串<code>&quot;&quot;</code>表示长度为0的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断空串的方法</span><br><span class="hljs-keyword">if</span>(str.length()==<span class="hljs-number">0</span>)<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">if</span>(str.equals(<span class="hljs-string">&quot;&quot;</span>))<br></code></pre></td></tr></table></figure><p>空串是一个Java 对象，有自己的串长度（ 0 ）和内容（空） 。不过， String 变量还可以存放一个特殊的值，名为null ，这表示目前没有任何对象与该变量关联（关于null 的更多信息请参见第4 章） 。要检查一个字符串是否为null ， 要使用以下条件：<code>if(str != null &amp;&amp; str.length()!=0)</code></p><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><p>可以查看API文档，这里不再阐述，不需要机械记忆</p><h3 id="构建字符串"><a href="#构建字符串" class="headerlink" title="构建字符串"></a>构建字符串</h3><p>可以通过StringBuilder类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder();<br>builder.append(ch);<br>builder.append(str);<br></code></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一步 构建一个Scanner</span><br>Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in)<br></code></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>Java的格式化输出和C语言大致相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br>System.out.printf(<span class="hljs-string">&quot;hello, %s. Next year,you&#x27;ll be d%&quot;</span>,name,age)<br></code></pre></td></tr></table></figure><h3 id="文件的输入输出"><a href="#文件的输入输出" class="headerlink" title="文件的输入输出"></a>文件的输入输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Scanner in = <span class="hljs-keyword">new</span> Scanner(Paths.get(<span class="hljs-string">&quot;myfile.txt&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="Java-的控制语句"><a href="#Java-的控制语句" class="headerlink" title="Java 的控制语句"></a>Java 的控制语句</h2><p>Java 的控制语句与C/C++基本上完全一致</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明数组</span><br><span class="hljs-keyword">int</span>[] a;<br><span class="hljs-comment">//创建数组</span><br><span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br><br></code></pre></td></tr></table></figure><p>注意：在创建字符串时，所有元素都被初始化为0，boolen数组的元素都会被初始化为false，对象数组的元素则初始化为一个特殊值null</p><p>一旦访问数组发生越界，就会提前终止</p><p>Java中，数组存在另一种访问形式</p><p>for each遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> item:arr1)<br>    System.out.println(item);<br></code></pre></td></tr></table></figure><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>]<br><span class="hljs-keyword">int</span>[] arr2 = arr1;<br><span class="hljs-comment">//但这种属于浅拷贝</span><br><span class="hljs-comment">//即arr1和arr2指向同一段地址值</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zoudacheng_admin/blog_img/raw/master/images/e0e4f1cd20e2773744074ac9f47c616c1a1824e4.png"></p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用Arrays 类的copyOf 方法：</p><p><code>arr2 = Arrays.copy(arr1,arr1.length)</code></p>]]></content>
    
    
    <categories>
      
      <category>JavaSe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js实现单链表</title>
    <link href="/2021/06/02/js%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/06/02/js%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="JS实现链表"><a href="#JS实现链表" class="headerlink" title="JS实现链表"></a>JS实现链表</h2><p>链表是一种比较常见的数据结构，它和链式存储结构不同，它不能随机访问，但是链表在插入，删除等操作时执行效率要比数组的效率更高</p><h3 id="节点数据结构"><a href="#节点数据结构" class="headerlink" title="节点数据结构"></a>节点数据结构</h3><p>如果是双链表则还需要定义一个<code>prev</code>指针</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">data</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;  <span class="hljs-comment">// 节点的数据域</span><br>        <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 节点的指针域</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表数据结构"><a href="#链表数据结构" class="headerlink" title="链表数据结构"></a>链表数据结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">this</span>.size = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 单链表的长度</span><br>            <span class="hljs-built_in">this</span>.head = <span class="hljs-keyword">new</span> Node(<span class="hljs-string">&#x27;head&#x27;</span>);  <span class="hljs-comment">// 表头节点</span><br>            <span class="hljs-built_in">this</span>.currNode = <span class="hljs-string">&#x27;&#x27;</span>;  <span class="hljs-comment">// 当前节点的指向</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">find</span>(<span class="hljs-params">item</span>)</span> &#123;&#125;  <span class="hljs-comment">// 在单链表中寻找item元素</span><br>    <span class="hljs-function"><span class="hljs-title">insert</span>(<span class="hljs-params">item, element</span>)</span> &#123;&#125;  <span class="hljs-comment">// 向单链表中插入元素</span><br>    <span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">item</span>)</span> &#123;&#125;  <span class="hljs-comment">// 在单链表中删除一个节点</span><br>    <span class="hljs-function"><span class="hljs-title">append</span>(<span class="hljs-params">element</span>)</span> &#123;&#125;  <span class="hljs-comment">// 在单链表的尾部添加元素</span><br>    <span class="hljs-function"><span class="hljs-title">findLast</span>(<span class="hljs-params"></span>)</span> &#123;&#125;  <span class="hljs-comment">// 获取单链表的最后一个节点</span><br>    <span class="hljs-function"><span class="hljs-title">isEmpty</span>(<span class="hljs-params"></span>)</span> &#123;&#125;  <span class="hljs-comment">// 判断单链表是否为空</span><br>    <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span> &#123;&#125;  <span class="hljs-comment">// 显示当前节点</span><br>    <span class="hljs-function"><span class="hljs-title">getLength</span>(<span class="hljs-params"></span>)</span> &#123;&#125;  <span class="hljs-comment">// 获取单链表的长度</span><br>    <span class="hljs-function"><span class="hljs-title">advance</span>(<span class="hljs-params">n, currNode</span>)</span> &#123;&#125;  <span class="hljs-comment">// 从当前节点向前移动n个位置</span><br>    <span class="hljs-function"><span class="hljs-title">display</span>(<span class="hljs-params"></span>)</span> &#123;&#125;  <span class="hljs-comment">// 单链表的遍历显示</span><br>    <span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;&#125;  <span class="hljs-comment">// 清空单链表</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123; <span class="hljs-comment">//节点的数据结构</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">data</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<span class="hljs-comment">// 当前节点的数值大小</span><br>        <span class="hljs-comment">// this.prev = null;</span><br>        <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">//指向下一节点的指正</span><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingileList</span> </span>&#123; <span class="hljs-comment">//单链表的数据结构</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = <span class="hljs-number">0</span>; <span class="hljs-comment">//单链表的长度</span><br>        <span class="hljs-built_in">this</span>.head = <span class="hljs-keyword">new</span> Node(<span class="hljs-string">&#x27;head&#x27;</span>); <span class="hljs-comment">//表头节点</span><br>        <span class="hljs-built_in">this</span>.currentNode = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//当前节点的指向</span><br>    &#125;<br>    <span class="hljs-comment">// 寻找元素</span><br>    <span class="hljs-function"><span class="hljs-title">find</span>(<span class="hljs-params">item</span>)</span> &#123;<br>        <span class="hljs-keyword">let</span> currNode = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">while</span> (currNode &amp;&amp; (currNode.data != item))<br>            currNode = currNode.next;<br>        <span class="hljs-keyword">return</span> currNode;<br>    &#125;<br>    <span class="hljs-comment">//返回最后一个节点</span><br>    <span class="hljs-function"><span class="hljs-title">findLast</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">let</span> currNode = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">while</span> (currNode.next)<br>            currNode = currNode.next;<br>        <span class="hljs-keyword">return</span> currNode;<br>    &#125;<br>    <span class="hljs-comment">//在链表尾部插入节点</span><br>    <span class="hljs-function"><span class="hljs-title">append</span>(<span class="hljs-params">element</span>)</span> &#123;<br>        <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> Node(element);<br>        <span class="hljs-keyword">let</span> currNode = <span class="hljs-built_in">this</span>.findLast();<br>        currNode.next = newNode;<br>        <span class="hljs-built_in">this</span>.size++;<br>    &#125;<br>    <span class="hljs-comment">// 在单链表中插入元素</span><br>    <span class="hljs-function"><span class="hljs-title">insert</span>(<span class="hljs-params">item, element</span>)</span> &#123;<br>        <span class="hljs-keyword">let</span> itemNode = <span class="hljs-built_in">this</span>.find(item);<br>        <span class="hljs-keyword">if</span> (!itemNode) <span class="hljs-comment">//当查找的结果为空时</span><br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> Node(element);<br>        newNode.next = itemNode.next;<br>        itemNode.next = newNode;<br>        <span class="hljs-built_in">this</span>.size++;<br>    &#125;<br>    <span class="hljs-comment">//打印单链表</span><br>    <span class="hljs-function"><span class="hljs-title">display</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">let</span> currNode = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">while</span> (currNode) &#123;<br>            result += currNode.data;<br>            currNode = currNode.next;<br>            <span class="hljs-keyword">if</span> (currNode) &#123;<br>                result += <span class="hljs-string">&#x27;-&gt;&#x27;</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(result);<br>    &#125;<br>    <span class="hljs-comment">// 单链表删除节点</span><br>    <span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">item</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.find(item))<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">let</span> currNode = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">while</span> (currNode.next.data != item) &#123;<br>            <span class="hljs-keyword">if</span> (!currNode.next)<br>                <span class="hljs-keyword">return</span>;<br>            currNode = currNode.next;<br>        &#125;<br>        currNode.next = currNode.next.next;<br>        <span class="hljs-built_in">this</span>.size--<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> list1 = <span class="hljs-keyword">new</span> SingileList()<br>list1.append(<span class="hljs-string">&#x27;节点1&#x27;</span>)<br>list1.append(<span class="hljs-string">&#x27;节点2&#x27;</span>)<br>list1.append(<span class="hljs-string">&#x27;节点3&#x27;</span>)<br>list1.insert(<span class="hljs-string">&#x27;节点2&#x27;</span>, <span class="hljs-string">&#x27;我是插入节点&#x27;</span>)<br>list1.display()<br></code></pre></td></tr></table></figure><h3 id="leetcode-第21题-合并两个有序链表"><a href="#leetcode-第21题-合并两个有序链表" class="headerlink" title="leetcode 第21题 合并两个有序链表"></a>leetcode 第21题 合并两个有序链表</h3><p>题解</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs q">首先，我们设定一个哨兵节点 prehead ，这可以在最后让我们比较容易地返回合并后的链表。我们维护一个 <span class="hljs-built_in">prev</span> 指针，我们需要做的是调整它的 <span class="hljs-built_in">next</span> 指针。然后，我们重复以下过程，直到 l1 或者 l2 指向了 <span class="hljs-built_in">null</span> ：如果 l1 当前节点的值小于等于 l2 ，我们就把 l1 当前的节点接在 <span class="hljs-built_in">prev</span> 节点的后面同时将 l1 指针往后移一位。否则，我们对 l2 做同样的操作。不管我们将哪一个元素接在了后面，我们都需要把 <span class="hljs-built_in">prev</span> 向后移一位。<br><br>在循环终止的时候， l1 和 l2 至多有一个是非空的。由于输入的两个链表都是有序的，所以不管哪个链表是非空的，它包含的所有元素都比前面已经合并链表中的所有元素都要大。这意味着我们只需要简单地将非空链表接在合并链表的后面，并返回合并链表即可。<br></code></pre></td></tr></table></figure><p>来源与leetcode官方题解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * function ListNode(val, next) &#123;</span><br><span class="hljs-comment"> *     this.val = (val===undefined ? 0 : val)</span><br><span class="hljs-comment"> *     this.next = (next===undefined ? null : next)</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;ListNode&#125;</span> <span class="hljs-variable">l1</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;ListNode&#125;</span> <span class="hljs-variable">l2</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;ListNode&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> mergeTwoLists = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">l1, l2</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> preHead = <span class="hljs-keyword">new</span> ListNode(-<span class="hljs-number">1</span>) <span class="hljs-comment">//在head节点前建立一个哑节点</span><br>    <span class="hljs-keyword">let</span> prev = preHead;<br>    <span class="hljs-keyword">while</span>(l1!=<span class="hljs-literal">null</span>&amp;&amp;l2!=<span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(l1.val&lt;l2.val)<br>        &#123;<br>            prev.next = l1;<br>            l1 = l1.next;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            prev.next = l2;<br>            l2 = l2.next;<br>        &#125;<br>        prev=prev.next;<br>    &#125;<br>    prev.next = l1==<span class="hljs-literal">null</span>?l2:l1<br>    <span class="hljs-keyword">return</span> preHead.next;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第55题</title>
    <link href="/2021/06/01/leetcode%E7%AC%AC55%E9%A2%98/"/>
    <url>/2021/06/01/leetcode%E7%AC%AC55%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="leetcode-第55题-跳跃游戏"><a href="#leetcode-第55题-跳跃游戏" class="headerlink" title="leetcode 第55题 跳跃游戏"></a>leetcode 第55题 跳跃游戏</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标。</p><p>示例 1：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [2,3,1,1,4]<br>输出：true<br>解释：可以先跳<span class="hljs-number"> 1 </span>步，从下标<span class="hljs-number"> 0 </span>到达下标 1, 然后再从下标<span class="hljs-number"> 1 </span>跳<span class="hljs-number"> 3 </span>步到达最后一个下标。<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">nums</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>]<br>输出：<span class="hljs-literal">false</span><br>解释：无论怎样，总会到达下标为 <span class="hljs-number">3</span> 的位置。但该下标的最大跳跃长度是 <span class="hljs-number">0</span> ， 所以永远不可能到达最后一个下标。<br></code></pre></td></tr></table></figure><p>提示：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>&lt;= nums.length &lt;= <span class="hljs-number">3</span> * <span class="hljs-number">104</span><br><span class="hljs-symbol">0 </span>&lt;= nums[i] &lt;= <span class="hljs-number">105</span><br></code></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="方法一-动态规划"><a href="#方法一-动态规划" class="headerlink" title="方法一  动态规划"></a>方法一  动态规划</h4><p>动态规划采用递归的思路</p><p>需要设定一个数组来存储该点能否通过选择一条合适的跳跃路径到达终点</p><p>从后往前遍历，当该点能够到达可以到达终点的一个点，则说明该点可以选择一条合适路径到达终点</p><p>最后看第一个点是否可以到达终点，</p><h4 id="方法二-贪心算法"><a href="#方法二-贪心算法" class="headerlink" title="方法二 贪心算法"></a>方法二 贪心算法</h4><p>贪心算法和动态规划的方法类似，但区别是这里不需要重新开辟一个数组空间</p><p>也是从后往前遍历数组，然后看前面的点能否到达该点</p><h3 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h3><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">从后往前走<br><span class="hljs-keyword">var</span> canJump = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> totalLength = nums.length;<br>    <span class="hljs-keyword">const</span> memo = <span class="hljs-built_in">Array</span>(totalLength).fill(<span class="hljs-number">0</span>)<br>    memo[totalLength - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = totalLength - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;  <span class="hljs-comment">// 从后往前遍历</span><br>        <span class="hljs-keyword">const</span> maxJump = <span class="hljs-built_in">Math</span>.min(i + nums[i], totalLength - <span class="hljs-number">1</span>) <span class="hljs-comment">//能够跳跃到的最大位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; i &lt;= maxJump; i++) &#123;<span class="hljs-comment">//判断该点是否为能到选择一条路径跳到终点</span><br>            <span class="hljs-keyword">if</span> (memo[j] == <span class="hljs-number">1</span>) &#123;<br>                memo[i] = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (memo[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canJump = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>    <span class="hljs-comment">// 从后往前遍历</span><br>    <span class="hljs-keyword">let</span> index = nums.length - <span class="hljs-number">1</span>; <span class="hljs-comment">// 这个点表示需要到达的位置，这个点是实时更新的</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = nums.length - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (i + nums[i] &gt;= index)<br>            index = i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> index == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第198题</title>
    <link href="/2021/05/24/leetcode%E7%AC%AC%E4%B8%80%E4%B9%9D%E5%85%AB%E9%A2%98/"/>
    <url>/2021/05/24/leetcode%E7%AC%AC%E4%B8%80%E4%B9%9D%E5%85%AB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="leetcode-第198题-打家劫舍"><a href="#leetcode-第198题-打家劫舍" class="headerlink" title="leetcode 第198题 打家劫舍"></a>leetcode 第198题 打家劫舍</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><p>示例 1：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：[1,2,3,1]<br>输出：4<br>解释：偷窃<span class="hljs-number"> 1 </span>号房屋 (金额 = 1) ，然后偷窃<span class="hljs-number"> 3 </span>号房屋 (金额 = 3)。<br>     偷窃到的最高金额 =<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 4 </span>。<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：[2,7,9,3,1]<br>输出：12<br>解释：偷窃<span class="hljs-number"> 1 </span>号房屋 (金额 = 2), 偷窃<span class="hljs-number"> 3 </span>号房屋 (金额 = 9)，接着偷窃<span class="hljs-number"> 5 </span>号房屋 (金额 = 1)。<br>     偷窃到的最高金额 =<span class="hljs-number"> 2 </span>+<span class="hljs-number"> 9 </span>+<span class="hljs-number"> 1 </span>=<span class="hljs-number"> 12 </span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 400</code></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题算是动态规划的入门题了，求动态规划题一般有四部：</p><ul><li>定义子问题</li></ul><p>这道题的第k个子问题就是从所有房子中偷得最多的钱转换成从k个房子内偷最多的钱</p><ul><li><p>写出子问题的递推关系</p><p>k个房子中最后一个房子是H(k-1)，如果不偷这个房子，那么问题就变成在k-1个房子偷到最大的金额，也就是子问题f(k-1)。如果要偷H(k-1)则H(k-2)房子不能偷，也就是f(k-2)+H(k-1),应该取这两者的大值</p></li><li><p>确定DP数组的计算顺序</p><p>那么，只要搞清楚了子问题的计算顺序，就可以确定 DP 数组的计算顺序。对于小偷问题，我们分析子问题的依赖关系，发现每个 f(k)f(k) 依赖 f(k-1)f(k−1) 和 f(k-2)f(k−2)。也就是说，dp[k] 依赖 dp[k-1] 和 dp[k-2]，如下图所示。</p></li><li><p>空间优化</p><p>才接触到动态规划，先不空间优化了</p></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * leetcode 第198题 打家劫舍</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">var</span> rob = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>    <span class="hljs-comment">//动态规划问题</span><br>    <span class="hljs-comment">// 动态规划问题主要是写出状态转移方程</span><br>    <span class="hljs-comment">//构造一个dp数组，</span><br>    <span class="hljs-comment">// dp[n] = max&#123;dp[n-1],dp[n-2]+nums[n-1]&#125;</span><br>    <span class="hljs-keyword">let</span> dp = [];<br>    <span class="hljs-keyword">let</span> n = nums.length<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    dp[<span class="hljs-number">1</span>] = nums[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i &lt;= nums.length; i++) &#123;<br>        dp[i] = <span class="hljs-built_in">Math</span>.max(dp[i - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">2</span>] + nums[i-<span class="hljs-number">1</span>])<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n]<br>&#125;;<br>rob([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第十九题</title>
    <link href="/2021/05/22/leetcode%E7%AC%AC%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <url>/2021/05/22/leetcode%E7%AC%AC%E5%8D%81%E4%B9%9D%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="leetcode-第15题-三数之和"><a href="#leetcode-第15题-三数之和" class="headerlink" title="leetcode 第15题 三数之和"></a>leetcode 第15题 三数之和</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：nums = [<span class="hljs-string">-1</span>,0,1,2,<span class="hljs-string">-1</span>,<span class="hljs-string">-4</span>]<br>输出：[[<span class="hljs-string">-1</span>,<span class="hljs-string">-1</span>,2],[<span class="hljs-string">-1</span>,0,1]]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 3000</code></li><li><code>-105 &lt;= nums[i] &lt;= 105</code></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题说的是三数之和 可以通过遍历数组然后转换成两数之和进行求解，两数之和这里也是用的双指针的解法，详细见leetcode_1</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var threeSum = <span class="hljs-keyword">function</span> (nums) &#123;<br>    let ans = [];<br>    <span class="hljs-keyword">if</span> (nums.length &lt; <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">return</span> ans;<br>    var helper = <span class="hljs-keyword">function</span> (nums, <span class="hljs-keyword">start</span>, <span class="hljs-keyword">end</span>, target, <span class="hljs-keyword">value</span>) &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">start</span> &lt; <span class="hljs-keyword">end</span>) &#123;<br>            let sum = nums[<span class="hljs-keyword">start</span>] + nums[<span class="hljs-keyword">end</span>]<br>            <span class="hljs-keyword">if</span> (sum == target) &#123; //找到两数<br>                let combine = []<br>                combine.push(<span class="hljs-keyword">value</span>)<br>                combine.push(nums[<span class="hljs-keyword">start</span>])<br>                combine.push(nums[<span class="hljs-keyword">end</span>])<br>                ans.push(combine);<br>                <span class="hljs-keyword">while</span> (<span class="hljs-keyword">start</span> &lt; <span class="hljs-keyword">end</span> &amp;&amp; nums[<span class="hljs-keyword">start</span>] == nums[<span class="hljs-keyword">start</span> + <span class="hljs-number">1</span>]) // 过滤掉重复数 方便后续继续搜索<br>                    <span class="hljs-keyword">start</span>++;<br>                <span class="hljs-keyword">start</span>++;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-keyword">start</span> &lt; <span class="hljs-keyword">end</span> &amp;&amp; nums[<span class="hljs-keyword">end</span>] == nums[<span class="hljs-keyword">end</span> - <span class="hljs-number">1</span>])<br>                    <span class="hljs-keyword">end</span><span class="hljs-comment">--;</span><br>                <span class="hljs-keyword">end</span><span class="hljs-comment">--;</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; target)<br>                <span class="hljs-keyword">start</span>++;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">end</span><span class="hljs-comment">--;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    nums.sort((a, b) =&gt; &#123;<br>        <span class="hljs-keyword">return</span> a - b;<br>    &#125;)<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) //避免重复<br>            <span class="hljs-keyword">continue</span><br>        helper(nums, i + <span class="hljs-number">1</span>, nums.length - <span class="hljs-number">1</span>, -nums[i], nums[i])<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第三十九题</title>
    <link href="/2021/05/19/leet%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <url>/2021/05/19/leet%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B9%9D%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a>组合总和</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个无重复元素的数组 <code>candidates</code> 和一个目标数<code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的数字可以无限制重复被选取。</p><p>说明：</p><ul><li>所有数字（包括 <code>target</code>）都是正整数。</li><li>解集不能包含重复的组合。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：candidates = <span class="hljs-comment">[2,3,6,7]</span>, target = 7,<br>所求解集为：<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[7]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[2,2,3]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：candidates = <span class="hljs-comment">[2,3,5]</span>, target = 8,<br>所求解集为：<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[2,2,2,2]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[2,3,3]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[3,5]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>1 &lt;= candidates.length &lt;= 30</li><li>1 &lt;= candidates[i] &lt;= 200</li><li>candidate 中的每个元素都是独一无二的。</li><li>1 &lt;= target &lt;= 500</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题的方法也是回溯法，回溯法一直感觉比较抽象，无法理解其中的精髓。回溯法和深度优先遍历很像。通常通过递归实现。通过回溯法搜索所有可能的情况，即组合与目标值相同的情况，符合条件则将其存入到结果中。做这种题可以通过画树型图的方式进行解决。</p><p>以输入：<code>candidates = [2, 3, 6, 7]</code>, <code>target = 7</code> 为例：</p><p><img src="https://ae01.alicdn.com/kf/Ue544b8c5093f43d7ae511eb7a60ea684a.jpg"></p><p>说明：</p><ul><li>以 target = 7 为 根结点 ，创建一个分支的时 做减法 ；</li><li>每一个箭头表示：从父亲结点的数值减去边上的数值，得到孩子结点的数值。边的值就是题目中给出的 candidate 数组的每个元素的值；</li><li>减到 00 或者负数的时候停止，即：结点 00 和负数结点成为叶子结点；</li><li>所有从根结点到结点 00 的路径（只能从上往下，没有回路）就是题目要找的一个结果。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> combinationSum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">candidates, target</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> ans = []<br>    candidates.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> a-b<br>    &#125;)<br>    <span class="hljs-keyword">var</span> dfs = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">combine, candidates, target, level</span>) </span>&#123;<br>        <span class="hljs-comment">//combine 当前结果集</span><br>        <span class="hljs-comment">//condidates 候选人</span><br>        <span class="hljs-comment">// target 目标值</span><br>        <span class="hljs-comment">// level 当前所在的层数</span><br>        <span class="hljs-comment">//定义 边界条件</span><br>        <span class="hljs-keyword">if</span> (target == <span class="hljs-number">0</span>) &#123;<br>            ans.push(combine.slice())<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = level; i &lt; candidates.length &amp;&amp; (target - candidates[i]) &gt;= <span class="hljs-number">0</span>; i++) &#123; <br>            combine.push(candidates[i]); <span class="hljs-comment">// 压入当前结果</span><br>            dfs(combine, candidates, target - candidates[i], i)<br>            combine.pop()  <span class="hljs-comment">//从当前结果中弹出</span><br>        &#125;<br>    &#125;<br>    dfs([], candidates, target, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第二十二题</title>
    <link href="/2021/05/18/leetcode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E9%A2%98/"/>
    <url>/2021/05/18/leetcode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Leetcode-第22题-括号生成"><a href="#Leetcode-第22题-括号生成" class="headerlink" title="Leetcode 第22题    括号生成"></a>Leetcode 第22题    括号生成</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>示例 1：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入：<span class="hljs-built_in">n</span> = <span class="hljs-number">3</span><br>输出：[<span class="hljs-string">&quot;((()))&quot;</span>,<span class="hljs-string">&quot;(()())&quot;</span>,<span class="hljs-string">&quot;(())()&quot;</span>,<span class="hljs-string">&quot;()(())&quot;</span>,<span class="hljs-string">&quot;()()()&quot;</span>]<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入：<span class="hljs-built_in">n</span> = <span class="hljs-number">1</span><br>输出：[<span class="hljs-string">&quot;()&quot;</span>]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 8</code></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这里的解题思路是回溯法，即倒推的方法</p><p><img src="https://ae01.alicdn.com/kf/U603dcfcc85c942c88b54d910927173fbN.jpg"></p><p>上面是出现的所有情况，但是有一些情况是不满足条件的，例如<code>((((</code>、<code>((()</code>等情况</p><p>即当左括号的数量大于n或者右括号数量大于左括号数量时 该种情况肯定是不能满足的</p><p>当总括号数量等于2n时，即可返回结果</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> generateParenthesis = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> res = [];<br>    <span class="hljs-keyword">var</span> backtracking = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s = <span class="hljs-string">&quot;&quot;</span>, left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (left&gt;n||right&gt;left) <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> (s.length == n * <span class="hljs-number">2</span>) &#123;<br>            res.push(s)<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (left &lt; n)<br>            backtracking(s + <span class="hljs-string">&#x27;(&#x27;</span>, left + <span class="hljs-number">1</span>, right)<br>        <span class="hljs-keyword">if</span> (right&lt;left)<br>            backtracking(s + <span class="hljs-string">&#x27;)&#x27;</span>, left, right + <span class="hljs-number">1</span>)<br>    &#125;<br>    backtracking()<br>    <span class="hljs-keyword">return</span> res<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第十二题</title>
    <link href="/2021/05/17/leetcode%E7%AC%AC%E5%8D%81%E4%BA%8C%E9%A2%98/"/>
    <url>/2021/05/17/leetcode%E7%AC%AC%E5%8D%81%E4%BA%8C%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Leetcode-第十二题-整数转罗马数字"><a href="#Leetcode-第十二题-整数转罗马数字" class="headerlink" title="Leetcode  第十二题 整数转罗马数字"></a>Leetcode  第十二题 整数转罗马数字</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>罗马数字包含以下七种字符： <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">字符          数值<br><span class="hljs-built_in">I</span>             <span class="hljs-number">1</span><br><span class="hljs-variable">V</span>             <span class="hljs-number">5</span><br><span class="hljs-variable">X</span>             <span class="hljs-number">10</span><br><span class="hljs-variable">L</span>             <span class="hljs-number">50</span><br><span class="hljs-built_in">C</span>             <span class="hljs-number">100</span><br><span class="hljs-built_in">D</span>             <span class="hljs-number">500</span><br><span class="hljs-variable">M</span>             <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给你一个整数，将其转为罗马数字。</p><p>示例 1:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">输入: <span class="hljs-built_in">num</span> = <span class="hljs-number">3</span><br>输出: <span class="hljs-string">&quot;III&quot;</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">输入: <span class="hljs-built_in">num</span> = <span class="hljs-number">4</span><br>输出: <span class="hljs-string">&quot;IV&quot;</span><br></code></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">输入: <span class="hljs-built_in">num</span> = <span class="hljs-number">9</span><br>输出: <span class="hljs-string">&quot;IX&quot;</span><br></code></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入: <span class="hljs-attr">num</span> = <span class="hljs-number">58</span><br>输出: <span class="hljs-string">&quot;LVIII&quot;</span><br>解释: <span class="hljs-attr">L</span> = <span class="hljs-number">50</span>, <span class="hljs-attr">V</span> = <span class="hljs-number">5</span>, <span class="hljs-attr">III</span> = <span class="hljs-number">3</span>.<br></code></pre></td></tr></table></figure><p>示例 5:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入: <span class="hljs-attr">num</span> = <span class="hljs-number">1994</span><br>输出: <span class="hljs-string">&quot;MCMXCIV&quot;</span><br>解释: <span class="hljs-attr">M</span> = <span class="hljs-number">1000</span>, <span class="hljs-attr">CM</span> = <span class="hljs-number">900</span>, <span class="hljs-attr">XC</span> = <span class="hljs-number">90</span>, <span class="hljs-attr">IV</span> = <span class="hljs-number">4</span>.<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num &lt;= 3999</code></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>根据罗马数字的唯一表示法，为了表示一个给定的整数<code>num</code>，我们寻找不超过 <code>num</code> 的最大符号值，将 <code>num</code> 减去该符号值，然后继续寻找不超过 <code>num</code>的最大符号值，将该符号拼接在上一个找到的符号之后，循环直至 <code>num</code> 为 00。最后得到的字符串即为 <code>num</code>的罗马数字表示。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> <span class="hljs-variable">num</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;string&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> intToRoman = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">const</span> valueSymbols = [[<span class="hljs-number">1000</span>, <span class="hljs-string">&quot;M&quot;</span>], [<span class="hljs-number">900</span>, <span class="hljs-string">&quot;CM&quot;</span>], [<span class="hljs-number">500</span>, <span class="hljs-string">&quot;D&quot;</span>], [<span class="hljs-number">400</span>, <span class="hljs-string">&quot;CD&quot;</span>], [<span class="hljs-number">100</span>, <span class="hljs-string">&quot;C&quot;</span>], [<span class="hljs-number">90</span>, <span class="hljs-string">&quot;XC&quot;</span>], [<span class="hljs-number">50</span>, <span class="hljs-string">&quot;L&quot;</span>], [<span class="hljs-number">40</span>, <span class="hljs-string">&quot;XL&quot;</span>], [<span class="hljs-number">10</span>, <span class="hljs-string">&quot;X&quot;</span>], [<span class="hljs-number">9</span>, <span class="hljs-string">&quot;IX&quot;</span>], [<span class="hljs-number">5</span>, <span class="hljs-string">&quot;V&quot;</span>], [<span class="hljs-number">4</span>, <span class="hljs-string">&quot;IV&quot;</span>], [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;I&quot;</span>]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [value, symbol] <span class="hljs-keyword">of</span> valueSymbols) &#123;<br>        <span class="hljs-keyword">while</span> (num &gt;= value) &#123;<br>            num -= value;<br>            res += symbol;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第十一题</title>
    <link href="/2021/05/16/leetcode%E7%AC%AC%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <url>/2021/05/16/leetcode%E7%AC%AC%E5%8D%81%E4%B8%80%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Leetcode第11题-乘水最多的容器"><a href="#Leetcode第11题-乘水最多的容器" class="headerlink" title="Leetcode第11题 乘水最多的容器"></a>Leetcode第11题 乘水最多的容器</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器。</p><p><strong>示例 1：</strong></p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="img"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：[<span class="hljs-number">1,8,6,2</span>,<span class="hljs-number">5,4,8,3</span>,<span class="hljs-number">7</span>]<br>输出：<span class="hljs-number">49</span> <br>解释：图中垂直线代表输入数组 [<span class="hljs-number">1,8,6,2</span>,<span class="hljs-number">5,4,8,3</span>,<span class="hljs-number">7</span>]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 <span class="hljs-number">49</span>。<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">输入：<span class="hljs-built_in">height</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：height = <span class="hljs-string">[4,3,2,1,4]</span><br>输出：<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">输入：<span class="hljs-built_in">height</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>n = height.length<br>2 &lt;= n &lt;= 3 * 104<br>0 &lt;= height[i] &lt;= 3 * 104</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>典型的双指针题目，这里影响盛水体积的因素有两个，长和宽，即数组下标距离以及对应的较小的数组值。</p><p>所以，应该有两个指针分别指向数组开头以及数组末尾，每个轮次应该移动数组值较小的那个指针</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> maxArea = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">height</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> j = height.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (height.length == <span class="hljs-number">0</span> || height.length == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> res;<br><br>    <span class="hljs-keyword">while</span>(i&lt;=j)<br>    &#123;<br>        <span class="hljs-keyword">let</span> temp;<br>        <span class="hljs-keyword">if</span>(height[j]&gt;height[i])<br>        &#123;<br>            temp = height[i];<br>            i++<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            temp = height[j]<br>            j--;<br>        &#125;<br>        result_oneTrun = (j-i+<span class="hljs-number">1</span>)*temp;<br>        <span class="hljs-keyword">if</span>(res&lt;result_oneTrun)<br>            res = result_oneTrun<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第五题</title>
    <link href="/2021/05/11/leetcode%E7%AC%AC%E4%BA%94%E9%A2%98/"/>
    <url>/2021/05/11/leetcode%E7%AC%AC%E4%BA%94%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="leetcode-第五题-最长回文子串"><a href="#leetcode-第五题-最长回文子串" class="headerlink" title="leetcode 第五题 最长回文子串"></a>leetcode 第五题 最长回文子串</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>示例 1:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;babad&quot;</span><br>输出：<span class="hljs-string">&quot;bab&quot;</span><br>解释：<span class="hljs-string">&quot;aba&quot;</span> 同样是符合题意的答案。<br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;cbbd&quot;</span><br>输出：<span class="hljs-string">&quot;bb&quot;</span><br></code></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">输入：s = <span class="hljs-comment">&quot;a&quot;</span><br>输出：<span class="hljs-comment">&quot;a&quot;</span><br></code></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;ac&quot;</span><br>输出：<span class="hljs-string">&quot;a&quot;</span><br></code></pre></td></tr></table></figure><blockquote><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母（大写和/或小写）组成</li></ul></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>1、如果字符串长度小于2，则直接返回原字符串</p><p>2、定义两个变量，一个start存储当前找到的最大回文字符串的起始位置，另一个maxLength记录字符串的长度(终止位置就是start+maxLength)</p><p>3、创建一个helper function(辅助函数)，该辅助函数的功能有：判断左边和右边是否越界、同时让左边的字符是否等于右边的字符当满足以上条件时，则更新字符串最大长度以及最大字符串的起始位置。然后将left–,right++,继续判断，直到不满足上述三个条件之一</p><p>4、遍历字符串，每个位置调用两遍辅助函数，第一遍检查i-1，i+1（abcba），第二遍检查i，i+1（abba）</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// leetcode 第五题 最长回文子串</span><br><span class="hljs-keyword">var</span> longestPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (s.length &lt; <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> s;<br>    <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> maxLength = <span class="hljs-number">1</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">expandFromCenter</span>(<span class="hljs-params">left, right</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(left,right);<br>        <span class="hljs-built_in">console</span>.log(s[left],s[right]);<br>        <span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; s.length &amp;&amp; s[left] == s[right]) &#123;<br>            <span class="hljs-keyword">if</span>(right-left+<span class="hljs-number">1</span>&gt;maxLength)<br>            &#123;<br>                start = left;<br>                maxLength = right-left+<span class="hljs-number">1</span>;<br>            &#125;<br>            left--;<br>            right++;<br>        &#125;<br>      <br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>        expandFromCenter(i - <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);<br>        expandFromCenter(i, i + <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.substring(start,start+maxLength)<br>&#125;;<br><span class="hljs-built_in">console</span>.log(longestPalindrome(<span class="hljs-string">&quot;babad&quot;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode第三题</title>
    <link href="/2021/05/10/leetcode%E7%AC%AC%E4%B8%89%E9%A2%98/"/>
    <url>/2021/05/10/leetcode%E7%AC%AC%E4%B8%89%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="leetcode-第三题-无重复字符的最长子串"><a href="#leetcode-第三题-无重复字符的最长子串" class="headerlink" title="leetcode 第三题 无重复字符的最长子串"></a>leetcode 第三题 无重复字符的最长子串</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;abcabcbb&quot;</span><br><span class="hljs-section">输出: 3 </span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;bbbbb&quot;</span><br><span class="hljs-section">输出: 1</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></code></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;pwwkew&quot;</span><br><span class="hljs-section">输出: 3</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br>     请注意，你的答案必须是 子串 的长度，<span class="hljs-string">&quot;pwke&quot;</span> 是一个子序列，不是子串。<br></code></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;&quot;</span><br><span class="hljs-section">输出: 0</span><br></code></pre></td></tr></table></figure><blockquote><p>提示：<br>0 &lt;= s.length &lt;= 5 * 104<br>s 由英文字母、数字、符号和空格组成</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>采用滑动窗口的一个思路 sliding window</p><p>1、 创建两个指针，并且两个指针都指向字符串s的开头，创建一个Set，maxLength=0</p><p>2、通过指针 i 遍历字符串，当 set 中不含 s[i ]时，set中添加 s[i]，并且set长度与maxLength进行比较，实时更新maxLength的值</p><p>3、当set中含s[i]时，set中删除s[j]并且j右移，直到set中不含s[i]</p><p>4、 遍历字符串一遍后的结果即是最大长度</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lengthOfLongestSubstring = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> occ = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>    <span class="hljs-keyword">const</span> n = s.length;<br>    <span class="hljs-keyword">let</span> maxLength = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> i =  j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// 当set中不含s[i]时，将s[i]添加到set中，并更新最大长度</span><br>        <span class="hljs-keyword">if</span> (!occ.has(s[i])) &#123;<br>            occ.add(s[i]);<br>            maxLength = <span class="hljs-built_in">Math</span>.max(maxLength, occ.size)<br>        &#125;<br>        <span class="hljs-comment">// 当set中含有s[i]时，将s[j]进行删除</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (occ.has(s[i])) &#123;<br>                occ.delete(s[j])<br>                j++;<br>            &#125;<br>            occ.add(s[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxLength;<br> &#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>希尔排序算法</title>
    <link href="/2021/03/20/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/03/20/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="shell排序"><a href="#shell排序" class="headerlink" title="shell排序"></a>shell排序</h2><p>shell是直接插入排序的改进方法，shell排序的思想是把待排的元素按照增量进行分组，对每一组分别进行排序，每次分组排序完成后增量减半，待增量减小为1时，排序结束</p><p><img src="https://ae01.alicdn.com/kf/U45806cdfee134a4386c97f84b17093b9F.jpg"></p><p>以上图为例，我们取增量为5，第一趟被分为5组，每一组直接插入排序</p><p>第二次增量减半，被分为2组，每一组也是直接插入排序</p><p>第三次增量减半，为1，这是整个称为一组，直接进行插入排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> d = n / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d; i++)            <span class="hljs-comment">//通过d进行分组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + d; j &lt; n; j += d) <span class="hljs-comment">//每个组进行插入排序</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> temp = arr[j];<br>                <span class="hljs-keyword">int</span> k;<br>                <span class="hljs-keyword">for</span> (k = j - d; k &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[k] &gt; temp; k = k - d)<br>                    arr[k + d] = arr[k];<br>                arr[k + d] = temp;<br>            &#125;<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">break</span>;<br>        d /= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终的代码如上</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue知识点(持续更新)</title>
    <link href="/2021/03/13/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/13/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="初识Vue响应式"><a href="#初识Vue响应式" class="headerlink" title="初识Vue响应式"></a>初识Vue响应式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data  = &#123;&#125;;<br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;Vue&#x27;</span>;<br><span class="hljs-built_in">Object</span>.defineProperty(data,<span class="hljs-string">&#x27;name&#x27;</span>,&#123;<br>    get:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;get&#x27;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;,<br>    set:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newVlaue</span>)</span><br><span class="hljs-function">    </span>&#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我的值被修改啦&quot;</span>);<br>       name = newVlaue;<br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(data.name);<br>data.name = <span class="hljs-string">&#x27;bobo&#x27;</span>; <span class="hljs-comment">//在修改的时候数据被劫持了，所以这是应该通过set函数为其改变值，如果set里面不操作这里的值不会被改变</span><br><span class="hljs-built_in">console</span>.log(data.name);<br></code></pre></td></tr></table></figure><p>通过<code>Object.defineProperty</code>，为对象添加属性，或改变对象的现有属性，里面定义两个字段，<code>get</code>和<code>set</code>，当要获取数据值时会执行get(),当值发送修改时会执行set()函数，</p><blockquote><p>在创建Vue实例时，vue会遍历data选项的属性，利用<code>Object.defineProperty</code>为属性添加getter和setter对数据进行劫持，并在内部追踪依赖，在属性被访问或者被修改时及时通知</p><p>每一个组件实例都会有响应的watcher实例，会在属性被渲染时记载所以数据属性，之后依赖被改动时，setter 方法会通知依赖与此 data 的 watcher 实例重新计算（派发更新）,从而使它关联的组件重新渲染。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ud01ef74bff2e4475b6f5b2ebeb8d6ac2H.jpg"></p><h3 id="Vue父子组件通信"><a href="#Vue父子组件通信" class="headerlink" title="Vue父子组件通信"></a>Vue父子组件通信</h3><h4 id="父组件与子组件进行通信：使用props"><a href="#父组件与子组件进行通信：使用props" class="headerlink" title="父组件与子组件进行通信：使用props"></a>父组件与子组件进行通信：使用props</h4><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h1&gt;父亲&lt;&#x2F;h1&gt;<br>&lt;!--第一个:message &#x3D; &quot;message&quot;是将message传递给子组件--&gt;<br>    &lt;Child :message &#x3D; &quot;message&quot;&gt;&lt;&#x2F;Child&gt;<br>&lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>import Child from &#39;.&#x2F;Child.vue&#39;;<br>export default &#123;<br>  name: &#39;App&#39;,<br>  components: &#123;<br>    Child,<br>  &#125;,<br>  data()&#123;<br>    return&#123;<br>      message:&#39;hello child&#39;<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;&#x2F;script&gt;<br><br></code></pre></td></tr></table></figure><p>在父组件中引入子组件，然后在子组件的标签上绑定属性值，这就是要传递给子组件的数据</p><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h1&gt;孩子&lt;&#x2F;h1&gt;<br>  &lt;div&gt;父组件对我说：&#123;&#123;message&#125;&#125;&lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  props:&#123;<br>      message:&#123;<br>        type:String,<br>        default:()&#x3D;&gt;&#123;<br>          return &#39;&#39;<br>        &#125;<br>      &#125;<br>  &#125;,<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>在子组件上通过props属性做数据的接收</p><p>详细步骤</p><blockquote><p>1、在父组件中引入需要通信的子组件</p><p><code>import Child from &#39;./Child.vue&#39;;</code></p><p>2、在父组件的components中注册该组件</p><p> <code>components: &#123;     Child,   &#125;,</code></p><p>3、 在父组件的<code>template</code>中使用子组件，并使用直接属性名属性值进行传递</p><p><code>    &lt;Child :message = &quot;message&quot;&gt;&lt;/Child&gt;</code></p><p>4、在对应的子组件中通过props属性接收传递过来的参数</p><p><code> props:&#123;       message:&#123;         type:String,         default:()=&gt;&#123;           return &#39;&#39;         &#125;       &#125;   &#125;,</code></p></blockquote><h4 id="子组件向父组件传值，利用-emit向父组件传递一个事件"><a href="#子组件向父组件传值，利用-emit向父组件传递一个事件" class="headerlink" title="子组件向父组件传值，利用$emit向父组件传递一个事件"></a>子组件向父组件传值，利用$emit向父组件传递一个事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h1&gt;孩子&lt;&#x2F;h1&gt;<br>  &lt;button @click&#x3D;&quot;say&quot;&gt;传递给子组件值&lt;&#x2F;button&gt;<br>&lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data()&#123;<br>    return&#123;<br>      childSay:&#39;Hello Parent&#39; &#x2F;&#x2F;定义发送给父组件的数据<br>    &#125;<br>&#125;,<br>  methods:&#123;<br>    say()&#123;<br>      this.$emit(&#39;say&#39;,this.childSay);&#x2F;&#x2F;通过$emit将数据传递给子组件<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>通过$emit方法，里面的第一个参数是调用的函数名，第二个参数是要传递的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h1&gt;父亲&lt;&#x2F;h1&gt;<br>&lt;!-- 第二个是父组件监听子组件触发的say方法，调用自己的parentSay方法 --&gt;<br>    &lt;Child @say&#x3D;&quot;parentSay&quot;&gt;&lt;&#x2F;Child&gt; <br>&lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>import Child from &#39;.&#x2F;Child.vue&#39;;<br>export default &#123;<br>  name: &#39;App&#39;,<br>  components: &#123;<br>    Child,<br>  &#125;,<br>  methods:&#123;<br>    parentSay(msg)&#123;<br>      console.log(&#96;我是子组件传来的消息：$&#123;msg&#125;&#96;); &#x2F;&#x2F;接收子组件传来的消息<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>在父组件中监听子组件的@say方法，然后调用自己的方法，实参就是子组件传递过来的参数</p><p>详细步骤</p><blockquote><p>1、在子组件中自定义方法，并通过$emit()将事件和参数传递给父组件</p><p>2、父组件监听子组件触发的say方法，调用自己的<code>parentSay</code>方法</p><p>3、父组件对接收到的事件和数据做出响应</p><p><code> parentSay(msg)&#123;       console.log(</code>我是子组件传来的消息：${msg}<code>); //接收子组件传来的消息     &#125;</code></p></blockquote><h3 id="父组件调用子组件方法"><a href="#父组件调用子组件方法" class="headerlink" title="父组件调用子组件方法"></a>父组件调用子组件方法</h3><p>方法一：</p><p>在使用子组件时，给子组件加一个<code>ref</code>引用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;page1 :<span class="hljs-attribute">price</span>=<span class="hljs-string">&quot;price&quot;</span> @<span class="hljs-attribute">downPrice</span>=<span class="hljs-string">&quot;downPrice&quot;</span> <span class="hljs-attribute">ref</span>=<span class="hljs-string">&quot;page1&quot;</span>&gt;&lt;/page1&gt;<br></code></pre></td></tr></table></figure><p>父组件通过<code>this.$refs</code>即可找到该子组件，也可以操作子组件的方法</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">this</span>.$<span class="hljs-built_in">ref</span>s.page1.子组件方法<br></code></pre></td></tr></table></figure><p>方法二:</p><p>通过<code>$children</code>,可以获取到所有子组件的集合</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$children[<span class="hljs-number">0</span>].某个方法<br></code></pre></td></tr></table></figure><h3 id="子组件调用父组件方法"><a href="#子组件调用父组件方法" class="headerlink" title="子组件调用父组件方法"></a>子组件调用父组件方法</h3><p>通过 <code>$parent</code>可以找到父组件，进而调用其方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$parent.父组件方法<br></code></pre></td></tr></table></figure><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>Vuex是适用于一种状态管理工具，如果组件之间需要很对传参的话，是用传统的方式很难管理和维护项目，这时就需要vuex进行状态管理</p><p>Vuex的成员列表</p><ul><li>state 存放状态</li><li>mutations state成员操作</li><li>getter加工成员给外界</li><li>actions异步操作</li><li>modules 模态化状态管理</li></ul><h4 id="actions-异步操作"><a href="#actions-异步操作" class="headerlink" title="actions 异步操作"></a>actions 异步操作</h4><p>Vue组件如果调用某个Vuex的方法过程需要向后端请求或是出现异步操作时，需要<code>dispath</code> Vuex中的action的方法，以保证数据的同步，</p><p>如果没有异步操作，就可以直接在组件内提交状态的<code>Mutations</code>中编写方法达成对<code>state</code>成员的操作</p><p>由于直接在<code>mutation</code>方法中进行异步操作，将会引起数据失效。所以提供了Actions来专门进行异步操作，最终提交<code>mutation</code>方法。</p><p><code>Actions</code>中的方法有两个默认参数</p><ul><li><code>context</code> 上下文(相当于箭头函数中的this)对象</li><li><code>payload</code> 挂载参数</li></ul><p>例如，我们在两秒中后执行<code>2.2.2</code>节中的<code>edit</code>方法</p><p>由于<code>setTimeout</code>是异步操作，所以需要使用<code>actions</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">actions:&#123;<br>    <span class="hljs-function"><span class="hljs-title">aEdit</span>(<span class="hljs-params">context,payload</span>)</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            context.commit(<span class="hljs-string">&#x27;edit&#x27;</span>,payload)<br>        &#125;,<span class="hljs-number">2000</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>组件中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&#x27;aEdit&#x27;</span>,&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">15</span>&#125;)<br></code></pre></td></tr></table></figure><p>链接：<a href="https://www.jianshu.com/p/2e5973fe1223">https://www.jianshu.com/p/2e5973fe1223</a></p><h4 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h4><p><code>mutations</code>是操作数据的方法的集合，比如对数据进行修改，增加，删除等</p><p><code>mutations</code>方法都有默认的形参：</p><p>(<strong>[state]</strong> <strong>[,payload]</strong>)</p><ul><li><code>state</code>是当前<code>VueX</code>对象中的<code>state</code></li><li><code>payload</code>是该方法在被调用时传递参数使用的</li></ul><p>例如，我们编写一个方法，当被执行时，能把下例中的name值修改为<code>&quot;jack&quot;</code>,我们只需要这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>Vue.use(Vuex)<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex.store(&#123;<br>    state:&#123;<br>        name:<span class="hljs-string">&#x27;helloVueX&#x27;</span><br>    &#125;,<br>    mutations:&#123;<br>        <span class="hljs-comment">//es6语法，等同edit:funcion()&#123;...&#125;</span><br>        <span class="hljs-function"><span class="hljs-title">edit</span>(<span class="hljs-params">state</span>)</span>&#123;<br>            state.name = <span class="hljs-string">&#x27;jack&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>如何提交值</p><p><code>this.$store.commit(&#39;edit&#39;,&#123;age:15,sex:&#39;男&#39;&#125;)</code></p><p>增删state成员</p><p><code>Vue.set(state,&quot;age&quot;,15)</code> 新增成员</p><p><code>Vue.delete(state,age)</code> 删除成员</p><h4 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h4><p>对state中的成员加工后传递给外界</p><p>Getter中的方法有两个默认参数</p><ul><li>state：当前Vue对象的状态对象</li><li>getter：当前getter对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">getters:&#123;<br>    <span class="hljs-function"><span class="hljs-title">nameInfo</span>(<span class="hljs-params">state</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:&quot;</span>+state.name<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">fullInfo</span>(<span class="hljs-params">state,getters</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> getters.nameInfo+<span class="hljs-string">&#x27;年龄:&#x27;</span>+state.age<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$store.getters.fullInfo <span class="hljs-comment">//组件中调用方法</span><br></code></pre></td></tr></table></figure><h4 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h4><p>当项目庞大，状态非常多时，可以采用模块化管理模式。Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 <code>state、mutation、action、getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">store:.<br>│  actions.js<br>│  getters.js<br>│  index.js<br>│  mutations.js<br>│  mutations_type.js   ##该项为存放mutaions方法常量的文件，按需要可加入<br>│<br>└─modules<br>        Astore.js<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅拷贝雨深拷贝</title>
    <link href="/2021/03/11/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/03/11/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>实现方式</p><h4 id="通过遍历对象"><a href="#通过遍历对象" class="headerlink" title="通过遍历对象"></a>通过遍历对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-keyword">var</span> obj2 = &#123;&#125;;<br><br><span class="hljs-keyword">for</span>( <span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj1)<br>    obj2[key] = obj1[key];<br><br><span class="hljs-built_in">console</span>.log(obj1);<br><span class="hljs-built_in">console</span>.log(obj2);<br></code></pre></td></tr></table></figure><blockquote><p>这里有一点要注意，这里的key是变量，通过变量访问属性值时，只能通过<code>obj[key]</code>的形式，而不能通过<code>obj.key</code>的形式</p></blockquote><h4 id="通过展开运算符"><a href="#通过展开运算符" class="headerlink" title="通过展开运算符"></a>通过展开运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-keyword">var</span> obj2 = &#123;...obj1&#125;;<br><br><br><span class="hljs-built_in">console</span>.log(obj1);<br><span class="hljs-built_in">console</span>.log(obj2);<br></code></pre></td></tr></table></figure><blockquote><p>​        但是浅拷贝存在问题，由于像Array，Function，Object这种引用类型值，它的实际值是存在<code>堆</code>内存中的，浅拷贝拷贝的只是它的引用，不是开辟新的空间去存放拷贝过来的引用类型值。当有一方去改变引用类型值的内容时，另一方也会改变</p></blockquote><blockquote><p>基本数据类型拷贝还是正常的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-keyword">var</span> obj2 = &#123;...obj1&#125;;<br><br>obj1.arr[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(obj1);<br><span class="hljs-built_in">console</span>.log(obj2);<br></code></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/U2892943fcb93470c88a5d17ad3cd0681S.jpg"></p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p><img src="https://ae01.alicdn.com/kf/U5fb657f733b44f66bd1f5dceb449d5da2.jpg"></p><p>深拷贝 就是要实现如上图的这种效果，指向不同的堆内存中的值</p><h4 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//深克隆</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> newObj = <span class="hljs-keyword">new</span> obj.constructor;<span class="hljs-comment">//实例的构造函数是属于它的类，这样既能克隆实例，也能克隆对象</span><br>    <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>            <span class="hljs-keyword">if</span> (obj[key] &amp;&amp; (<span class="hljs-keyword">typeof</span> obj[key]) === <span class="hljs-string">&#x27;object&#x27;</span>) <span class="hljs-comment">//判断属性值是否为引用类型值</span><br>                newObj[key] = deepClone(obj[key]); <span class="hljs-comment">//是的话则递归调用深克隆</span><br>            <span class="hljs-keyword">else</span><br>                newObj[key] = obj[key];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newObj;<br>&#125;<br>obj1 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br>obj2 = deepClone(obj1);<br><span class="hljs-built_in">console</span>.log(obj1, obj2);<br></code></pre></td></tr></table></figure><h4 id="JSON方法"><a href="#JSON方法" class="headerlink" title="JSON方法"></a>JSON方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj</span>)</span><br><span class="hljs-function"></span>&#123;<br>    newObj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(obj));<br>    <span class="hljs-keyword">return</span> newObj;<br>&#125;<br>obj1 = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br>obj2 = deepClone(obj1);<br><span class="hljs-built_in">console</span>.log(obj1, obj2);<br></code></pre></td></tr></table></figure><p>补充，<code>JSON.stringify</code>和<code>JSON.parse</code></p><blockquote><p><code>JSON.stringify</code>可以将js对象转换成字符串，而<code>JSON.parse</code>可以将字符串形式转化成对象，前提是要符合JSON格式</p><p>这两个方法用处有很多，例如本地存储只能存储字符串，如果要存储对象，可以将其进行转换，要用时在转换回来</p><p>数组，对象，日期均可哦</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>节流与防抖</title>
    <link href="/2021/03/10/%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/"/>
    <url>/2021/03/10/%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/</url>
    
    <content type="html"><![CDATA[<h2 id="节流与防抖"><a href="#节流与防抖" class="headerlink" title="节流与防抖"></a>节流与防抖</h2><p>参与于一篇博客<a href="https://segmentfault.com/a/1190000018428170">https://segmentfault.com/a/1190000018428170</a></p><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>作者通过监听滚动条的位置这个函数说起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showTop</span>  (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> scrollTop = <span class="hljs-built_in">document</span>.body.scrollTop || <span class="hljs-built_in">document</span>.documentElement.scrollTop;<br>　　<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;滚动条位置：&#x27;</span> + scrollTop);<br>&#125;<br><span class="hljs-built_in">window</span>.onscroll  = showTop<br></code></pre></td></tr></table></figure><p>上面这个函数可以实现实时监听滚动条的位置，但是触发的频率是在是太高了</p><p><img src="https://ae01.alicdn.com/kf/U87abc8f9b91d4ccaa8bc759928e9a3df0.jpg"></p><p>如果是在真实业务中，例如百度搜索提示按照这个频率的话，后台服务器肯定就崩溃了</p><p>解决方案：在第一次触发事件时，不立即执行函数，而是给出一个期限值</p><ul><li>在200ms之内如果没有再次触发事件，则执行后面的函数</li><li>如果200ms内触发事件，则计时器清零，重新开始计时</li></ul><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* fn [function] 需要防抖的函数</span><br><span class="hljs-comment">* delay [number] 毫秒，防抖期限值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn,delay</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span> <span class="hljs-comment">//借助闭包</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(timer)&#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer) <span class="hljs-comment">//进入该分支语句，说明当前正在一个计时过程中，并且又触发了相同事件。所以要取消当前的计时，重新开始计时</span><br>            timer = <span class="hljs-built_in">setTimeout</span>(fn,delay) <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(fn,delay) <span class="hljs-comment">// 进入该分支说明当前并没有在计时，那么就开始一个计时</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>综上：<strong>防抖的主要作用，就是在事件被连续触发时，通过防抖让事件在一段时间内只会被触发一次</strong></p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>如果在限定事件段内，不断触发滚动事件，那么原理上这个事件可能永远也不会执行</p><p>解决思路：通过设计类似控制阀门一样定期开放的函数，<strong>也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活</strong></p><p><strong>效果</strong>：如果短时间内大量触发同一事件，那么<strong>在函数执行一次之后，该函数在指定的时间期限内不再工作</strong>，直至过了这段时间才重新生效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn,delay</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> valid = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">if</span>(!valid)&#123;<br>           <span class="hljs-comment">//休息时间 暂不接客</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <br>       &#125;<br>       <span class="hljs-comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span><br>        valid = <span class="hljs-literal">false</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn()<br>            valid = <span class="hljs-literal">true</span>;<br>        &#125;, delay)<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 请注意，节流函数并不止上面这种实现方案,</span><br><span class="hljs-comment">   例如可以完全不借助setTimeout，可以把状态位换成时间戳，然后利用时间戳差值是否大于指定间隔时间来做判定。</span><br><span class="hljs-comment">   也可以直接将setTimeout的返回的标记当做判断条件-判断当前定时器是否存在，如果存在表示还在冷却，并且在执行fn之后消除定时器表示激活，原理都一样</span><br><span class="hljs-comment">    */</span><br><br><span class="hljs-comment">// 以下照旧</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showTop</span>  (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> scrollTop = <span class="hljs-built_in">document</span>.body.scrollTop || <span class="hljs-built_in">document</span>.documentElement.scrollTop;<br>　　<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;滚动条位置：&#x27;</span> + scrollTop);<br>&#125;<br><span class="hljs-built_in">window</span>.onscroll = throttle(showTop,<span class="hljs-number">1000</span>) <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js原型与原型链</title>
    <link href="/2021/03/10/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2021/03/10/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="、JS原型与原型链"><a href="#、JS原型与原型链" class="headerlink" title="、JS原型与原型链"></a>、JS原型与原型链</h2><h3 id="原型上定义了一些公用属性和方法，利用这个原型创建的新对象实例会共享原型所以方法和属性"><a href="#原型上定义了一些公用属性和方法，利用这个原型创建的新对象实例会共享原型所以方法和属性" class="headerlink" title="原型上定义了一些公用属性和方法，利用这个原型创建的新对象实例会共享原型所以方法和属性"></a>原型上定义了一些公用属性和方法，利用这个原型创建的新对象实例会共享原型所以方法和属性</h3><p>创建原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> Person = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)</span>&#123; <span class="hljs-comment">//构造函数</span><br>        <span class="hljs-built_in">this</span>.name = name;<br> &#125;;<br><span class="hljs-comment">//添加原型方法</span><br>Person.prototype.sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot; hello&quot;</span>);<br>&#125;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;bobo&#x27;</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Jinlong&#x27;</span>);<br>person1.sayHello();<span class="hljs-comment">//输出bobo hello</span><br>person2.sayHello();<span class="hljs-comment">//输出jinlong hello</span><br><br></code></pre></td></tr></table></figure><p>通过上面的例子可以看出，创建的两个对象拥有公共的方法sayHello(),这个定义在原型上的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(person1.__proto__ === person2.__proto__);<span class="hljs-comment">//结果为true</span><br><span class="hljs-built_in">console</span>.log(Person.prototype === person1.__proto__);<span class="hljs-comment">//结果为true</span><br></code></pre></td></tr></table></figure><p>所有创建的对象都有一个<code>__proto__</code>属性，指向构造函数的<code>prototype</code></p><p><img src="https://ae01.alicdn.com/kf/U93f265bfaa9040dcb50c28c979ce4674X.jpg"></p><p><img src="https://ae01.alicdn.com/kf/U64c20215af5e4bc8944fa17e4fb08f3bE.jpg"></p><p>注意对象原型上也有<code>__proto__</code>属性,指向的是Oject</p><p><img src="https://ae01.alicdn.com/kf/Ud22bcd1b2bcb404393977ee380d4c62f3.jpg"></p><p>普通函数也是如此</p><p><img src="https://ae01.alicdn.com/kf/U3b53f224fc6642f683c72efa0af18c16l.jpg"></p><p>原型链图，原型又有一个constructor属性指回构造函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Person<span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>prototype.constructor <span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>我们知道，原型也是一个对象，所以按之前的说法，所有对象都有<code>__proto</code>属性，原型也不例外,原型链主要解决的是继承问题</p><p><img src="https://ae01.alicdn.com/kf/U843410139ca04f23a711ac22b4ec65baF.jpg"></p><p>我们可以发现，原型的<code>__proto__</code>属性指向的是构造函数<code>Object</code>的<code>prototype</code></p><p>所谓的原型链，就是一个对象使用方法或者属性，如果在对象上没有找到，则在它的原型上去找，如果还是找不到，则在原型的原型上去找，最终找到</p><p><code>Object.prototype</code>上，得到的为<code>null</code>，就不继续找了，返回<code>undefined</code></p><p><img src="https://ae01.alicdn.com/kf/U7e2eb59231874bd89d3f6e1a9c2388ccV.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>前端知识点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax请求的5步</title>
    <link href="/2021/03/09/ajax%E8%AF%B7%E6%B1%82%E7%9A%845%E6%AD%A5/"/>
    <url>/2021/03/09/ajax%E8%AF%B7%E6%B1%82%E7%9A%845%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="AJAX请求的五步"><a href="#AJAX请求的五步" class="headerlink" title="AJAX请求的五步"></a>AJAX请求的五步</h2><p>今天做笔试题的时候连这道题都忘了，哎，真的是猴子扳苞谷</p><h3 id="1、创建异步对象"><a href="#1、创建异步对象" class="headerlink" title="1、创建异步对象"></a>1、创建异步对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br></code></pre></td></tr></table></figure><h3 id="2、设置回调函数"><a href="#2、设置回调函数" class="headerlink" title="2、设置回调函数"></a>2、设置回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.onreadystatechange = callback;<br></code></pre></td></tr></table></figure><h3 id="3、设置请求的参数-与服务端建立连接"><a href="#3、设置请求的参数-与服务端建立连接" class="headerlink" title="3、设置请求的参数,与服务端建立连接"></a>3、设置请求的参数,与服务端建立连接</h3><p>这里的参数包括请求的方法以及请求的地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.open = (<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-string">&quot;http://jsonplaceholder/post&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="4、发送请求"><a href="#4、发送请求" class="headerlink" title="4、发送请求"></a>4、发送请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.send();<br></code></pre></td></tr></table></figure><h3 id="5、判断响应状态，对响应数据做响应的处理"><a href="#5、判断响应状态，对响应数据做响应的处理" class="headerlink" title="5、判断响应状态，对响应数据做响应的处理"></a>5、判断响应状态，对响应数据做响应的处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.readyStateChange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(xhr.readyState == <span class="hljs-number">4</span>)<br>     &#123;<br>         <span class="hljs-keyword">if</span>(xhr.status&gt;=<span class="hljs-number">200</span>&amp;&amp;xhr.status&lt;<span class="hljs-number">300</span>)<br>            &#123;  <br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;数据返回成功&quot;</span>);<br>                <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>            &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见排序算法</title>
    <link href="/2021/03/09/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2021/03/09/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>排序算法是算法的入门，下面介绍几种常见的排序算法</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序，顾名思义可以看成是汽水的泡泡从底层往上面冒的过程，每一轮结束后，将一轮下来大（小）的放在最后面，几轮就来，就成有序的了</p><p><img src="https://ae01.alicdn.com/kf/Ub48380d248b34d9b88a26b2a29f44914g.jpg"><br>5比8小，所以不交换，8比6大，所以要交换</p><p>8比3大，所以要交换</p><p><img src="https://ae01.alicdn.com/kf/U25f9cf892843416183b1cc7e22d1c6daB.jpg"></p><p>。。。。。</p><p>经过这样大数不断往后排，数组的最后一个元素就是9啦</p><p><img src="https://ae01.alicdn.com/kf/Ud0ede3d7118c468b99e671ae963b0597P.jpg"><br>这样经过几轮下来，形成有序数组</p><p><img src="https://ae01.alicdn.com/kf/U45d24e127abb42adb821c9e8a61fba34B.jpg"><br>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buddleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-keyword">int</span> temp;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++) <span class="hljs-comment">//需要这样重复多少趟 </span><br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n<span class="hljs-number">-1</span>-i;j++) <span class="hljs-comment">// 没这样一趟需要比较多少次 </span><br><span class="hljs-keyword">if</span>(a[j]&gt;a[j+<span class="hljs-number">1</span>]) <span class="hljs-comment">//按照升序排，当前数大于后面的一个数，则交换</span><br>&#123;<br>temp = a[j];<br>a[j] = a[j+<span class="hljs-number">1</span>];<br>a[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>原理和冒泡排序差不多，需要比较i轮</p><p>选择排序（Selection sort）是一种简单直观的<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5399605">排序算法</a>。它的工作原理是：第一次从待排序的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313">数据元素</a>中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择<a href="https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F/1066239">排序</a>是不稳定的排序方法。</p><p><img src="https://ae01.alicdn.com/kf/Ufe6bada7237c40fb9e36c7c44215b586i.jpg"><br>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,j,k; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++) <span class="hljs-comment">//需要多少趟 </span><br>&#123;<br>k = i;<br><span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;n;j++) <span class="hljs-comment">//每一趟比较多少次，这样循环结束后可以得到未排序的最小值的下标 </span><br>&#123;<br><span class="hljs-keyword">if</span>(a[j]&lt;a[k]) <span class="hljs-comment">// 如果a[j]&lt;a[k]</span><br>k = j;<span class="hljs-comment">//让下标k等于j</span><br>&#125; <br><span class="hljs-keyword">if</span>(k!=i)<br>&#123;<br><span class="hljs-keyword">int</span> temp = a[i];<br>a[i] = a[k];<br>a[k] = temp;<br>&#125; <br>&#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快排的基本思想：</p><blockquote><p>1、先从队列中取出一个数作为基准数</p><p>2、分区过程，将比基准数大的数放在右边，比基准数小的放在左边</p><p>3、重复1，2步，直到各个区间只有一个数(递归实现)</p></blockquote><p>在这里举个例子</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>72</td><td>6</td><td>57</td><td>88</td><td>60</td><td>42</td><td>83</td><td>73</td><td>48</td><td>85</td></tr></tbody></table><p>我们选择最左边的数72作为基准值</p><p>从右往左扫描，发现48小于基准值72，让a[0] = 72 这是需要一个数填充a[8]</p><p>从左往右扫描，发现88大于基准值，所以让a[8] = 88</p><p>这是从右往左扫，发现55小于基准值，所以让a[3] = 55</p><p>直到i==j，结束扫描</p><p>这是结果为</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>48</td><td>6</td><td>57</td><td>42</td><td>60</td><td>72</td><td>83</td><td>73</td><td>88</td><td>85</td></tr></tbody></table><p>再我们递归调用这个函数，分别对小于基准值的一边和大于基准值的一边进行排序，直到递归结束，我们就可以得到最终的结果</p><p>快速排序的时间复杂度更低，平均为Nlog<code>2</code>N,最坏为n平方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*@author:2460417845@qq.com bobo*/</span><br><span class="hljs-comment">/* Date: Create in 2021-03-10 18:04:37*/</span><br><span class="hljs-comment">/*description:快速排序*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> base = arr[left]; <span class="hljs-comment">//基准值</span><br>    <span class="hljs-keyword">int</span> i = left; <span class="hljs-comment">//保存左下标</span><br>    <span class="hljs-keyword">int</span> j = right;<span class="hljs-comment">//保存右下标</span><br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= base) <span class="hljs-comment">//知道找到小于基准值的那个数</span><br>            j--;<br>        <span class="hljs-keyword">if</span> (i &lt; j)<br>            arr[i++] = arr[j]; <span class="hljs-comment">// 保存那个数</span><br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; base) <span class="hljs-comment">//找到大于基准值的那个数</span><br>            i++;<br>        <span class="hljs-keyword">if</span> (i &lt; j)  <span class="hljs-comment">//用刚才空的那个位置保存这个数</span><br>        &#123;<br>            arr[j--] = arr[i];<br>        &#125;<br>        arr[i] = base; <span class="hljs-comment">//结束循环的那个位置就是基准值应该存放的位置</span><br>        quickSort(arr, left, i - <span class="hljs-number">1</span>); <span class="hljs-comment">//同样排序基准值左边的数</span><br>        quickSort(arr, i + <span class="hljs-number">1</span>, right);<span class="hljs-comment">//同样排序基准值右边的数</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">84</span>, <span class="hljs-number">2</span>&#125;;<br>    quickSort(a, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><img src="https://ae01.alicdn.com/kf/U82d1aebdae9e4a1982525980a97561302.jpg"></p><p>插入排序可以看成是一个斗地主拿牌的过程，先手里有一张牌，拿到的第二张牌如果小于第一章牌则将其放在第一张牌前面，</p><p>再拿第三张牌，将其插入到大小合适的位置</p><p>由于数据的插入比较麻烦，每次重新插入一张牌到合适位置，都要向后移动要插入位置后面的元素，这个选择一种直接依次交换的方式，可以看动图</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*@author:2460417845@qq.com bobo*/</span><br><span class="hljs-comment">/* Date: Create in 2021-03-10 18:40:32*/</span><br><span class="hljs-comment">/*description:*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n ; i++) <span class="hljs-comment">//外层是需要比较的轮次</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = i; j &gt; <span class="hljs-number">0</span>; j--) <span class="hljs-comment">// 从下标为i的数依次与前面进行比较，选择一个合适的位置插入</span><br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j<span class="hljs-number">-1</span>]) <span class="hljs-comment">//应该下标为j前面的数都是排好序了的，如果比较到它不满足这个if判断，直接break结束就好</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> temp;<br>                temp = arr[j];<br>                arr[j] = arr[j<span class="hljs-number">-1</span>];<br>                arr[j<span class="hljs-number">-1</span>] = temp;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>&#125;;<br>    insertSort(a,<span class="hljs-number">7</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端常见面试题总结(持续更新)</title>
    <link href="/2021/03/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h2><h3 id="doctype的作用？"><a href="#doctype的作用？" class="headerlink" title="doctype的作用？"></a>doctype的作用？</h3><p>DOCTYPE是html5标准网页声明，且必须声明在HTML文档的第一行。用来告知浏览器用什么文档标准解析这个文档。</p><p>文档解析类型</p><ul><li>BackCompat：怪异模式，当没有声明DOCTYPE时就是这一模式</li><li>CSS1Compat：标准模式，浏览器使用W3C的标准解析渲染页面</li></ul><blockquote><p>IE8有一种近乎标准模式，基本被淘汰了</p></blockquote><p> 三种模式的区别</p><ul><li>标准模式：页面按照HTML与CSS的定义渲染</li><li>怪异模式：会模拟更旧的浏览器行为</li></ul><h3 id="对HTML语义化的理解？"><a href="#对HTML语义化的理解？" class="headerlink" title="对HTML语义化的理解？"></a>对HTML语义化的理解？</h3><p>元素本身传达了关于标签所包含内容类型的一些信息。看到该标签就知道是什么意思,例如<code>&lt;p&gt;</code>标签就代表段落，<code>&lt;article&gt;</code>代表正文等</p><p>HTML5提供了新的语义元素来定义网页的不同部分例如<code>&lt;header&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;section&gt;</code>、<code>aside</code>、<code>&lt;footer&gt;</code></p><h3 id="HTML5的特性"><a href="#HTML5的特性" class="headerlink" title="HTML5的特性"></a>HTML5的特性</h3><ul><li>文档类型声明为<code>&lt;!DOCTYPE HTML&gt;</code></li><li>标签语义化</li><li>支持对音视频的处理，不再使用flash</li><li>canvas/webGL画图</li><li>webSocket通信</li><li>history API</li><li>地理位置</li></ul><h3 id="src和href的区别"><a href="#src和href的区别" class="headerlink" title="src和href的区别"></a>src和href的区别</h3><ul><li>href：超文本引用，它指向一些网络资源，建立和当前元素或者说是本文档的链接关系。加载它的时候，不会停止对当前文档的处理，浏览器会继续往下走。</li></ul><p>例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;common.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上面所显示的，当浏览器加载到link标签时，会识别这是css文档，并行下载该CSS文档，但不会停止对当前页面后续内容的记载</p><ul><li>src表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。由浏览器在解析src时会停下对后续文档的处理，知道src内容加载完毕,常用在script、img、iframe标签中，建议js文件放在HTML文档的最后面。</li></ul><p>总结：href用于建立页面与引用资源之间的关系，而src会替换当前标签。遇到href,页面会并行加载后续内容;而遇到src浏览器会加载src中内容完毕后才继续往下</p><h3 id="script标签中defer和async的区别"><a href="#script标签中defer和async的区别" class="headerlink" title="script标签中defer和async的区别"></a>script标签中defer和async的区别</h3><ul><li>defer：浏览器指示脚本在文档被解析后执行，script被异步记载后并不会立即执行，而是等待文档被解析完毕后执行</li><li>async：同样是异步加载脚本，区别是脚本加载完毕后立即执行</li></ul><p>上图绿色线代表HTML解析，蓝色线代表<code>&lt;script&gt;</code>加载，而红色线代表<code>&lt;script&gt;</code>执行</p><p>由上图可见<code>&lt;script&gt;</code>标签默认是同步加载的，而defer和async是异步加载，而defer是文档加载完毕后script执行，async是·<code>&lt;script&gt;</code>加载完毕后立即执行</p><h3 id="前端存储方式"><a href="#前端存储方式" class="headerlink" title="前端存储方式"></a>前端存储方式</h3><p>主要是loaclStorage,cookies,sessionStorage、web SQL、indexedDB</p><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>cookie是HTML5前的本地存储方式，兼容性好</p><blockquote><p>特点：</p><p>1、在请求服务器时，浏览器将cookie信息放在请求头中</p><p>2、在响应时，浏览器保存响应头中的Cookie信息</p><p>3、存储大小只有4kb</p><p>4、存储数量有限，一个domain最多20条</p><p>5、不安全，因为在请求头响应头中携带cookie信息</p></blockquote><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><blockquote><p>特点：</p><p>1、声明周期为永久性的，关闭浏览器也不会销毁，除非主动销毁</p><p>2、存储大小更大，一般为5M</p><p>3、以键值对方式存储</p><p>4、只能在同源下访问</p></blockquote><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h4><p>使用方式和localStorage大致相同</p><blockquote><p>特点:</p><p>这里主要说下和localStorage的不同</p><p>1、只能在同一窗口访问</p><p>2、关闭浏览器自动销毁</p></blockquote><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h3 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h3><h4 id="标准盒子模型"><a href="#标准盒子模型" class="headerlink" title="标准盒子模型"></a>标准盒子模型</h4><p>box-sizing:content-box</p><p><img src="https://ae01.alicdn.com/kf/U83afe781c7e748cc8b664200e99fe14aC.jpg"></p><p>从上图可以看到标准 <strong><em>*</em>*W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。*\</strong>***</p><p>即指定元素的宽和高并不包括border和padding</p><blockquote><p>元素所占据的宽度 = margin-left+border-left+padding-left+width+padding-right+border-right+margin-right</p></blockquote><h4 id="怪异盒子模型-IE盒子模型"><a href="#怪异盒子模型-IE盒子模型" class="headerlink" title="怪异盒子模型(IE盒子模型)"></a>怪异盒子模型(IE盒子模型)</h4><p>box:sizing:border-box</p><p><img src="https://ae01.alicdn.com/kf/U8055704f951c49b09810817feac6de59d.jpg"></p><p>　<strong>从上图可以看到 IE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 pading。</strong></p><p>这里指定元素的宽和高则包括border的padding</p><blockquote><p>元素所占据的宽度  =margin-left+width+margin-right</p></blockquote><h3 id="CSS选择器及其优先级"><a href="#CSS选择器及其优先级" class="headerlink" title="CSS选择器及其优先级"></a>CSS选择器及其优先级</h3><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><p>详情看博客  <a href="https://blog.csdn.net/DYD850804/article/details/80997251?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;dist_request_id=cda5ce45-09c2-4559-8cde-80544da3956d&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control">https://blog.csdn.net/DYD850804/article/details/80997251?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;dist_request_id=cda5ce45-09c2-4559-8cde-80544da3956d&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control</a> 大佬写得真的好</p><ul><li><p>标签选择器，例如 p body h1等</p><p>选择的是页面上所有这种类型的标签，经常描述的是“共性”</p><p>例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>ID选择器#</p><p>针对某一个特定的标签来使用，只能使用一次。css中的ID选择器以”#”来定义。</p></li><li><p>类选择器.</p><p>类选择器可以被多个标签使用，同一个标签可以使用多个类选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classone  classtwo&quot;</span>&gt;</span>我是一个h3啊<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>通配符*</p></li></ul><p>通配符即匹配任何标签例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">*<span class="hljs-comment">/*定义通用选择器*，希望所有标签的上边距和左边距都为0*/</span>&#123;<br>    <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">0px</span>;<br><br></code></pre></td></tr></table></figure><p>一帮情况下，尽量使用class,id js用。类上样式，id上行为</p><h4 id="高级选择器"><a href="#高级选择器" class="headerlink" title="高级选择器"></a>高级选择器</h4><ul><li><p>后代选择器 空格隔开</p><p>这里强调一下：这两个标签不一定是连续紧挨着的，只要保持一个后代的关联即可。也就是说，选择的是后代，不一定是儿子。</p></li><li><p>交集选择器 .隔开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.special</span>&#123; <span class="hljs-comment">/*注意这里没有空格*/</span><br>    <span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><p>选择的元素要求同时满足两个条件：必须是h3标签，然后必须是special标签。</p></li><li><p>并集选择器 逗号隔开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>,<span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-id">#mytitle</span>,<span class="hljs-selector-class">.one</span><span class="hljs-comment">/*定义了一个并集选择器，带有p,h1,id=&quot;mytitle&quot;,class=&quot;one&quot;的标签都内容会显示红色*/</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li>伪类选择器</li></ul><p>对于<code>&lt;a&gt;</code>标签，其对应几种不同的状态：</p><ul><li><code>link</code>：超链接点击之前</li><li><code>visited</code>：超链接点击之后</li><li><code>focus</code>：是某个标签获得焦点的时候（比如某个输入框获得焦点）</li><li><code>hover</code>：鼠标放到某个标签上的时候</li><li><code>active</code>：点击某个标签没有松鼠标时</li></ul><p>CSS允许对于元素的不同状态，定义不同的样式信息。伪类选择器又分为两种：</p><ul><li>静态伪类：只能用于超链接</li><li>动态伪类：针对所有标签都适用</li></ul><p>下面来分别讲一下这两种伪类选择器。</p><p><strong>静态伪类：</strong></p><p>用于以下两个状态（*<strong>*只能使用于超链接**</strong>）：</p><ul><li><code>link</code>：超链接点击之前</li><li><code>visited</code>：超链接点击之后</li></ul><p><strong>（2）动态伪类:</strong></p><p>用于以下几种状态（适用于所有的标签）：</p><ul><li><code>focus（聚焦，点击某个文本框后输入文字，可以定义文本框和文字的属性）</code>：是某个标签获得焦点的时候（比如某个输入框获得焦点）</li><li><code>hover（盘旋，鼠标停留在上面）</code>：鼠标放到某个标签上的时候</li><li><code>active（长按状态）</code>：点击某个标签没有松鼠标时</li></ul><p>举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style type=&quot;text/css&quot;&gt;<br>        <span class="hljs-comment">/* 伪类选择器：动态伪类*/</span><br>        <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span><br><br>        <span class="hljs-comment">/*让input文本框获取焦点时：边框：#FF6F3D这种橙色；文字：绿色；背景色：#6a6a6a这种灰色*/</span><br>            &#123;<br>            <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#FF6F3D</span>;<br>            <span class="hljs-attribute">color</span>: white;<br>            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#6a6a6a</span>;<br>        &#125;<br><br>        <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:hover</span><br><br>        <span class="hljs-comment">/*鼠标放在label标签上时显示蓝色*/</span><br>            &#123;<br>            <span class="hljs-attribute">color</span>: blue;<br>        &#125;<br><br>        <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:active</span><br><br>        <span class="hljs-comment">/*点击label标签鼠标没有松开时显示红色*/</span><br>            &#123;<br>            <span class="hljs-attribute">color</span>: red;<br>        &#125;<br>    &lt;/<span class="hljs-selector-tag">style</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><p>div的儿子p。和div的后代p的截然不同。</p><h4 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span>+<span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><p>上方的选择器意思是：选择的是h3元素后面紧挨着的第一个兄弟。</p><h4 id="序选择器"><a href="#序选择器" class="headerlink" title="序选择器"></a>序选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first-child</span>&#123;<br><span class="hljs-attribute">color</span>:red;<br>&#125;<br><span class="hljs-comment">/*设置无序列表&lt;ul&gt;中的最后一个&lt;li&gt;为红色：*/</span><br></code></pre></td></tr></table></figure><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>!important&gt;行内样式&gt;ID选择器&gt;类选择器&gt;标签&gt;通配符&gt;继承&gt;浏览器默认</p><ul><li>内联样式表的权值为 1000</li><li>ID 选择器的权值为 100</li><li>Class 类选择器的权值为 10</li><li>HTML 标签选择器的权值为 1</li></ul><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.test</span>&#123;</span><br><span class="css">            <span class="hljs-selector-tag">background-COLOR</span>:<span class="hljs-selector-id">#a00</span>;</span><br><span class="css">            <span class="hljs-selector-tag">width</span><span class="hljs-selector-pseudo">:100px</span>;</span><br>            height: 100px;<br>        &#125;<br><br><span class="css">        <span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.test2</span>&#123;</span><br><span class="css">            <span class="hljs-selector-tag">background-COLOR</span>:<span class="hljs-selector-id">#0e0</span>;</span><br><span class="css">            <span class="hljs-selector-tag">width</span><span class="hljs-selector-pseudo">:100px</span>;</span><br>            height: 100px;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test test2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 我们可以把选择器中规则对应做加法，比较权值，如果权值相同那就后面的覆盖前面的了，div.class的权值是1+10=11，而.test1 .test2的权值是10+10=20，所以div会应用.test1 .test2变成绿色</p><p>　①、!important的优先级是最高的，但出现冲突时则需比较”四位数“;</p><p>　②、优先级相同时，则采用就近原则，选择最后出现的样式;</p><p>　③、继承得来的属性，其优先级最低;</p><p>原博客链接 <a href="https://www.cnblogs.com/zxjwlh/p/6213239.html">https://www.cnblogs.com/zxjwlh/p/6213239.html</a></p><h3 id="水平垂直居中的集中实现方式"><a href="#水平垂直居中的集中实现方式" class="headerlink" title="水平垂直居中的集中实现方式"></a>水平垂直居中的集中实现方式</h3><ul><li>三种定位</li></ul><ul><li><p>绝对定位+margin负边距</p><p>必须要知道具体的宽和高</p><p><img src="https://img-blog.csdnimg.cn/2019100300223157.png" alt="图示"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">给元素设置定位<span class="hljs-selector-tag">absolute</span>，父元素设置定位<span class="hljs-selector-tag">absolute</span>或<span class="hljs-selector-tag">relative</span>，参考绝对定位原理，绝对定位是相对最近一个设置定位属性(非<span class="hljs-selector-tag">static</span>)的父级元素的，给元素设置<span class="hljs-selector-tag">left</span>: 50%, <span class="hljs-selector-tag">right</span>: 50% 后，元素现在的位置如上图所示，现在元素的位置稍微偏离正中心，容易发现距离上边界、左边界是元素自身高度的一半，使用负边界可以使元素往左上角移动。<br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>绝对定位+margin:auto</p><p>这种方案元素必须要有宽和高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><pre><code>- 绝对定位 + transform  存在兼容性问题，但是不需要给元素指定宽和高  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">.box &#123;<br>  position: relative;<br>&#125;<br>.item &#123;<br>  position: absolute;<br>  left: <span class="hljs-number">50</span>%;<br>  top: <span class="hljs-number">50</span>%;<br>  transform: translate(-<span class="hljs-number">50</span>%, -<span class="hljs-number">50</span>%);<br>&#125;<br><br></code></pre></td></tr></table></figure>  对于行内元素，通过给父级元素设定text-align属性为center。</code></pre><ul><li><p>display:flex</p><p>让其父容器实现flex布局</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex; <br>    <span class="hljs-attribute">justify-content</span>:center; <br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>JavaScript</p><p>1）获取到当前屏幕的高度；</p><p>2）获取到需要居中的div的高度；</p><p>3）用屏幕的高度减去div的高度除以2就是需要给div设计的margin-top/padding-top的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>id=<span class="hljs-string">&quot;box&quot;</span>&gt;&lt;div&gt;<br><span class="hljs-keyword">let</span> HTML = <span class="hljs-built_in">document</span>.documentElement,<br>    winW = HTML.clientWidth,<br>    winH = HTML.clientHeight,<br>    boxW = box.offsetWidth,<br>    boxH = box.offsetHeight<br>box.style.position = <span class="hljs-string">&quot;absolute&quot;</span>;<br>box.style.left = (winW-boxW)/<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>box.style.top = (winH-boxH)/<span class="hljs-number">2</span> + <span class="hljs-string">&#x27;px&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="相对定位与绝对定位"><a href="#相对定位与绝对定位" class="headerlink" title="相对定位与绝对定位"></a>相对定位与绝对定位</h3><p><strong>relative</strong>：定位是相对于自身位置定位（设置偏移量的时候，会相对于自身所在的位置偏移）。设置了 relative 的元素仍然处在文档流中，元素的宽高不变，设置偏移量也不会影响其他元素的位置。最外层容器设置为 relative 定位，在没有设置宽度的情况下，宽度是整个浏览器的宽度。</p><p><strong>absolute</strong>：定位是相对于离元素最近的设置了绝对或相对定位的父元素决定的，如果没有父元素设置绝对或相对定位，则元素相对于根元素即 html 元素定位。设置了 absolute 的元素脱了了文档流，元素在没有设置宽度的情况下，宽度由元素里面的内容决定。脱离后原来的位置相当于是空的，下面的元素会来占据位置。</p><p>总结：即相对定位是相对于自身的位置进行定位，而绝对定位是相对于最近的设置了绝对或相对定位的父级元素进行定位</p><p>补充</p><blockquote><p>static: 正常⽂档流定位，此时 top, right, bottom, left 和 z-index 属性⽆效，块级元素从上往下纵向排布，⾏级元素<br>从左向右排列。</p></blockquote><h3 id="隐藏元素的方式"><a href="#隐藏元素的方式" class="headerlink" title="隐藏元素的方式"></a>隐藏元素的方式</h3><ul><li><p><code>opacity：0</code> 将元素的透明度设为0，就看起来隐藏了，但可以进行交互</p></li><li><p><code>visibility:false</code> 依然占据空间，但不能进行数据交互</p></li><li><p><code>overflow:hidden</code>:只隐藏元素的溢出部分</p><p>补充：overflow:hidden的几个作用</p><blockquote><p>1、溢出隐藏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123; <br> <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br> <span class="hljs-attribute">background</span>: skyblue;<br> <span class="hljs-attribute">overflow</span>: hidden;      <span class="hljs-comment">/*溢出隐藏*/</span><br> <span class="hljs-attribute">white-space</span>: nowrap;<span class="hljs-comment">/*规定文本不进行换行*/</span><br> <span class="hljs-attribute">text-overflow</span>: ellipsis;<span class="hljs-comment">/*当对象内文本溢出时显示省略标记（...）*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：</p></blockquote><blockquote><p>2、清除浮动</p><p>，父级元素不设置高度时，高度由随内容增加自适应高度。当父级元素内部的子元素全部都设置浮动float之后，子元素会脱离标准流，不占位，父级元素检测不到子元素的高度，父级元素高度为0。那么问题来了，如下：</p></blockquote><blockquote><p>如上，由于父级元素没有高度，下面的元素会顶上去，造成页面的塌陷。因此，需要给父级加个overflow:hidden属性，这样父级的高度就随子级容器及子级内容的高度而自适应。如下：</p></blockquote><blockquote><p>3、解决外边距塌陷</p><p>父级元素内部有子元素，如果给子元素添加margin-top样式，那么父级元素也会跟着下来，造成外边距塌陷，如下：</p></blockquote><blockquote><p>因此，给父级元素添加overflow:hidden，就可以解决这个问题了。</p></blockquote></li></ul><ul><li><p>display:none：这个是彻底隐藏了元素，元素从文档流中消失，同时不占据空间</p></li><li><p>z-index:-9999 : 原理是将层级放到底部，这样就被覆盖了，看起来隐藏了</p></li></ul><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><h4 id="块状元素"><a href="#块状元素" class="headerlink" title="块状元素"></a>块状元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>...<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>特点：</p><ul><li>总是从新行开始</li><li>高度、行高、外边距以及内边距可以控制</li><li>宽度默认是容器的100%</li><li>可以容纳行内（内联）元素和其他块元素</li></ul><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span> 链接<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>把文本定义为强调的内容<br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>吧文本定义为语气更强的强调内容<br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>引用<br><span class="hljs-tag">&lt;<span class="hljs-name">var</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>计算机文本代码<br></code></pre></td></tr></table></figure><ul><li>和相邻内元素在一行上</li><li>不能设置高度和宽度，但在水平方向可以设置padding和margin，垂直方向无法设置</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或者其他行内元素，a特殊</li></ul><h4 id="行内块状"><a href="#行内块状" class="headerlink" title="行内块状"></a>行内块状</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;img&gt;</span><br><span class="hljs-section">&lt;input&gt;</span><br><span class="hljs-section">&lt;td&gt;</span><br></code></pre></td></tr></table></figure><p>特点</p><ul><li>和相邻行内元素(行内块)在同一行上，但是之间会有空白缝隙</li><li>默认宽度就是它本身内容的宽度</li><li>高度、行高、外边距、内边距可以控制</li></ul><h4 id="块级元素和行内元素的区别"><a href="#块级元素和行内元素的区别" class="headerlink" title="块级元素和行内元素的区别"></a>块级元素和行内元素的区别</h4><ul><li>一个块级元素独占一行，而行内元素与其他行内元素并排</li><li>块级元素可以设置宽度和高度，而行内元素不可以</li><li>块级元素的长度和宽度默认是父级容器的100%，而行内元素的宽度是内容的宽度</li></ul><h4 id="如何转换"><a href="#如何转换" class="headerlink" title="如何转换"></a>如何转换</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">dispaly</span><span class="hljs-selector-pseudo">:inline</span>; <span class="hljs-comment">/*转换成行内元素*/</span><br><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:block</span>; <span class="hljs-comment">/*转换成块级元素*/</span><br><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:inline-block</span>;<span class="hljs-comment">/*转换成行内块状元素*/</span><br></code></pre></td></tr></table></figure><h4 id="display出了这几个值还有哪些"><a href="#display出了这几个值还有哪些" class="headerlink" title="display出了这几个值还有哪些"></a>display出了这几个值还有哪些</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:none</span>;<br><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:flex</span>;<span class="hljs-comment">/*响应式布局*/</span><br></code></pre></td></tr></table></figure><h4 id="试说明z-index的工作原理"><a href="#试说明z-index的工作原理" class="headerlink" title="试说明z-index的工作原理"></a>试说明z-index的工作原理</h4><ul><li><p>文档流</p><p>值越大表明距离用户越近</p><p><img src="https://ae01.alicdn.com/kf/U83afe781c7e748cc8b664200e99fe14aC.jpg"></p></li><li><p>定位</p><p>z-index只对定位元素有作用</p><p><img src="https://ae01.alicdn.com/kf/U8055704f951c49b09810817feac6de59d.jpg"></p></li></ul><h3 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h3><ul><li>空div⽅法： <code>&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;</code></li><li>Clearfix ⽅法：上⽂使⽤.clearfix类已经提到</li><li>overflow: auto或overflow: hidden⽅法，使⽤BFC</li></ul><h3 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h3><h3 id="em-px-rem区别"><a href="#em-px-rem区别" class="headerlink" title="em/px/rem区别"></a>em/px/rem区别</h3><ul><li>px：绝对当为，页面按照像素进行展示</li><li>em：相对单位 基准点为父节点字体的大小</li><li>rem：相对当为 基准点为根节点html字体的大小</li></ul><h3 id="link和-import的区别"><a href="#link和-import的区别" class="headerlink" title="link和@import的区别"></a>link和@import的区别</h3><ul><li>link属于XHTML标签，而@import是CSS提供的</li><li>页面被加载时，link会同时被加载，而@import应用的CSS会等到页面被加载完毕再加载</li><li>link的权重高于@import</li><li>link标签的样式可以DOM操作改变 而@import不可以</li></ul><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="JS的变量提升"><a href="#JS的变量提升" class="headerlink" title="JS的变量提升"></a>JS的变量提升</h3><p>js运行时先解析代码，获取所有被声明的变量，然后再一行一行运行。将所有变量的声明语句提升到代码的头部。（var变量）或函数声明(function(){ })</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>b(); <span class="hljs-comment">//1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a)<br>&#125;<br></code></pre></td></tr></table></figure><p>将变量的声明提到最前面，所以执行顺序应该是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br><span class="hljs-built_in">console</span>.log(a);<br>a = <span class="hljs-number">1</span>;<br>b();<br></code></pre></td></tr></table></figure><p>当一个变量声明但没有赋值，这个变量就是undefined，如果一个变量没有声明，则会报错</p><blockquote><p>注意：let 和const没有变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fn = <span class="hljs-number">123</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;456&#x27;</span>)<br>&#125;<br>fn();<br><span class="hljs-comment">//执行顺序为</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;456&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> fn;<br>fn = <span class="hljs-number">123</span>;<br>fn();<span class="hljs-comment">//报错 fn is not a function</span><br></code></pre></td></tr></table></figure><p>预解析时先解析函数fn，然后再解析变量fn，后面的变量fn会把前面的函数fn覆盖，所以最后执行fn()会报错</p></blockquote><h3 id="JS-执行机制"><a href="#JS-执行机制" class="headerlink" title="JS 执行机制"></a>JS 执行机制</h3><p>JS是单线程语言</p><p>JS的执行机制为Event Loop(事件循环)</p><p>JS的任务分为同步任务和异步任务，其中在主线程执行的任务为同步任务，被主线程挂载的任务为异步任务，后者一般放在一个任务队列中(Event Quene)，</p><p>且不同类型的异步任务（分为宏任务和微任务)</p><p>JS异步执行方式为</p><ul><li>所有的同步任务都在主线程执行，形成一个执行栈</li><li>主线程之外，还有一个“任务队列”，只要异步任务有了运行结果，就在“任务队列”之中放置一个事件</li><li>不同任务执行完毕后，系统会读取“任务队列”，看看里面有哪些事件。进入执行栈，开始执行异步任务</li><li>主线程不断重复上面的三步</li></ul><p>宏任务：整体代码script，setTimeOut 、setInterval</p><blockquote><p>setTimeOut和setInterval的区别</p><p>setTimeOut只执行一个，而setInterval为设置没间隔多久执行一次</p></blockquote><p>微任务：promise.then,process.nextTick(node)</p><p><img src="https://img-blog.csdnimg.cn/20190727201859866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pENzE3ODIyMDIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// timer1</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;<br>add();<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// timer2</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>&#125;,<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>)<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// timer3</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>)<br>  &#125;, <span class="hljs-number">100</span>)<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>    i == <span class="hljs-number">99</span> &amp;&amp; resolve()<br>  &#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// timer4</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>) <br>  &#125;, <span class="hljs-number">0</span>)<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>)<br><span class="hljs-comment">//最后的执行结果为 1 4 8 7 3 6 5 2</span><br></code></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包：一个函数和对其周围状态的引用捆绑在一起，这样的组合就是闭包，</p><p>利用闭包实现变量的私有化</p><p>为什么会形成闭包：程序在访问变量时，是向底层栈一个一个找，如果找到全局执行环境里都没有对应变量，则程序抛出undefined错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(b);<br>    &#125;<br>    fn1();<br>&#125;<br>fn();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">var</span> name =<span class="hljs-string">&#x27;bobo&#x27;</span>;<br>    <span class="hljs-built_in">this</span>.getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.setName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>        name = value;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> bobo = <span class="hljs-keyword">new</span> Person()<br><span class="hljs-built_in">console</span>.log(bobo.getName()); <span class="hljs-comment">//bobo</span><br>bobo.setName(<span class="hljs-string">&#x27;Yanbo&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(bobo.getName());<span class="hljs-comment">//Yanbo</span><br><span class="hljs-built_in">console</span>.log(name)<span class="hljs-comment">//name is undefinded</span><br></code></pre></td></tr></table></figure><p>JS闭包中的坑：</p><p>1、引用的变量可能发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> result = [];<br>      <span class="hljs-keyword">for</span> （<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>； i&lt;<span class="hljs-number">10</span>; i++）&#123;<br>        result.[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.info(i)<br>        &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-comment">//最后打印的结果并不是 1 2 3 ...10 而是10 10 10 ...10</span><br><span class="hljs-comment">//因为每个闭包函数访问变量i是outer执行环境下的变量i，随着循环的结束，i已经变成10了，所以执行每个闭包函数，结果打印10， 10， ..., 10</span><br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> result = [];<br>      <span class="hljs-keyword">for</span> （<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>； i&lt;<span class="hljs-number">10</span>; i++）&#123;<br>        result.[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   <span class="hljs-built_in">console</span>.info(num);    <span class="hljs-comment">// 此时访问的num，是上层函数执行环境的num，数组有10个函数对象，每个对象的执行环境下的number都不一样</span><br>             &#125;<br>        &#125;(i)<br>     &#125;<br>     <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>2、this的指向问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object = &#123;<br>     name: <span class="hljs-string">&#x27;&#x27;</span>object<span class="hljs-string">&quot;，</span><br><span class="hljs-string">     getName： function() &#123;</span><br><span class="hljs-string">        return function() &#123;</span><br><span class="hljs-string">             console.info(this.name)</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">object.getName()()    // underfined</span><br><span class="hljs-string">// 因为里面的闭包函数是在window作用域下执行的，也就是说，this指向windows</span><br></code></pre></td></tr></table></figure><p>3、内存泄漏问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">showId</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>)<br>    el.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      aler(el.id)   <span class="hljs-comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span><br>    &#125;<br>&#125;<br>j<br><span class="hljs-comment">// 改成下面</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">showId</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>)<br>    <span class="hljs-keyword">var</span> id  = el.id<br>    el.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(id)   <span class="hljs-comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span><br>    &#125;<br>    el = <span class="hljs-literal">null</span>    <span class="hljs-comment">// 主动释放el</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JS原型链"><a href="#JS原型链" class="headerlink" title="JS原型链"></a>JS原型链</h3><h4 id="构造函数与普通函数的区别"><a href="#构造函数与普通函数的区别" class="headerlink" title="构造函数与普通函数的区别"></a>构造函数与普通函数的区别</h4><p>构造函数与其他函数的唯一区别，就在于调用它们的方式不同。不过，构造函数毕竟也是函数，不存在定义构造函数的特殊语法。任何函数，只要通过 <code>new</code> 操作符来调用，那它就可以作为构造函数；而任何函数，如果不通过 <code>new</code> 操作符来调用，那它跟普通函数也不会有什么两样。例如，前面例子中定义的 <code>Person()</code> 函数可以通过下列任何一种方式来调用</p><p>通过构造函数创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br>person.name = <span class="hljs-string">&quot;kevin&quot;</span>;<br><span class="hljs-built_in">console</span>.log(person.name);<span class="hljs-comment">//kevin</span><br></code></pre></td></tr></table></figure><p>这里的Person()就是一个构造函数，通过new创建了一个实例对象</p><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><p>每个函数都有一个prototype属性</p><p>每一个JS属性都会在创建时关联另外一个对象，每一个对象都会从原型上继承属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <br>&#125;<br>Person.prototype.name = <span class="hljs-string">&#x27;bobo&#x27;</span><br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person.name);<span class="hljs-comment">//bobo</span><br></code></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/Ud6ca447ab0ad424fb51093b040b532ccs.jpg"></p><h4 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h4><p>每个对象都有一个proto属性，指向对象的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(person.__proto__ === Person.prototype) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="contructor"><a href="#contructor" class="headerlink" title="contructor"></a>contructor</h4><p>每一个原型都有一个constructor属性指向关联的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(Person === Person.prototype.constructor) <span class="hljs-comment">//true</span><br><span class="hljs-comment">//顺便学习一个ES5获取对象原型的方法</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(person)===Person.prototype)<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p><img src="https://ae01.alicdn.com/kf/U5fbc4c20bb1841638aeb74c96d568a38v.jpg"></p><p><code>console.log(Object.prototype.__proto__ === null) // true</code></p><h4 id="原型的动态性"><a href="#原型的动态性" class="headerlink" title="原型的动态性"></a>原型的动态性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> friend = <span class="hljs-keyword">new</span> Person();<br>Person.prototype.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hi&quot;</span>);<br>&#125;;<br>friend.sayHi();   <span class="hljs-comment">// &quot;hi&quot;（没有问题！）</span><br></code></pre></td></tr></table></figure><p>如果是重写整个原型对象，则会有问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br><span class="hljs-keyword">var</span> friend = <span class="hljs-keyword">new</span> Person();<br><br>Person.prototype = &#123;<br>    <span class="hljs-title">constructor</span>: <span class="hljs-title">Person</span>,<br>    <span class="hljs-title">name</span> : &quot;<span class="hljs-title">Stone</span>&quot;,<br>    <span class="hljs-title">age</span> : 28,<br>    <span class="hljs-title">job</span> : &quot;<span class="hljs-title">Software</span> <span class="hljs-title">Engineer</span>&quot;,<br>    <span class="hljs-title">sayName</span> : <span class="hljs-title">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;;<br><br>friend.sayName();   <span class="hljs-comment">// Uncaught TypeError: friend.sayName is not a function</span><br></code></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br>Person.prototype = &#123;<br>    <span class="hljs-title">constructor</span>: <span class="hljs-title">Person</span>,<br>    <span class="hljs-title">name</span> : &quot;<span class="hljs-title">Stone</span>&quot;,<br>    <span class="hljs-title">age</span> : 28,<br>    <span class="hljs-title">job</span> : &quot;<span class="hljs-title">Software</span> <span class="hljs-title">Engineer</span>&quot;,<br>    <span class="hljs-title">friends</span> : [&quot;<span class="hljs-title">ZhangSan</span>&quot;, &quot;<span class="hljs-title">LiSi</span>&quot;],<br>    <span class="hljs-title">sayName</span> : <span class="hljs-title">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person();<br><br>person1.friends.push(<span class="hljs-string">&quot;WangWu&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(person1.friends);    <span class="hljs-comment">// &quot;ZhangSan,LiSi,WangWu&quot;</span><br><span class="hljs-built_in">console</span>.log(person2.friends);    <span class="hljs-comment">// &quot;ZhangSan,LiSi,WangWu&quot;</span><br><span class="hljs-built_in">console</span>.log(person1.friends === person2.friends);  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>当在原型中添加引用类型值时，所有对象共享这个引用类型值</p><p>解决方法：构造函数与原型结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, job</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.job = job;<br>    <span class="hljs-built_in">this</span>.friends = [<span class="hljs-string">&quot;ZhangSan&quot;</span>, <span class="hljs-string">&quot;LiSi&quot;</span>];<br>&#125;<br><br>Person.prototype = &#123;<br>    <span class="hljs-title">constructor</span> : <span class="hljs-title">Person</span>,<br>    <span class="hljs-title">sayName</span> : <span class="hljs-title">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Stone&quot;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&quot;Software Engineer&quot;</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Sophie&quot;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&quot;English Teacher&quot;</span>);<br><br>person1.friends.push(<span class="hljs-string">&quot;WangWu&quot;</span>);<br><span class="hljs-built_in">console</span>.log(person1.friends);    <span class="hljs-comment">// &quot;ZhangSan,LiSi,WangWu&quot;</span><br><span class="hljs-built_in">console</span>.log(person2.friends);    <span class="hljs-comment">// &quot;ZhangSan,LiSi&quot;</span><br><span class="hljs-built_in">console</span>.log(person1.friends === person2.friends);    <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(person1.sayName === person2.sayName);    <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h3><p>基本数据类型，<code>Number</code>,<code>String</code>,<code>Boolean</code>,<code>undeined</code>,<code>null</code>,</p><p>引用数据类型：Object，包括(Function,Array,Date)</p><p>ES6新增的Symbol数据类型</p><p>NaN是Number中的特殊值</p><h4 id="null与undefined的区别"><a href="#null与undefined的区别" class="headerlink" title="null与undefined的区别"></a>null与undefined的区别</h4><p>null表示为空，代表此处不应该有值的存在，⼀个对象可以是null，代表是个空对象，⽽null本身也是对象</p><p>undefined表示没有定义，在使用var 声明变量但未对其加初始化时，这个变量就是undefined。</p><h3 id="JS-call-和apply"><a href="#JS-call-和apply" class="headerlink" title="JS call()和apply()"></a>JS call()和apply()</h3><p><code>call()</code>和<code>apply()</code>用来重新定义函数的执行环境，也就是改变this指向，</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>用一个给定的this值和单独给出的一个或多个参数来调用一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Product</span>(<span class="hljs-params">name, price</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.price = price;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Food</span>(<span class="hljs-params">name, price</span>) </span>&#123;<br>  Product.call(<span class="hljs-built_in">this</span>, name, price);<br>  <span class="hljs-built_in">this</span>.category = <span class="hljs-string">&#x27;food&#x27;</span>;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Food(<span class="hljs-string">&#x27;cheese&#x27;</span>, <span class="hljs-number">5</span>).name);<br><span class="hljs-comment">// expected output: &quot;cheese&quot;</span><br><br></code></pre></td></tr></table></figure><p>这里Product函数本来是在全局作用域下的，在全局作用域下指向应该指向window，我们通过call方法，让Product的this指向，在new 创建一个新的对象时，this会指向这个新的对象，</p><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p>apply和call方法类似，call()函数接收的是参数列表，而aplly()接收的是一个参数数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];<br><br><span class="hljs-keyword">const</span> max = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-literal">null</span>, numbers);<br><br><span class="hljs-built_in">console</span>.log(max);<br><span class="hljs-comment">// expected output: 7</span><br><br><span class="hljs-keyword">const</span> min = <span class="hljs-built_in">Math</span>.min.apply(<span class="hljs-literal">null</span>, numbers);<br><br><span class="hljs-built_in">console</span>.log(min);<br><span class="hljs-comment">// expected output: 2</span><br><br></code></pre></td></tr></table></figure><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h3><p>this的指向在函数定义时不能确定，在函数执行时才能确定this的指向问题</p><ul><li><p>默认情况下，this指向window(默认绑定)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">name = <span class="hljs-string">&quot;Bale&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;;<br>sayName(); <span class="hljs-comment">//&quot;Bale&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>隐式绑定</p><p>如果函数被调⽤的位置存在上下⽂对象时，那么函数是被隐式绑定的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log( <span class="hljs-built_in">this</span>.name );<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>name: <span class="hljs-string">&quot;Messi&quot;</span>,<br>f: f<br>&#125;;<br>obj.f(); <span class="hljs-comment">//被调⽤的位置恰好被对象obj拥有，因此结果是Messi</span><br></code></pre></td></tr></table></figure><ul><li>显式绑定</li></ul><p>即通过call，apply，bind</p></li></ul><ul><li><p>new调用构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">console</span>.log(name);<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Messi&#x27;</span>); <span class="hljs-comment">//Messi</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="JS参数传递"><a href="#JS参数传递" class="headerlink" title="JS参数传递"></a>JS参数传递</h3><h4 id="基本数据类型按值传递"><a href="#基本数据类型按值传递" class="headerlink" title="基本数据类型按值传递"></a>基本数据类型按值传递</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">x</span>) </span>&#123;<br>x = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(x);<br>&#125;<br>test(a); <span class="hljs-comment">// 10</span><br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h4 id="复杂数据类型按引用传递"><a href="#复杂数据类型按引用传递" class="headerlink" title="复杂数据类型按引用传递"></a>复杂数据类型按引用传递</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;<br>a: <span class="hljs-number">1</span>,<br>b: <span class="hljs-number">2</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">x</span>) </span>&#123;<br>x.a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(x);<br>&#125;<br>test(a); <span class="hljs-comment">// &#123; a: 10, b: 2 &#125;</span><br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// &#123; a: 10, b: 2 &#125;</span><br></code></pre></td></tr></table></figure><p>函数的实参和形参公用一个堆内存</p><p>如何解决？</p><p>先将该引用类型值深克隆一份</p><h3 id="async、await"><a href="#async、await" class="headerlink" title="async、await"></a>async、await</h3><p>async/await是基于promise实现的，就是通过看起来是同步的方式实现异步的代码</p><p>async函数返回的时一个Promise对象，并且是隐式返回的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 传入参数 n，表示这个函数执行的时间（毫秒）</span><br><span class="hljs-comment"> * 执行的结果是 n + 200，这个值将用于下一步骤</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">takeLongTime</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> resolve(n + <span class="hljs-number">200</span>), n);<br>    &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step1</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step1 with <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step2</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step2 with <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step3</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`step3 with <span class="hljs-subst">$&#123;n&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> takeLongTime(n);<br>&#125;<br></code></pre></td></tr></table></figure><p>基于promise.then实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doIt</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;doIt&quot;</span>);<br>    <span class="hljs-keyword">const</span> time1 = <span class="hljs-number">300</span>;<br>    step1(time1)<br>        .then(<span class="hljs-function"><span class="hljs-params">time2</span> =&gt;</span> step2(time2))<br>        .then(<span class="hljs-function"><span class="hljs-params">time3</span> =&gt;</span> step3(time3))<br>        .then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`result is <span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>            <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;doIt&quot;</span>);<br>        &#125;);<br>&#125;<br><br>doIt();<br><br><span class="hljs-comment">// c:\var\test&gt;node --harmony_async_await .</span><br><span class="hljs-comment">// step1 with 300</span><br><span class="hljs-comment">// step2 with 500</span><br><span class="hljs-comment">// step3 with 700</span><br><span class="hljs-comment">// result is 900</span><br><span class="hljs-comment">// doIt: 1507.251ms</span><br></code></pre></td></tr></table></figure><p>基于async、awaite实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doIt</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;doIt&quot;</span>);<br>    <span class="hljs-keyword">const</span> time1 = <span class="hljs-number">300</span>;<br>    <span class="hljs-keyword">const</span> time2 = <span class="hljs-keyword">await</span> step1(time1);<br>    <span class="hljs-keyword">const</span> time3 = <span class="hljs-keyword">await</span> step2(time2);<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> step3(time3);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`result is <span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;doIt&quot;</span>);<br>&#125;<br><br>doIt();<br></code></pre></td></tr></table></figure><h3 id="解析字符串和字符串强制类型转换的区别"><a href="#解析字符串和字符串强制类型转换的区别" class="headerlink" title="解析字符串和字符串强制类型转换的区别"></a>解析字符串和字符串强制类型转换的区别</h3><h4 id="解析字符串parseInt-中含有非数字字符，解析按照从左到右的顺序，遇到非数字型字符串解析就会停止"><a href="#解析字符串parseInt-中含有非数字字符，解析按照从左到右的顺序，遇到非数字型字符串解析就会停止" class="headerlink" title="解析字符串parseInt()中含有非数字字符，解析按照从左到右的顺序，遇到非数字型字符串解析就会停止"></a>解析字符串parseInt()中含有非数字字符，解析按照从左到右的顺序，遇到非数字型字符串解析就会停止</h4><h4 id="字符串强制类型转换不允许出现非数字字符，否则会失败并返回NaN"><a href="#字符串强制类型转换不允许出现非数字字符，否则会失败并返回NaN" class="headerlink" title="字符串强制类型转换不允许出现非数字字符，否则会失败并返回NaN"></a>字符串强制类型转换不允许出现非数字字符，否则会失败并返回NaN</h4><h3 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h3><h4 id="直接通过Object创建"><a href="#直接通过Object创建" class="headerlink" title="直接通过Object创建"></a>直接通过Object创建</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>person.name = <span class="hljs-string">&#x27;bobo&#x27;</span>;<br>person.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>name: <span class="hljs-string">&#x27;bobo&#x27;</span>;<br>    sayName: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.sayName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span>(<span class="hljs-params">name,age,job</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    o.name = name;<br>    o.age = age;<br>    a.job.job;<br>    o.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = createPerson(<span class="hljs-string">&#x27;bobo&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;student&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age,job</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.job = job;<br>    <span class="hljs-built_in">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Robot</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;bobo&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;student&#x27;</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;bo&#x27;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;gamer&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(person1 <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(Person2 <span class="hljs-keyword">instanceof</span> Robot);<span class="hljs-comment">//false</span><br><span class="hljs-comment">//补充：构造函数与普通函数的区别：构造函数是用来创建新的对象(通过new关键字)，如果是像普通函数一样调用的话，它的作用就相当于普通函数</span><br><span class="hljs-comment">//例如：</span><br>Person(<span class="hljs-string">&#x27;zzx&#x27;</span>,<span class="hljs-number">20</span>,teacher);<br>sayName();<span class="hljs-comment">//&#x27;zzx&#x27;</span><br><span class="hljs-comment">//调用时，this指向window</span><br></code></pre></td></tr></table></figure><h4 id="组合使用构造函数模式与原型模式"><a href="#组合使用构造函数模式与原型模式" class="headerlink" title="组合使用构造函数模式与原型模式"></a>组合使用构造函数模式与原型模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, job</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.job = job;<br>    <span class="hljs-built_in">this</span>.friends = [<span class="hljs-string">&#x27;wc&#x27;</span>, <span class="hljs-string">&#x27;rt&#x27;</span>];<br>&#125;<br><br>Person.prototype = &#123;<br>    <span class="hljs-title">constructor</span>: <span class="hljs-title">Person</span>,<br>    <span class="hljs-title">sayName</span>: <span class="hljs-title">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//用原型定义共享的方法和属性，构造函数用于定义原型属性</span><br></code></pre></td></tr></table></figure><h4 id="寄生创建函数模式"><a href="#寄生创建函数模式" class="headerlink" title="寄生创建函数模式"></a>寄生创建函数模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, job</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>    o.name = name;<br>    o.age = age;<br>    o.job = job;<br>    o.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> o;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;zzx&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;Programmer&#x27;</span>);<br>person1.sayName();<br><span class="hljs-comment">//封装创建对象的代码</span><br></code></pre></td></tr></table></figure><h3 id="JS实现继承的几种方法"><a href="#JS实现继承的几种方法" class="headerlink" title="JS实现继承的几种方法"></a>JS实现继承的几种方法</h3><p>定义父类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义一个动物类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Animal&#x27;</span>;<br>    <span class="hljs-comment">//实例方法</span><br>    <span class="hljs-built_in">this</span>.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;正在睡觉&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//原型方法</span><br>Animal.prototype.eat = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">food</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;正在吃&#x27;</span> + food);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params"></span>)</span>&#123;<br>    Cat.prototype = <span class="hljs-keyword">new</span> Animal();<br>    Cat.prototype.name = <span class="hljs-string">&#x27;cat&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>致命缺点：来自原型对象的所有属性被所以实例共享；创造子类实例时，无法向父类构造函数传参</p><h4 id="2、构造继承"><a href="#2、构造继承" class="headerlink" title="2、构造继承"></a>2、构造继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    Animal.call(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Tom&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> cat = <span class="hljs-keyword">new</span> Cat();<br><span class="hljs-built_in">console</span>.log(cat.name);<br><span class="hljs-built_in">console</span>.log(cat.sleep());<br><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Animal); <span class="hljs-comment">// false 注意这</span><br><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Cat); <span class="hljs-comment">// tru</span><br></code></pre></td></tr></table></figure><p>只能继承实例属性和方法，不能继承原型属性和方法</p><h4 id="3、实例继承"><a href="#3、实例继承" class="headerlink" title="3、实例继承"></a>3、实例继承</h4><p>缺点：只是父类的实例，不是子类的实例</p><h4 id="4、拷贝继承"><a href="#4、拷贝继承" class="headerlink" title="4、拷贝继承"></a>4、拷贝继承</h4><p>效率较低，内存占用高 不可枚举</p><h4 id="5、组合继承"><a href="#5、组合继承" class="headerlink" title="5、组合继承"></a>5、组合继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    Animal.call(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">this</span>.name = name || <span class="hljs-string">&#x27;Tom&#x27;</span>;<br>&#125;<br>Cat.prototype = <span class="hljs-keyword">new</span> Animal();<br>Cat.prototype.constructor = Cat;<span class="hljs-comment">//修改构造函数指向</span><br><span class="hljs-comment">// Test Code</span><br><span class="hljs-keyword">var</span> cat = <span class="hljs-keyword">new</span> Cat();<br><span class="hljs-built_in">console</span>.log(cat.name);<br><span class="hljs-built_in">console</span>.log(cat.sleep());<br><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Animal); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(cat <span class="hljs-keyword">instanceof</span> Cat); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>特点：</p><ol><li>弥补了方式2的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法</li><li>既是子类的实例，也是父类的实例</li><li>不存在引用属性共享问题</li><li>可传参</li><li>函数可复用</li></ol><p>缺点：</p><ol><li>调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</li></ol><h4 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h4><p>实现较复杂</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>当访问一个变量时，编译器在执行这段代码时，会现在当前作用域查找，如果没有找到，则向父级作用域进行查找，知道全局作用域为止，而作用域链，就是当前当前作用域与上层作用域一系列变量对象的组成，保证当前执行的作用域对符合权限的变量、函数的有序访问。</p><h2 id="http部分"><a href="#http部分" class="headerlink" title="http部分"></a>http部分</h2><h3 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h3><ul><li>数据传输方式不同：GET通过URL传递数据，而Post的数据通过请求体传输数据，因此post的安全性更高    </li><li>GET只允许ASCII码，而POST无限制</li><li>GET只读，不会更改服务器的数据，</li><li>GET无害，POST可能会重复提交表单</li></ul><h3 id="post与put的区别"><a href="#post与put的区别" class="headerlink" title="post与put的区别"></a>post与put的区别</h3><p>PUT 和POST⽅法的区别是,PUT⽅法是幂等的：连续调⽤⼀次或者多次的效果相同（⽆副作⽤），⽽POST⽅法是⾮幂等的</p><p>例如：使用post提交一篇博客可能重复提交多次，而put只会提交一次</p><h3 id="put和patch的区别"><a href="#put和patch的区别" class="headerlink" title="put和patch的区别"></a>put和patch的区别</h3><p>PUT和PATCH都是更新资源，⽽PATCH⽤来对已知资源进⾏局部更新。即更改部分数据</p><h3 id="http请求报文"><a href="#http请求报文" class="headerlink" title="http请求报文"></a>http请求报文</h3><ul><li>请求行</li><li>请求头部</li><li>空行</li><li>请求体</li></ul><p><img src="https://img.imgdb.cn/item/603b06f55f4313ce25816428.jpg"></p><p>请求⾏包括：请求⽅法字段、URL字段、HTTP协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。</p><p>请求头部:请求头部由关键字/值对组成，每⾏⼀对，关键字和值⽤英⽂冒号“:”分隔User-Agent：产⽣请求的浏览器类型。</p><p>Accept：客户端可识别的内容类型列表。</p><p>Host：请求的主机名，允许多个域名同处⼀个IP地址，即虚拟主机。</p><p>请求体: post put等请求携带的数据</p><h3 id="http响应报文"><a href="#http响应报文" class="headerlink" title="http响应报文"></a>http响应报文</h3><ul><li>响应行：由协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。</li><li>响应头：响应部⾸组成</li><li>空行</li><li>响应体：服务器响应的数据</li></ul><h3 id="http常见状态码"><a href="#http常见状态码" class="headerlink" title="http常见状态码"></a>http常见状态码</h3><ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求已被成功接收、理解、接受。<ul><li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li><li>201 Created 请求已经被实现，⽽且有⼀个新的资源已经依据请求的需要⽽建⽴</li><li>202 Accepted 请求已接受，但是还没执⾏，不保证完成请求</li><li>204 No content，表示请求成功，但响应报⽂不含实体的主体部分</li><li>206 Partial Content，进⾏范围请求</li></ul></li><li><h2 id="3xx：重定向–要完成请求必须进行更进一步的操作。"><a href="#3xx：重定向–要完成请求必须进行更进一步的操作。" class="headerlink" title="3xx：重定向–要完成请求必须进行更进一步的操作。"></a>3xx：重定向–要完成请求必须进行更进一步的操作。</h2></li><li>4xx：客户端错误–请求有语法错误或请求无法实现。<ul><li>400 bad request，请求报⽂存在语法错误 ✨</li><li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息 ✨</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝</li><li>404 not found，表示在服务器上没有找到请求的资源</li><li>408 Request timeout, 客户端请求超时</li><li>409 Confict, 请求的资源可能引起冲突</li></ul></li><li>5xx：服务器端错误–服务器未能实现合法的请求。<ul><li>500 internal sever error，表示服务器端在执⾏请求时发⽣了错误 ✨</li><li>501 Not Implemented 请求超出服务器能⼒范围，例如服务器不⽀持当前请求所需要的某个功能，或者请求是服务<br>器不⽀持的某个⽅法</li><li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，⽆法处理请求</li><li>505 http version not supported 服务器不⽀持，或者拒绝⽀持在请求中使⽤的 HTTP 版本</li></ul></li></ul><h2 id="Vue-部分"><a href="#Vue-部分" class="headerlink" title="Vue 部分"></a>Vue 部分</h2><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><p>MVVM的全称是Model-View-View-Model</p><p>Model层：数据层</p><p>View层：视图层</p><p>View-Model层：业务逻辑层</p><ul><li>在Vue中，Model层与View不进行数据交互，而是通过View-Model进行同步</li><li>Model与View-Model之间的交互是双向的，</li><li>ViewModel通过双向数据绑定将Model和View之间联系起来</li></ul><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><p>Vue采用虚拟DOM代替对真实DOM的操作，最后通过某种机制完成对真实DOM的更新</p><p>虚拟DOM：是通过JS进行模拟的，把DOM的变化放在JS层来做，尽量减少对DOM的操作，对过diff算法，算出最小差异，然后修改真实DOM，</p><p>Vue中DOM操作流程</p><ul><li>在内存中构建DOM树</li><li>将内存中的虚拟DOM渲染成真实DOM</li><li>数据改变之后，将之前的虚拟DOM树结合新的数据生成新的DOM树</li><li>通过diff算法进行新老DOM树的对比，不必全部重绘</li><li>重新进行渲染</li></ul><h3 id="V-for-key值的作用"><a href="#V-for-key值的作用" class="headerlink" title="V-for key值的作用"></a>V-for key值的作用</h3><ul><li>和diff算法有关，有key值的话，只需插入到对应位置即可，不会改变元素的走向</li><li>为了避免一些出错：新增数据，如果没有设置key，选中的状态就会变成新增的那条</li></ul><h3 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h3><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><p>计算属性通过其他属性算出一个新的数据，然后把新的数据缓存下来，它调用的是缓存中的数据，极大提高了程序的性能，和methods不同，methods没有缓存的概念，不管数据是否发生变化，methods都会重新调用</p><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>一个对象，键是data对应的数据，值是对应的回调函数。当data发送变化时，就会产生一个回调，watch监听依赖是单个的，他每次监听只能监听一个变量的改变。</p><h3 id="Vue-双向绑定的实现原理"><a href="#Vue-双向绑定的实现原理" class="headerlink" title="Vue 双向绑定的实现原理"></a>Vue 双向绑定的实现原理</h3><p>Vue在创建vm的时候，会将数据配置到在实例之中，然后通过Object.defineProperty对数据进行操作，为数据动态添加getter和setter方法，当获取数据时调用getter方法，修改数据时调用setter方法，从而进一步调用vm中的watch方法，将更改后的数据渲染到视图中</p><h3 id="this-nextTick"><a href="#this-nextTick" class="headerlink" title="this.$nextTick( )"></a>this.$nextTick( )</h3><p>就是DOM渲染完毕后再执行后面的回调函数，created()中使用的方法时，dom还没有渲染，如果此时在该钩子函数中进行dom赋值数据（或者其它dom操作）时无异于徒劳，所以，此时this.$nextTick()就会被大量使用，而与created()对应的是mounted()的钩子函数则是在dom完全渲染后才开始渲染数据，所以在mounted()中操作dom基本不会存在渲染问题。</p><h3 id="Vue中常用的声明周期"><a href="#Vue中常用的声明周期" class="headerlink" title="Vue中常用的声明周期"></a>Vue中常用的声明周期</h3><p>初始化阶段</p><blockquote><h4 id="beforecCreated"><a href="#beforecCreated" class="headerlink" title="beforecCreated"></a>beforecCreated</h4><p>不能获取数据，dom元素也没有渲染出来</p><h4 id="created"><a href="#created" class="headerlink" title="created"></a>created</h4><p>此钩子函数，数据已经挂载，在还没有渲染出DOM节点，可以做一个初始化相关的操作，ajax请求等</p><h4 id="beforeMounted"><a href="#beforeMounted" class="headerlink" title="beforeMounted"></a>beforeMounted</h4><p>dom节点马上就要渲染出来了，和created大致相同</p><h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h4><p>此时，dom节点已经被渲染出来，数据已经挂载，可以获取到真实dom</p></blockquote><p>运行中阶段</p><blockquote><h4 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h4><p>数据发生更改单dom还没有被重新渲染，千万不能在此阶段进行数据更改，不然会死循环</p><h4 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h4><p>这个钩子函数获取到的是更新后的数据，并可以获取到更改后渲染的真实dom</p></blockquote><p>销毁阶段</p><blockquote><h4 id="beforeDestory"><a href="#beforeDestory" class="headerlink" title="beforeDestory"></a>beforeDestory</h4><p>切换路由的时候，组件就要被销毁，发送在销毁前</p><h4 id="destoryed"><a href="#destoryed" class="headerlink" title="destoryed"></a>destoryed</h4><p>此时双向数据绑定，watcher已经被全部移除，但是还存在真实dom</p></blockquote><h3 id="vue中的组件通信"><a href="#vue中的组件通信" class="headerlink" title="vue中的组件通信"></a>vue中的组件通信</h3><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><p>父组件中</p><p><img src="https://img-blog.csdnimg.cn/20181218175420153.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/201812181754339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW5qaWFuX3pob3U=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>子组件中：</p><p><img src="https://img-blog.csdnimg.cn/20181218174742995.png" alt="在这里插入图片描述"></p><p>Prop 是单向绑定的：当父组件的属性变化时，将传递给子组件，但是反过来不会。即子组件通过props接收传递过来的数据，实现单向数据流</p><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><p>父组件中：</p><p><img src="https://img-blog.csdnimg.cn/20181218175910857.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181218183034315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW5qaWFuX3pob3U=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>子组件部分</p><p><img src="https://img-blog.csdnimg.cn/20181218174525607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW5qaWFuX3pob3U=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20181218174544865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW5qaWFuX3pob3U=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>父组件给子组件绑定一个自定义事件，当子组件触发这个程序的时候，相当于父组件的方法被执行，</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql基础(持续更新)</title>
    <link href="/2021/02/08/mysql/"/>
    <url>/2021/02/08/mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql学习笔记"><a href="#Mysql学习笔记" class="headerlink" title="Mysql学习笔记"></a>Mysql学习笔记</h1><p>Mysql是一种关系型数据库</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 登录数据库 <br>mysql -uroot -p&quot;your password&quot;<br>-- 查看数据库<br>show databases<br>-- 操作数据库<br>use 数据库名<br>-- 退出数据库<br>exit;<br>-- 创建数据库<br>creat database test<br>-- 查看数据库中所以数据表<br>show tables<br>-- 创建数据表<br>CREATE TABLE pet (<br>    name VARCHAR(20),<br>    owner VARCHAR(20),<br>    species VARCHAR(20),<br>    sex CHAR(1),<br>    birth DATE,<br>    death DATE<br>);<br>-- 查看数据表的详细结构<br>describe pet;<br>-- 往数据表中添加数据<br>INSERT INTO pet values(&#39;puff&#39;,&#39;bobo&#39;,&#39;dog&#39;,&#39;m&#39;,&#39;1999-03-30&#39;,NULL);<br>-- 删除数据<br>delete from pet where name &#x3D; &#39;puff&#39;<br>-- 修改数据<br>update pet set name&#x3D;&quot;clear_puff&quot; where owner&#x3D;&quot;bobo&quot;;<br>-- 查看数据<br>select * from pet<br></code></pre></td></tr></table></figure><h2 id="MySQL常用数据类型"><a href="#MySQL常用数据类型" class="headerlink" title="MySQL常用数据类型"></a>MySQL常用数据类型</h2><p>大致支持数值 日期/事件 字符串类型</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 byte</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left"><strong>INT或INTEGER</strong></td><td align="left">4 bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left"><strong>FLOAT</strong></td><td align="left">4 bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left"><strong>DOUBLE</strong></td><td align="left">8 bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><h3 id="事件-日期类型"><a href="#事件-日期类型" class="headerlink" title="事件/日期类型"></a>事件/日期类型</h3><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left"><strong>DATE</strong></td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left"><strong>TIME</strong></td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left"><strong>YEAR</strong></td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left"><strong>DATETIME</strong></td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left"><strong>TIMESTAMP</strong></td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left"><strong>CHAR</strong></td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left"><strong>VARCHAR</strong></td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left"><strong>TEXT</strong></td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><h2 id="mysql-建表约束"><a href="#mysql-建表约束" class="headerlink" title="mysql 建表约束"></a>mysql 建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><h4 id="primary-key"><a href="#primary-key" class="headerlink" title="primary key"></a>primary key</h4><p>值唯一且不为空，用它就能确定一张表的一条记录，例如学生的学号唯一的且不为空</p><h4 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user2(<br>    id int,<br>    name varchar(20),<br>    password varchar(20),<br>    primary key(id,name)<br>);<br>-- 联合主键只要两个加起来不相等就可以，例如,即id，name不能都相同，但联合主键任何组件都不能为空<br>insert into user2 value(1,&#39;张三&#39;，&#39;123&#39;)<br>insert into user2 value(1，&#39;李四&#39;,&#39;123&#39;)<br></code></pre></td></tr></table></figure><h4 id="自增约束"><a href="#自增约束" class="headerlink" title="自增约束"></a>自增约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建方式<br>create table user1(<br>    id int primary key auto_increment,<br>    name varchar(20)<br>);<br>-- 插入值<br>insert into user1(name) value(&#39;张三&#39;); <br>得到张三的name值为1 依次在后面插入值后面的id依次递增<br></code></pre></td></tr></table></figure><p>当刚开始建表是忘记添加主键约束时，我们可以使用<code>alter table user4 add primarty key(id);</code></p><p>使用<code>alter table user4 drop primary key</code> 删除主键约束</p><p>通过修改一个字段的方式修改主键约束 <code>alter table user4 modify id int primary key</code></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>涉及两个表，一个主表，一个副表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 班级表<br>create table classes(<br>  id int primary key,<br>    name varchar(20),<br>);<br>-- 学生表<br>create table students(<br>    id int primary key,<br>    name varchar(20),<br>    class_id int , <br>    foreign key(class_id) references classes(id)<br>);<br>insert into classes value(1,&#39;一班&#39;);<br>insert into classes value(2,&#39;二班&#39;);<br>insert into classes value(3,&#39;三班&#39;);<br>insert into classes value(4,&#39;四班&#39;);<br>insert into students value(1001,&#39;张三&#39;,1);<br>insert into students value(1002,&#39;张三&#39;,2);<br>insert into students value(1003,&#39;张三&#39;,3);<br>insert into students value(1004,&#39;张三&#39;,4);<br>-- 如果插入<br>insert into students value(1005,&#39;李四&#39;,5);<br>-- 是不可以的，因为class_id 为5的在classes表中没有<br>-- 如果主表中的记录被附表所引用，那么这一项记录在主表中不可以被删除<br></code></pre></td></tr></table></figure><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>约束修饰的字段的值不可以重复 可以为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user2(<br>    id int,<br>    name varchar(20),<br>    unique(id,name) -- 这种表示两个键在一起不能重复<br>    -- 方式1<br>);<br>alter table user2 add unique(id); -- 方式2<br>alter table user2 modify id int unique;<br>alter table user2 drop index user7 --; 移除<br><br></code></pre></td></tr></table></figure><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p>修饰的字段不能为空，但可以重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE user1(<br>    id INT,<br>    name VARCHAR(20),<br>    age INT DEFAULT 10<br>);<br>ALTER TABLE user1 MODIFY age INT<br></code></pre></td></tr></table></figure><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p>当我们插入字段值的时候，如果没有传则使用默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user1(<br>    id int,<br>    name varchar,<br>    age int default<br>);<br>insert into user2(id,name) values(1,&#39;张三&#39;);<br></code></pre></td></tr></table></figure><h2 id="数据库三大设计范式"><a href="#数据库三大设计范式" class="headerlink" title="数据库三大设计范式"></a>数据库三大设计范式</h2><h3 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式(1NF)"></a>第一范式(1NF)</h3><p>数据表中的所有字段都是不可分割的原子值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student2(<br>    id int primary key,<br>    name varchar(20),<br>    address varchar(30)<br>);<br>insert into student2 values(2,&#39;李四&#39;,&#39;重庆市南岸区成华大道&#39;);<br>-- 这里的adress可以继续拆分成privice,country,detail 满足第二范式<br>create table student3(<br>    id int primary key,<br>    name varchar(20),<br>    country varchar(5),<br>    privince varchar(10),<br>    city varchar(10),<br>    detail varchar(20),<br>);<br>-- 这里字段就不可再拆分了，满足第一范式<br></code></pre></td></tr></table></figure><h3 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式(2NF)"></a>第二范式(2NF)</h3><p>满足第一范式基础上，除主键外的每一列必须完全依赖于主键</p><p>如果要出现不完全依赖，只可能发生联合主键外的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 订单表<br>create table order(<br>product_id int,<br>    customer_id int,<br>    product_name varchar(20),<br>  customer_name varchar(20),<br>    primary key(product_id,customer_id)<br>);<br>-- 上表中，出主键以外的其他列，只依赖于主键的部分字段，例如，product_name只关联与product_id customer_name只关联与customer_id<br>所以不满足于第二范式<br>将上述表进行拆分<br>create table myorder(<br>    order_id int primary key;<br>    product_id int,<br>    customer_id int<br>);<br>create table product(<br>    id int primary key,<br>    name varchar(20)<br>);<br>create table customer(<br>    id int primary key,<br>    name varchar(20)  <br>);<br></code></pre></td></tr></table></figure><h3 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h3><p>必须先满足第二范式，除开主键列的其他列之间不能有传递依赖关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE myorder (<br>    order_id INT PRIMARY KEY,<br>    product_id INT,<br>    customer_id INT,<br>    customer_phone VARCHAR(15)<br>);<br>-- 表中的 customer_phone 有可能依赖于 order_id 、 customer_id 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。<br></code></pre></td></tr></table></figure><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="创建一个新的数据库和表"><a href="#创建一个新的数据库和表" class="headerlink" title="创建一个新的数据库和表"></a>创建一个新的数据库和表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database select_test;<br>use select_test;<br>-- 创建学生表<br>create table student(<br>    no varchar(20) primary key,<br>    name varchar(20) not null,<br>    sex varchar(10) not null,<br>    birthday DATE,<br>    class varchar(20)<br>    -- profession varchar(20) not null,<br>    -- department varchar(20) not null<br>);<br>-- 创建教师表<br>create table teacher(<br>    no varchar(20) primary key,<br>    name varchar(20) not null,<br>    sex varchar(10) not null,<br>    birthday date,<br>    profession  varchar(20) not null, -- 职称<br>    department varchar(20) not null -- 部分<br>);<br>-- 创建课程表<br>create table course(<br>    no varchar(20) primary key,<br>    name varchar(20) not null,<br>    t_no varchar(20) not null, -- 教师编号<br>    foreign key(t_no) references teacher(no)<br>);<br>-- 成绩表<br>create table score(<br>    s_no varchar(20) not null, -- 学生id<br>    c_no varchar(20) not null, -- 课程id<br>    degree decimal, -- 成绩,<br>    foreign key(s_no) references student(no),<br>    foreign key(c_no) references course(no),<br>    primary key(s_no,c_no)<br>);<br></code></pre></td></tr></table></figure><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询指定字段<br>select name from student;<br>-- 去重查询<br>select distinct department from teacher;<br>-- 查询指定范围字段<br>select * from score where degree&gt;&#x3D;80 and degree&lt;&#x3D;90;<br>-- and表示且，都要满足，or表示或<br>-- 查询的结果按升序或降序排序<br>select * from student order by degree asc;<br>select * from student order by degree desc;<br>-- 统计班级人数<br>select count(*) from student where class &#x3D;&#39;95031&#39;;<br>-- 查询指定条数数据<br>select * from score order by degree desc limit 3,5;<br><br>-- 计算平均数<br>select AVG(degree) from score where c_no &#x3D; &#39;3-105&#39;,<br>select AVG(degree) from score where c_no &#x3D; &#39;3-245&#39;, <br>select AVG(degree) from score where c_no &#x3D; &#39;6-166&#39;<br><br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 分组查询<br>select c_no,AVG(degree) from score group by c_no;<br>-- 模糊查询<br>-- 查询选课人数大于2的课程的平均分<br>select c_no,AVG(degree) from score group by c_no having count(s_no)&gt;&#x3D;2;<br>-- 查询选课人数大于2且课程号以3开头的课程<br>select c_no,AVG(degree) from score group by c_no having count(s_no)&gt;&#x3D;2 and c_no like &#39;3%&#39;<br></code></pre></td></tr></table></figure><h3 id="多表查询练习"><a href="#多表查询练习" class="headerlink" title="多表查询练习"></a>多表查询练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询所有所有学生的name,学生在score表中对应的c_no和degree<br>select name,c_no,degree from student,score where student.no &#x3D; degree.s_no;<br>-- 查询所有学生的no，课程名称和成绩<br>select student.name as s_name,course.name as c_name,degree from student,score,course where student.no &#x3D; score.s_no and score.c_no &#x3D; course.no; -- 这里的student中的name与course中的name出现了重名，所以需要用到别名<br>-- any 表示至少<br>-- 查询选修编号为&quot;3-105&quot;课程且成绩至少高于选修编号为&quot;3-245&quot;的同学的Cno,Sn和degree，并且degree按从高到底次序排序<br>select * from score where cno&#x3D;&#39;3-105&#39; and degree&gt;any(degree from score where cno&#x3D;&#39;3-245&#39;) order by degree desc;<br>-- all 表示所有<br>-- 查询选修编号为&quot;3-105&quot;课程且成绩且高于选修编号为&quot;3-245&quot;的同学的Cno,Sn和degree，并且degree按从高到底次序排序<br>select * from score where cno&#x3D;&#39;3-105&#39; and degree&gt;all(degree from score where cno&#x3D;&#39;3-245&#39;) order by degree desc;<br>-- union<br>-- MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。<br>-- UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）<br>select tname as name,tsex as sex,tbirthday as birthday from teacher<br>union<br>select sname,ssex,sbirthday form student;<br>-- 注意 第二排不用起别名，会与第一排一一对应下来<br>-- 复制表中的数据做条件查询<br>-- 查询成绩比课程平均成绩低的成绩的成绩表<br> select * from score a where degree&lt;(select avg(degree) from score b where a.c_no&#x3D;b.c_no);<br></code></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询所有任课老师的Tanme和department<br>select * from course;<br>-- 查询至少有两名男生的班号<br>select class from student where s_sex&#x3D;&#39;男&#39; group by class having count(*)&gt;1;<br>not like 模糊查询取反<br>--   <br></code></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建person表<br>create table person(<br>    id int,<br>    name varchar(20),<br>    cardID int<br>);<br>-- 创建card表<br>create table card(<br>    id int,<br>    name varchar(20)<br>);<br></code></pre></td></tr></table></figure><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>inner join 或者join</p><p>内联查询，其实就是两张表中的数据，通过某个字段相对查询出相关记录数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from person inner join card on person.cardId&#x3D;card.id;<br>+------+------+--------+------+--------+<br>| id   | name | cardID | id   | name   |<br>+------+------+--------+------+--------+<br>|    1 | 张三 |      1 |    1 | 饭卡   |<br>|    2 | 李四 |      3 |    3 | 农行卡 |<br>+------+------+--------+------+--------+<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/08/ncLI14TdwevOCoX.png" alt="image.png"></p><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><ul><li><p>左连接 left join或者left outer join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * form person left join card on person.cardId&#x3D;card.id;<br>得到结果<br>+------+------+--------+------+--------+<br>| id   | name | cardID | id   | name   |<br>+------+------+--------+------+--------+<br>|    1 | 张三 |      1 |    1 | 饭卡   |<br>|    2 | 李四 |      3 |    3 | 农行卡 |<br>|    3 | 王五 |      6 | NULL | NULL   |<br>+------+------+--------+------+--------+<br></code></pre></td></tr></table></figure><p>会吧左边表的所有数据提取出来，而右边表的数据，如果有相等的，就显示出来，如果没有，就补上NULL</p></li></ul><p>  <img src="https://i.loli.net/2021/02/08/s3ODAZvEWqfSFV8.png" alt="image.png"></p><p>  有链接 right join或者right outer join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> select * from person right join card on person.cardId &#x3D; card.id;<br>+------+------+--------+------+--------+<br>| id   | name | cardID | id   | name   |<br>+------+------+--------+------+--------+<br>|    1 | 张三 |      1 |    1 | 饭卡   |<br>|    2 | 李四 |      3 |    3 | 农行卡 |<br>| NULL | NULL |   NULL |    2 | 建行卡 |<br>| NULL | NULL |   NULL |    4 | 工商卡 |<br>| NULL | NULL |   NULL |    5 | 邮政卡 |<br></code></pre></td></tr></table></figure><p>有连接则把右边数据提取出来，左边表的数据，如果有相等的，就显示出来，如果没有，就补上null</p><p><img src="https://i.loli.net/2021/02/08/be2RouZG8Ft9YMf.png" alt="image.png"></p><ul><li>完全外连接 full join 或者full outer join</li></ul><p>mysql不支持全外连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 如果要实现全连接<br>select * from person full join card on person.cardId &#x3D; card.id<br>union<br>select * from person right join card on person.cardId &#x3D; card.id;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>mysql中，事务其实是一个最小的不可分割的工作单元。事务能够保证一个业务的完整性</p><h3 id="autocommit"><a href="#autocommit" class="headerlink" title="autocommit"></a>autocommit</h3><p>自动提交</p><p>手动提交</p><p>事物回滚</p><p>例如我们a向b进行转账</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update user set money-100 where name&#x3D;&#39;a&#39;;<br>update user set money+100 where name&#x3D;&#39;b&#39;;<br>-- 多条sql语句，要么出现同时成功，要么同时失败<br>-- 转账过程中如果出现错误 则可以使用rollback进行撤销<br></code></pre></td></tr></table></figure><p>mysql中 如何控制事务?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select @@autocommit;<br>+--------------+<br>| @@autocommit |<br>+--------------+<br>|            1 |<br>+--------------+<br> set autocommit&#x3D;1<br>-- 默认事务开启的作用<br>-- 当我能去执行一个sql语句时，效果会立即体现出来，且不能回滚(即生效了不能使用rollback进行撤销)<br> set autocommit&#x3D;0;<br>-- 则关闭了mysql的自动提交，此时可以使用rollback撤销提交<br>-- 如果输入了commit语句，此时rollback就没有作用了，<br></code></pre></td></tr></table></figure><h3 id="start-transaction"><a href="#start-transaction" class="headerlink" title="start transaction"></a>start transaction</h3><p>当自动提交开启时，可以使用begin手动开启事务，使用rollback可以事物回滚</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">begin;<br>update user set money-100 where name&#x3D;&#39;a&#39;;<br>update user set money+100 where name&#x3D;&#39;b&#39;;<br>rollback;<br>可以进行事物回滚<br></code></pre></td></tr></table></figure><p>commit即是一个事务失效，此时不能rollback</p><h3 id="事务的4大特征ACID"><a href="#事务的4大特征ACID" class="headerlink" title="事务的4大特征ACID"></a>事务的4大特征ACID</h3><ul><li>A 原子性:事务是最小的单位，不可以再分割</li><li>C 一致性:事务要求，同一事务中的sql语句，必须保证同时成功或者同时失败</li><li>I 隔离性:事务1和事务2之间具有隔离性，</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">read uncommited; 读未提交的<br><br>-- 事务对数据进行操作，在操作的过程中，事务没有被提交，但是b可以看见a操作的结果<br><br>-- 赃读：一个事务读取到了另外一个事务中没有提交的数据，就叫做赃读，实际开发中是不允许赃读的<br><br>read commited; 读已经提交的<br>-- 虽然只能读取到另一个事务提交的数据，但还是会出现问题，就是<br>-- 读取同一个表的数据，发现前后不一致<br>-- 不可重复读<br>repeatable read; 可以重复读（默认）<br>-- 幻读 事务a和事务b同时操作一张表，事务a提交的数据，不能被事务b读到，造成幻读<br>serializale;串行化<br>-- 当表被一个事务操作时，其他事务不可以进行写操作<br>-- 一个事务操作未提交时，此时会进入排队状态，直到事务结束之后，才可以执行事务<br>-- 串行化带来的问题：性能差<br></code></pre></td></tr></table></figure><p>隔离级别越高，性能越差，mysql默认隔离级别是<code>repeatable read</code></p><ul><li>持久性 事务一旦结束，就不可以返回</li></ul><h3 id="事务开启的方式"><a href="#事务开启的方式" class="headerlink" title="事务开启的方式"></a>事务开启的方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 1、修改默认提交<br>set autocommit&#x3D;0;<br>2、 begin<br>3、 start transaction<br>事务手动后提交 commit<br>事务手动回滚 rollback<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise学习(完结)</title>
    <link href="/2021/01/26/promise%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/26/promise%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Promise是什么"><a href="#Promise是什么" class="headerlink" title="Promise是什么"></a>Promise是什么</h2><p>Promise是JS中进行异步编程的新解决方案</p><p>从语法上讲：Promise是一个构造函数，从功能上讲：Promise对象用来封装一个异步操作并可以获取其成功/失败的结果值</p><p>在ES6以前，采用的是回调函数解决方案，即以一个函数作为另一个函数的参数</p><p>应用场景：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-number">1</span>、<span class="hljs-built_in">fs</span>文件操作<br><span class="hljs-number">2</span>、数据库操作<br><span class="hljs-number">3</span>、ajax<br><span class="hljs-number">4</span>、定时器<br></code></pre></td></tr></table></figure><h3 id="为什么要使用Promise"><a href="#为什么要使用Promise" class="headerlink" title="为什么要使用Promise"></a>为什么要使用Promise</h3><p>因为使用回调函数会存在回调地狱的问题，不便于阅读和异常处理</p><p><strong>使用Promise支持链式调用可以解决回调地狱的问题</strong></p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>启动异步任务=》返回Promise对象=》给Promise对象绑定回调函数</p><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;</span>Promise初体验<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击抽奖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rand</span>(<span class="hljs-params">m, n</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.random() * (n - m + <span class="hljs-number">1</span>)) + m - <span class="hljs-number">1</span></span><br>        &#125;<br><span class="javascript">        <span class="hljs-comment">//获取元素对象</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#btn&#x27;</span>);</span><br><span class="javascript">        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//////////通过回调函数实现</span></span><br><span class="javascript">            <span class="hljs-comment">//获取从1到100的随机数</span></span><br><span class="javascript">            <span class="hljs-comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="javascript">            <span class="hljs-comment">//     let n = rand(1,100);</span></span><br><span class="javascript">            <span class="hljs-comment">//     console.log(n)</span></span><br><span class="javascript">            <span class="hljs-comment">//     if(n&lt;=30)</span></span><br><span class="javascript">            <span class="hljs-comment">//         alert(&#x27;恭喜你中奖了！&#x27;);</span></span><br><span class="javascript">            <span class="hljs-comment">//     else&#123;</span></span><br><span class="javascript">            <span class="hljs-comment">//         alert(&#x27;很遗憾。您未中奖&#x27;)</span></span><br><span class="javascript">            <span class="hljs-comment">//     &#125;</span></span><br><span class="javascript">            <span class="hljs-comment">// &#125;,1000)</span></span><br><span class="javascript">            <span class="hljs-comment">///////////////用promise进行封装</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>((resolve,</span><br>                reject<br><span class="javascript">                ) =&gt; &#123; <span class="hljs-comment">//promise实例化时构造函数的参数是一个函数，并且有两个参数//resolve: 解决 函数类型数据       //reject :拒绝 函数类型数据</span></span><br><span class="javascript">                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">let</span> n = rand(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(n)</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">30</span>)</span><br><span class="javascript">                        resolve(n); <span class="hljs-comment">//将Promise对象设置为成功</span></span><br><span class="javascript">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        reject(n); <span class="hljs-comment">//将promise对象设置为失败</span></span><br>                    &#125;<br>                &#125;, 1000);<br>            &#125;)<br><span class="javascript">            p.then(<span class="hljs-function">(<span class="hljs-params">vlaue</span>) =&gt;</span> &#123; <span class="hljs-comment">//调用.then方法，成功调用第一个回调函数代码，失败调用第二个回调函数中的代码</span></span><br><span class="javascript">                alert(<span class="hljs-string">`中奖了号码为<span class="hljs-subst">$&#123;vlaue&#125;</span>`</span>)  </span><br><span class="javascript">            &#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;</span><br><span class="javascript">                alert(<span class="hljs-string">`由于你的号码为<span class="hljs-subst">$&#123;reason&#125;</span>再接再厉`</span>)</span><br>            &#125;)<br><br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实例2-进行函数封装-使其返回一个Promise对象"><a href="#实例2-进行函数封装-使其返回一个Promise对象" class="headerlink" title="实例2 进行函数封装 使其返回一个Promise对象"></a>实例2 进行函数封装 使其返回一个Promise对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 封装一个函数mimeReadFile读取文件内容</span><br><span class="hljs-comment">// 参数：path文件路径</span><br><span class="hljs-comment">// 返回值：promise对象</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mimeReadFile</span>(<span class="hljs-params">path</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123; <span class="hljs-comment">//返回一个promise对象</span><br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).readFile(path, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (err) reject(err);<br>            resolve(data);<br>        &#125;)<br>    &#125;)<br>&#125;<br>mimeReadFile(<span class="hljs-string">&#x27;./resource/hhh.txt&#x27;</span>).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value.toString())<br>&#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(reason)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="手写promise"><a href="#手写promise" class="headerlink" title="手写promise"></a>手写promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">//声明构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Promise</span>(<span class="hljs-params">executor</span>) </span>&#123;<br>    <span class="hljs-comment">//添加属性</span><br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">&#x27;pending&#x27;</span>;<br>    <span class="hljs-built_in">this</span>.PromiseResult = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">this</span>.callbacks = [];<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span>; <span class="hljs-comment">//这里的this指向Promise</span><br>    <span class="hljs-comment">//声明reslove，reject这两个函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-comment">//保证promise对象的状态只能修改一次</span><br>        <span class="hljs-keyword">if</span> (self.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) <span class="hljs-keyword">return</span><br>        <span class="hljs-comment">//修改对象状态(promiseState)</span><br>        <span class="hljs-comment">//而这里的this指向window</span><br>        self.PromiseState = <span class="hljs-string">&#x27;fullfilled&#x27;</span><br>        <span class="hljs-comment">//修改结果值(promiseResult)</span><br>        self.PromiseResult = data;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            self.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                item.onResolved(data)<br>            &#125;)<br>        &#125;)<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reject</span>(<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (self.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) <span class="hljs-keyword">return</span><br>        self.PromiseState = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br>        self.PromiseResult = data;<br>        <span class="hljs-comment">//调用成功的回调函数</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            self.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                item.onRejected(data)<br>            &#125;)<br>        &#125;)<br><br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        executor(resolve, reject);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        reject(e);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//添加then方法</span><br><span class="hljs-built_in">Promise</span>.prototype.then = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            onRejected = <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">throw</span> reason;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            onResolved = <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-keyword">return</span> value &#125;<br>        &#125;<br>        <span class="hljs-comment">//封装函数</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">let</span> result = type(self.PromiseResult);<br>                <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>                    result.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                        resolve(v);<br>                    &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                        reject(r)<br>                    &#125;)<br>                &#125;<br>                <span class="hljs-keyword">else</span> resolve(result)<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (e) &#123;<br>                reject(e)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;fullfilled&#x27;</span>) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                callback(onResolved)<br>            &#125;)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                callback(onRejected)<br>            &#125;)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>            <span class="hljs-comment">//保存回调函数</span><br>            <span class="hljs-built_in">this</span>.callbacks.push(&#123;<br>                onResolved: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                    <span class="hljs-comment">//成功执行回调函数</span><br>                    callback(onResolved)<br>                &#125;,<br>                onRejected: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                    callback(onRejected)<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-built_in">Promise</span>.prototype.catch = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onRejected</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.then(<span class="hljs-literal">undefined</span>, onRejected)<br>&#125;<br><span class="hljs-comment">//封装Promise.resolve</span><br><span class="hljs-built_in">Promise</span>.resolve = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) &#123;<br>            value.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                resolve(v)<br>            &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                reject(r)<br>            &#125;)<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            resolve(value)<br>        &#125;<br>    &#125;);<br>&#125;<br><span class="hljs-comment">//封装Promise.reject</span><br><span class="hljs-built_in">Promise</span>.reject = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        reject(reason)<br>    &#125;)<br>&#125;<br><span class="hljs-comment">//封装Promisr.all方法</span><br><span class="hljs-built_in">Promise</span>.all = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>            promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                count++;<br>                arr[i] = v;<br>                <span class="hljs-comment">//得知对象状态为成功，</span><br>                <span class="hljs-comment">//每个都为成功时才调</span><br>                <span class="hljs-keyword">if</span> (count === promises.length) &#123;<br>                    resolve(arr);<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-comment">//封装Promise.race方法</span><br><span class="hljs-built_in">Promise</span>.race = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) &#123;<br>            promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                resolve(v);<br>            &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                reject(r);<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h2><h3 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h3><p>函数的返回值为promise对象，promise对象的结果由async函数的执行的返回值决定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-keyword">let</span> result = main();<br><span class="hljs-built_in">console</span>.log(result)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/27/EFIZPByW9a6hLAY.png" alt="image.png"></p><p>如果返回的是一个非Promise类型的数据，PromiseState为<code>fulfilled</code>，PromiseResult如返回值相同</p><p>如果返回的是一个Promise对象，则PromiseState与返回的Promise的状态相同，且PromiseResult也相同</p><p>如果是抛出错误，则PromiseState为rejected，PromiseState是抛出错误的参数</p><h3 id="await函数"><a href="#await函数" class="headerlink" title="await函数"></a>await函数</h3><p>await右侧的表达式一般是promise对象</p><p>如果表达式是promise对象，await返回的是promise成功的值</p><p>如果表达式是其他值，直接将此值作为await的返回值  </p><p>这里await必须写在async函数中，但await可由可无</p><h3 id="如何async与await写出优雅代码"><a href="#如何async与await写出优雅代码" class="headerlink" title="如何async与await写出优雅代码"></a>如何async与await写出优雅代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> mineReadFile(<span class="hljs-string">&#x27;./resource/1.txt&#x27;</span>);<br>        <span class="hljs-keyword">let</span> data2 = <span class="hljs-keyword">await</span> mineReadFile(<span class="hljs-string">&#x27;./resource/2.txt&#x27;</span>);<br>        <span class="hljs-keyword">let</span> data3 = <span class="hljs-keyword">await</span> mineReadFile(<span class="hljs-string">&#x27;./resource/3.txt&#x27;</span>);<br>    &#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>        <span class="hljs-built_in">console</span>.log(e)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//前提是mineReadFile返回值一个promise类型的对象</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//封装AJAX请求为promise对象</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendAJAX</span>(<span class="hljs-params">url</span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>                xhr.responseType = <span class="hljs-string">&#x27;json&#x27;</span>;<br>                xhr.open(<span class="hljs-string">&quot;GET&quot;</span>, url);<br>                xhr.send();<br>                <span class="hljs-comment">//处理结果</span><br>                xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>)&#123;<br>                        <span class="hljs-comment">//判断成功</span><br>                        <span class="hljs-keyword">if</span>(xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>)&#123;<br>                            <span class="hljs-comment">//成功的结果</span><br>                            resolve(xhr.response);<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            reject(xhr.status);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">let</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#btn&#x27;</span>);<br>        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">let</span> joker = <span class="hljs-keyword">await</span> sendAJAX(<span class="hljs-string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);<br>            <span class="hljs-built_in">console</span>.log(joker.result);<br>        &#125;)<br></code></pre></td></tr></table></figure><p>axios已经将各种ajax请求的返回值封装成promise对象，实际开发过程中不需要我们手动去进行封装</p>]]></content>
    
    
    <categories>
      
      <category>前端工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础(持续更新)</title>
    <link href="/2021/01/26/vue/"/>
    <url>/2021/01/26/vue/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue介绍"><a href="#Vue介绍" class="headerlink" title="Vue介绍"></a>Vue介绍</h2><ul><li>Vue是一套用于构建用户列表的<strong>渐进式框架</strong>,</li><li>Vue 被设计为可以自底向上逐层应用，Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</li><li>Vue能够为复杂的单页应用提供驱动</li></ul><p>Vue构成包括核心库和扩展插件</p><p>为什么是渐进式框架，和Angular不同，Vue提供的是一整套的解决方案，可以和其它库兼容</p><h2 id="Vue的引入"><a href="#Vue的引入" class="headerlink" title="Vue的引入"></a>Vue的引入</h2><ul><li><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code></li><li>通过Vue-cli</li></ul><h2 id="Vue入门"><a href="#Vue入门" class="headerlink" title="Vue入门"></a>Vue入门</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    鼠标悬停几秒钟查看此处动态绑定的提示信息！<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app2 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-2&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;页面加载于 &#x27;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当data里面的是html是，使用<code>&lt;div v-html = &quot;message&quot;&gt;&lt;/div&gt;</code></p><h3 id="v-bind绑定元素节点的属性"><a href="#v-bind绑定元素节点的属性" class="headerlink" title="v-bind绑定元素节点的属性"></a>v-bind绑定元素节点的属性</h3><p>通过<code>v-bind</code> 是vue才带有的指令，指令带有前缀<code>v-</code>以表示是vue提供的attribute，将这个元素节点的 <code>title</code> 属性 和 Vue 实例的 <code>message</code> 值保持一致</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-3&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app3 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-3&#x27;</span>,<br>  data: &#123;<br>    seen: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>可以通过设置<code>app3.seen</code>的值可以控制DOM元素的显示或隐藏</p><h3 id="通过v-for对数组进行遍历"><a href="#通过v-for对数组进行遍历" class="headerlink" title="通过v-for对数组进行遍历"></a>通过v-for对数组进行遍历</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span>&gt;</span><br>      &#123;&#123; todo.text &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app4 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-4&#x27;</span>,<br>  data: &#123;<br>    todos: [<br>      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学习 JavaScript&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学习 Vue&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;整个牛项目&#x27;</span> &#125;<br>    ]<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="v-on绑定事件"><a href="#v-on绑定事件" class="headerlink" title="v-on绑定事件"></a>v-on绑定事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-5&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reverseMessage&quot;</span>&gt;</span>反转消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app5 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-5&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;Hello Vue.js!&#x27;</span><br>  &#125;,<br>  methods: &#123;<br>    reverseMessage: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.message = <span class="hljs-built_in">this</span>.message.split(<span class="hljs-string">&#x27;&#x27;</span>).reverse().join(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="如何停止事件："><a href="#如何停止事件：" class="headerlink" title="如何停止事件："></a>如何停止事件：</h4><p>方法1：使用原生js的阻止冒泡:<code>event.stopPropagation</code></p><p>方法2：通过Vue提供的事件修饰符</p><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><h3 id="v-model双向数据绑定"><a href="#v-model双向数据绑定" class="headerlink" title="v-model双向数据绑定"></a>v-model双向数据绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-6&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app6 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-6&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="vue组件系统"><a href="#vue组件系统" class="headerlink" title="vue组件系统"></a>vue组件系统</h2><p><img src="https://cn.vuejs.org/images/components.png" alt="Component Tree"></p><p>当要构建大型应用时，可以通过组件化进行构建，如下面例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-7&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      现在我们为每个 todo-item 提供 todo 对象</span><br><span class="hljs-comment">      todo 对象是变量，即其内容可以是动态的。</span><br><span class="hljs-comment">      我们也需要为每个组件提供一个“key”，稍后再</span><br><span class="hljs-comment">      作详细解释。</span><br><span class="hljs-comment">    --&gt;</span><br>    &lt;todo-item<br>      v-for=&quot;item in groceryList&quot;<br>      v-bind:todo=&quot;item&quot;<br>      v-bind:key=&quot;item.id&quot;<br>    &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">todo-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.component(<span class="hljs-string">&#x27;todo-item&#x27;</span>, &#123; <span class="hljs-comment">//生成todo-item组件</span><br>  props: [<span class="hljs-string">&#x27;todo&#x27;</span>],<br>  template: <span class="hljs-string">&#x27;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&#x27;</span>,<br>  data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">return</span>&#123;<br>          name:<span class="hljs-string">&quot;鹿晗&quot;</span><br>      &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">var</span> app7 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app-7&#x27;</span>,<br>  data: &#123;<br>    groceryList: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;蔬菜&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;奶酪&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;随便其它什么人吃的东西&#x27;</span> &#125;<br>    ]<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="Vue的脚手架"><a href="#Vue的脚手架" class="headerlink" title="Vue的脚手架"></a>Vue的脚手架</h2><ul><li>脚手架是通过webpack搭建的</li><li>使用ES6的语法</li><li>打包和压缩JS为一个文件</li><li>项目文件在环境中进行编译</li><li>页面可以自动刷新</li></ul><p>通过Vue脚手架创建的项目结构</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://i.loli.net/2021/01/22/bnYUZuk9x4cPQRA.png" alt="image.png"></p><p>通过Vue脚手架创建的项目结构如上所示</p><h4 id="1、build文件夹"><a href="#1、build文件夹" class="headerlink" title="1、build文件夹"></a>1、build文件夹</h4><p>主要是打包的一些webpack配置文件，Vue的打包是基于Webpack的，webpack的知识后面也需要学习</p><h4 id="2、config文件夹"><a href="#2、config文件夹" class="headerlink" title="2、config文件夹"></a>2、config文件夹</h4><p>主要是一些项目的配置文件</p><h4 id="3、node——modules文件夹"><a href="#3、node——modules文件夹" class="headerlink" title="3、node——modules文件夹"></a>3、node——modules文件夹</h4><p>不用多说了，就是各种包</p><h4 id="4、Src文件夹"><a href="#4、Src文件夹" class="headerlink" title="4、Src文件夹"></a>4、Src文件夹</h4><p>最重要，assets存放静态文件，components文件夹下存放的各种组件，其中App.vue是根组件</p><h4 id="5、main-js文件"><a href="#5、main-js文件" class="headerlink" title="5、main.js文件"></a>5、main.js文件</h4><p>绑定了index.html，也引入了根组件</p><p>6、index.html</p><p>整个html的入口</p><p>router文件夹后面再补充</p><h3 id="Css作用域"><a href="#Css作用域" class="headerlink" title="Css作用域"></a>Css作用域</h3><p>在各个组件中，如果不设置script 的scoped则会造成各个组件样式的覆盖和继承，通过scoped可以让样式在自己的组件中生效</p><h2 id="Vue传值"><a href="#Vue传值" class="headerlink" title="Vue传值"></a>Vue传值</h2><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><p>通过v-bind进行属性传值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">Users</span> <span class="hljs-attr">v-bind:users</span>=<span class="hljs-string">&quot;users&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Users</span>&gt;</span> <br><span class="hljs-comment">&lt;!--父组件通过在绑定属性向子组件传值--&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">子组件通过 props:[<span class="hljs-string">&quot;users&quot;</span>]拿到<br> props: &#123; <span class="hljs-comment">//这样写更严谨</span><br>    users: &#123;<br>      type: <span class="hljs-built_in">Array</span>,<br>      required: <span class="hljs-literal">true</span>,<br>    &#125;,<br></code></pre></td></tr></table></figure><p>传值：<code>string</code>,<code>number</code>,<code>boolean </code>传值时，两个组件的值互相不影响</p><p>传引用：<code>array</code>,<code>object</code> 传引用时，改变一个地方的值其他地方也会跟着变化</p><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><p>通过事件进行传值</p><p>比如说通过改变子组件的一个值实现父组件值的修改</p><p>首先我们在子组件中定义一个方法，注册一个事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">methods:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&quot;titleChange&quot;</span>,<span class="hljs-string">&quot;子向父组件传值&quot;</span>);<span class="hljs-comment">//注册一个事件,前面一个是方法名，后面一个是传递的值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在父组件的子组件标签中绑定一方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">app-header</span> <span class="hljs-attr">v-on:titleChange</span>=<span class="hljs-string">&quot;updateTitle($event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-header</span>&gt;</span> 绑定的事件名必须和子组件中注册的方法名一致，<br>然后实现这个方法<br>updateTitle(title)&#123;<br>this.title = title;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://i.loli.net/2021/01/23/xqg56OBoVRmhapP.png" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">beforeCreate:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件实例化之前执行的函数&quot;</span>)<br>  &#125;,<br>  created:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件实例化加载完毕，单页面还没显示&quot;</span>)<br>  &#125;,<br>  beforeMount:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件挂载前，页面仍未显示，但虚拟DOM已经配置&quot;</span>)<br>  &#125;,<br>  mounted:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件挂载后,此方法执行后，页面显示&quot;</span>)<br>  &#125;,<br>  beforeUpdate:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件更新前，页面仍未更新，但虚拟DOM已经配置&quot;</span>)<br>  &#125;,<br>  updated:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件更新，此方法执行后，页面显示&quot;</span>)<br>  &#125;,<br>  beforeDestroy:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;组件销毁前&quot;</span>)<br>  &#125;,<br>  destroyed: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params"></span>) </span>&#123;<br>      alert(<span class="hljs-string">&quot;组件销毁&quot;</span>)<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><p>使用路由不会造成当前html的刷新</p><p>首先需要安装裸游模块</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">npm install vue-router --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p>再在main.js中引入组件，映入router</p><p>使用VueRouter中间件</p><p>创建router实例对象，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  routes:[<br>    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">component</span>:home&#125;,<br>    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/helloworld&#x27;</span>,<span class="hljs-attr">component</span>:HelloWorld&#125;,<br>  ],<br>  mode:<span class="hljs-string">&quot;history&quot;</span> <span class="hljs-comment">//消除#号</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span> =<span class="hljs-string">&quot;/&quot;</span>&gt;</span>跳转到根组件<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> //这样不会造成页面的刷新<br></code></pre></td></tr></table></figure><h2 id="使用vue-resource"><a href="#使用vue-resource" class="headerlink" title="使用vue-resource"></a>使用vue-resource</h2><p>vue里面自带了请求http的包，但目前使用最多的还是axios</p><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//自定义指令</span><br>Vue.directive(<span class="hljs-string">&#x27;rainbow&#x27;</span>,&#123; <span class="hljs-comment">//rainbow是指令的名字</span><br>    <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el,binding,vnode</span>)</span>&#123;<br>      el.style.color = <span class="hljs-string">&#x27;#&#x27;</span>+<span class="hljs-built_in">Math</span>.random().toString(<span class="hljs-number">16</span>).slice(<span class="hljs-number">2</span>,<span class="hljs-number">8</span>)<br>    &#125;<br>&#125;)<br><span class="hljs-comment">//带值</span><br>Vue.directive(<span class="hljs-string">&#x27;theme&#x27;</span>,&#123;<br>  <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el,binding,vnode</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(binding.value==<span class="hljs-string">&#x27;wide&#x27;</span>)&#123;<br>      el.style.maxWidth = <span class="hljs-string">&quot;1260px&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(binding.value == <span class="hljs-string">&#x27;narrow&#x27;</span>)&#123;<br>      el.style.maxWidth = <span class="hljs-string">&quot;500px&quot;</span><br>    &#125;<br>  &#125;<br>&#125;)<br><span class="hljs-comment">//带参数</span><br>Vue.directive(<span class="hljs-string">&#x27;theme&#x27;</span>,&#123;<br>  <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el,binding,vnode</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(binding.value==<span class="hljs-string">&#x27;wide&#x27;</span>)&#123;<br>      el.style.maxWidth = <span class="hljs-string">&quot;1260px&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(binding.value == <span class="hljs-string">&#x27;narrow&#x27;</span>)&#123;<br>      el.style.maxWidth = <span class="hljs-string">&quot;500px&quot;</span><br>    &#125;<br>      <span class="hljs-keyword">if</span>(binding.arg ==<span class="hljs-string">&#x27;column&#x27;</span>)&#123;<br>          el.style.background = <span class="hljs-string">&quot;6677cc&quot;</span>;<br>          el.style.padding = 10px;<br>      &#125;<br>  &#125;<br>&#125;)<br>&lt;div v-theme:cloumn = <span class="hljs-string">&quot;narrow&quot;</span>&gt;&lt;/div&gt;<br>然后在标签上直接使用该指令即可<br>上面是在全局，也可以在当前组件生效一个自定义过滤器，只设置当前组件的Vue实例的filters属性即可<br></code></pre></td></tr></table></figure><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.filter(<span class="hljs-string">&quot;touppercase&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123; <span class="hljs-comment">//第一个参数是过滤器的名字，第二个参数是具体实现的方法</span><br>  <span class="hljs-keyword">return</span> value.toUpperCase();<br>&#125;)<br>   &lt;h2 v-rainbow&gt;&#123;&#123;blog.title |touppercase&#125;&#125;&lt;<span class="hljs-regexp">/h2&gt; /</span><span class="hljs-regexp">/如何使用</span><br></code></pre></td></tr></table></figure><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><p>在路由模块上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>[<br>    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/blog/:id&quot;</span>,<span class="hljs-attr">component</span>:SingleBlog&#125;<br>]<br>再通过<span class="hljs-built_in">this</span>.$route.params即可拿到路由后面跟的参数<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6的一些新特性(持续更新)</title>
    <link href="/2021/01/26/ES6/"/>
    <url>/2021/01/26/ES6/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够说出使用let关键字声明变量的特点</li><li>能够使用解构赋值从数组中提取值</li><li>能够说出箭头函数拥有的特性</li><li>能够使用剩余参数接收剩余的函数参数</li><li>能够使用拓展运算符拆分数组</li><li>能够说出模板字符串拥有的特性</li></ul><h2 id="ES6相关概念（★★）"><a href="#ES6相关概念（★★）" class="headerlink" title="ES6相关概念（★★）"></a>ES6相关概念（★★）</h2><h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p><p>![](C:/Users/Yanbo/Desktop/WEB学习/前端就业班资料/07-10 JavaScript网页编程/04-JavaScript高级资料/JavaScript 高级_day05/4-笔记/images/es-version.png)</p><h3 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h2><h3 id="let（★★★）"><a href="#let（★★★）" class="headerlink" title="let（★★★）"></a>let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p><h4 id="变量不允许重复声明"><a href="#变量不允许重复声明" class="headerlink" title="变量不允许重复声明"></a>变量不允许重复声明</h4><p>重复声明会报错</p><h4 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; <br>     <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br> &#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// a is not defined</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// a is not defined 报错</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; <br>    tmp = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>    <span class="hljs-keyword">let</span> tmp; <br>&#125; <br></code></pre></td></tr></table></figure><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> arr = [];<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>     arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>         <span class="hljs-built_in">console</span>.log(i); <br>     &#125;<br> &#125;<br> arr[<span class="hljs-number">0</span>](); <br> arr[<span class="hljs-number">1</span>]();<br><span class="hljs-comment">//都是打印2</span><br><br></code></pre></td></tr></table></figure><p>![](C:/Users/Yanbo/Desktop/WEB学习/前端就业班资料/07-10 JavaScript网页编程/04-JavaScript高级资料/JavaScript 高级_day05/4-笔记/images/let面试题.png)</p><p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i); <br>    &#125;<br>&#125;<br>arr[<span class="hljs-number">0</span>]();<br>arr[<span class="hljs-number">1</span>]();<br><br></code></pre></td></tr></table></figure><p>![](C:/Users/Yanbo/Desktop/WEB学习/前端就业班资料/07-10 JavaScript网页编程/04-JavaScript高级资料/JavaScript 高级_day05/4-笔记/images/let面试题2.png)</p><p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>let关键字就是用来声明变量的</li><li>使用let关键字声明的变量具有块级作用域</li><li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li><li>防止循环变量变成全局变量</li><li>使用let关键字声明的变量没有变量提升</li><li>使用let关键字声明的变量具有暂时性死区特性</li></ul><h3 id="const（★★★）"><a href="#const（★★★）" class="headerlink" title="const（★★★）"></a>const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p><h4 id="潜规则：常量变量名一般要大写"><a href="#潜规则：常量变量名一般要大写" class="headerlink" title="潜规则：常量变量名一般要大写"></a>潜规则：常量变量名一般要大写</h4><h4 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; <br>     <span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br> &#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// a is not defined</span><br></code></pre></td></tr></table></figure><h4 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI; <span class="hljs-comment">// Missing initializer in const declaration</span><br></code></pre></td></tr></table></figure><h4 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.14</span>;<br>PI = <span class="hljs-number">100</span>; <span class="hljs-comment">// Assignment to constant variable.</span><br><br><span class="hljs-keyword">const</span> ary = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>];<br>ary[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br>ary[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(ary); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;]; </span><br>ary = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]; <span class="hljs-comment">// Assignment to constant variable.</span><br><br></code></pre></td></tr></table></figure><p>对于数组和对象的元素修改，不能修改其地址值，但是元素值是可以修改的</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>const声明的变量是一个常量</li><li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li><li>声明 const时候必须要给定值</li></ul><h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul><li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li><li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li><li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li></ul><p>![](C:/Users/Yanbo/Desktop/WEB学习/前端就业班资料/07-10 JavaScript网页编程/04-JavaScript高级资料/JavaScript 高级_day05/4-笔记/images/var&amp;let&amp;const区别.png)</p><h3 id="解构赋值（★★★）"><a href="#解构赋值（★★★）" class="headerlink" title="解构赋值（★★★）"></a>解构赋值（★★★）</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">let</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <span class="hljs-built_in">console</span>.log(a)<span class="hljs-comment">//1</span><br> <span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">//2</span><br> <span class="hljs-built_in">console</span>.log(c)<span class="hljs-comment">//3</span><br><span class="hljs-comment">//如果解构不成功，变量的值为undefined</span><br></code></pre></td></tr></table></figure><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;; <br><span class="hljs-keyword">let</span> &#123; name, age &#125; = person;<br><span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">// &#x27;zhangsan&#x27; </span><br><span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// 20</span><br><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>: myName, <span class="hljs-attr">age</span>: myAge&#125; = person; <span class="hljs-comment">// myName myAge 属于别名</span><br><span class="hljs-built_in">console</span>.log(myName); <span class="hljs-comment">// &#x27;zhangsan&#x27; </span><br><span class="hljs-built_in">console</span>.log(myAge); <span class="hljs-comment">// 20</span><br><br></code></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h3 id="对象简化"><a href="#对象简化" class="headerlink" title="对象简化"></a>对象简化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;波波&#x27;</span>;<br><span class="hljs-keyword">let</span> change = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hhh&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">const</span> school = &#123;<br>    name,<br>    change,<br>    <span class="hljs-function"><span class="hljs-title">improve</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="箭头函数（★★★）"><a href="#箭头函数（★★★）" class="headerlink" title="箭头函数（★★★）"></a>箭头函数（★★★）</h3><p>ES6中新增的定义函数的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">() =&gt; &#123;&#125; <span class="hljs-comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span><br><span class="hljs-keyword">const</span> fn = <span class="hljs-function">() =&gt;</span> &#123;&#125;<span class="hljs-comment">//代表把一个函数赋值给fn</span><br></code></pre></td></tr></table></figure><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号，语句的执行结果就是函数的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123; <br>    <span class="hljs-keyword">return</span> num1 + num2; <br>&#125;<br><span class="hljs-comment">//es6写法</span><br><span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">num1, num2</span>) =&gt;</span> num1 + num2; <br><br></code></pre></td></tr></table></figure><p>如果形参只有一个，可以省略小括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params">v</span>) </span>&#123;<br>     <span class="hljs-keyword">return</span> v;<br> &#125; <br><span class="hljs-comment">//es6写法</span><br> <span class="hljs-keyword">const</span> fn = <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v;<br><br></code></pre></td></tr></table></figure><p>箭头函数不绑定this关键字，this始终指向函数声明时所在作用域下的this 的值，利用call()方法也不能改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>&#125; <br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params"></span>) </span>&#123; <br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//this 指向 是obj对象</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123; <br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span><br>     &#125; <br> &#125; <br> <span class="hljs-keyword">const</span> resFn = fn.call(obj); <br> resFn();<br><br></code></pre></td></tr></table></figure><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li><li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li><li>箭头函数不能作为构造函数实例化</li><li>不能使用arguments变量</li><li>this不适合与this有关的回调，事件回调，对象的方法</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>age: <span class="hljs-number">20</span>,<br>say: <span class="hljs-function">() =&gt;</span> &#123;<br>alert(<span class="hljs-built_in">this</span>.age)<br>&#125;<br>&#125;<br><br>obj.say();<span class="hljs-comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span><br></code></pre></td></tr></table></figure><h3 id="剩余参数（★★）"><a href="#剩余参数（★★）" class="headerlink" title="剩余参数（★★）"></a>剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p><p>可以给函数形参传默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a,b,c=<span class="hljs-number">0</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br></code></pre></td></tr></table></figure><p>与解构赋值配合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params">&#123;host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,username,password,port&#125;</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(host);<br>    <span class="hljs-built_in">console</span>.log(username);<br>    <span class="hljs-built_in">console</span>.log(password);<br>    <span class="hljs-built_in">console</span>.log(port);<br>&#125;<br>connct(&#123;<br>    host:<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    username:<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password:<span class="hljs-string">&#x27;root&#x27;</span>,<br>    port:<span class="hljs-number">3306</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span> (<span class="hljs-params">first, ...args</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(first); <span class="hljs-comment">// 10</span><br>     <span class="hljs-built_in">console</span>.log(args); <span class="hljs-comment">// [20, 30] </span><br> &#125;<br> sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br><br></code></pre></td></tr></table></figure><h4 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> students = [<span class="hljs-string">&#x27;wangwu&#x27;</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-string">&#x27;lisi&#x27;</span>];<br><span class="hljs-keyword">let</span> [s1, ...s2] = students; <br><span class="hljs-built_in">console</span>.log(s1);  <span class="hljs-comment">// &#x27;wangwu&#x27; </span><br><span class="hljs-built_in">console</span>.log(s2);  <span class="hljs-comment">// [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span><br><br></code></pre></td></tr></table></figure><h2 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h2><h3 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a,b...arg</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//1</span><br>    <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//2</span><br>    <span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//[3,4,5,6]</span><br>&#125;<br>fn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><h3 id="Array-的扩展方法（★★）"><a href="#Array-的扩展方法（★★）" class="headerlink" title="Array 的扩展方法（★★）"></a>Array 的扩展方法（★★）</h3><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ary = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>...ary  <span class="hljs-comment">// 1, 2, 3</span><br><span class="hljs-built_in">console</span>.log(...ary);    <span class="hljs-comment">// 1 2 3,相当于下面的代码</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h5 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 方法一 </span><br> <span class="hljs-keyword">let</span> ary1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <span class="hljs-keyword">let</span> ary2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br> <span class="hljs-keyword">let</span> ary3 = [...ary1, ...ary2];<br> <span class="hljs-comment">// 方法二 </span><br> ary1.push(...ary2);<br></code></pre></td></tr></table></figure><h5 id="将伪数组或可遍历对象转换为真正的数组"><a href="#将伪数组或可遍历对象转换为真正的数组" class="headerlink" title="将伪数组或可遍历对象转换为真正的数组"></a>将伪数组或可遍历对象转换为真正的数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> oDivs = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>); <br>oDivs = [...oDivs];<br></code></pre></td></tr></table></figure><h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//定义一个集合</span><br><span class="hljs-keyword">let</span> arrayLike = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    length: <span class="hljs-number">3</span><br>&#125;; <br><span class="hljs-comment">//转成数组</span><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-built_in">Array</span>.from(arrayLike); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></code></pre></td></tr></table></figure><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arrayLike = &#123; <br>    <span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;length&quot;</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">let</span> newAry = <span class="hljs-built_in">Array</span>.from(arrayLike, <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item *<span class="hljs-number">2</span>)<span class="hljs-comment">//[2,4]</span><br><br></code></pre></td></tr></table></figure><p>注意：如果是对象，那么属性需要写对应的索引</p><h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ary = [&#123;<br>     id: <span class="hljs-number">1</span>,<br>     name: <span class="hljs-string">&#x27;张三&#x27;</span><br> &#125;, &#123; <br>     id: <span class="hljs-number">2</span>,<br>     name: <span class="hljs-string">&#x27;李四&#x27;</span><br> &#125;]; <br> <span class="hljs-keyword">let</span> target = ary.find(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item.id == <span class="hljs-number">2</span>);<span class="hljs-comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span><br><br></code></pre></td></tr></table></figure><h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ary = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>];<br><span class="hljs-keyword">let</span> index = ary.findIndex(<span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> value &gt; <span class="hljs-number">9</span>); <br><span class="hljs-built_in">console</span>.log(index); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">2</span>) <span class="hljs-comment">// true </span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">4</span>) <span class="hljs-comment">// false</span><br><br></code></pre></td></tr></table></figure><h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">`zhangsan`</span>;<br><br></code></pre></td></tr></table></figure><h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;张三&#x27;</span>; <br><span class="hljs-keyword">let</span> sayHello = <span class="hljs-string">`hello,my name is <span class="hljs-subst">$&#123;name&#125;</span>`</span>; <span class="hljs-comment">// hello, my name is zhangsan 拼接字符串方式</span><br></code></pre></td></tr></table></figure><h5 id="模板字符串中可以直接换行"><a href="#模板字符串中可以直接换行" class="headerlink" title="模板字符串中可以直接换行"></a>模板字符串中可以直接换行</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> result = &#123; <br>    name: <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <br>    age: <span class="hljs-number">20</span>,<br>    sex: <span class="hljs-string">&#x27;男&#x27;</span> <br>&#125; <br><span class="hljs-keyword">let</span> html = <span class="hljs-string">` &lt;div&gt;</span><br><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">    &lt;span&gt;<span class="hljs-subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">&lt;/div&gt; `</span>;<br><br></code></pre></td></tr></table></figure><h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;哈哈哈哈 追不到我吧 我就是这么强大&#x27;</span>;<br> &#125;; <br> <span class="hljs-keyword">let</span> greet = <span class="hljs-string">`<span class="hljs-subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;<br> <span class="hljs-built_in">console</span>.log(greet); <span class="hljs-comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span><br><br></code></pre></td></tr></table></figure><h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul><li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;<br>str.startsWith(<span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-comment">// true </span><br>str.endsWith(<span class="hljs-string">&#x27;!&#x27;</span>)       <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;x&#x27;</span>.repeat(<span class="hljs-number">3</span>)      <span class="hljs-comment">// &quot;xxx&quot; </span><br><span class="hljs-string">&#x27;hello&#x27;</span>.repeat(<span class="hljs-number">2</span>)  <span class="hljs-comment">// &quot;hellohello&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Set-集合-数据结构（★★）"><a href="#Set-集合-数据结构（★★）" class="headerlink" title="Set (集合)数据结构（★★）"></a>Set (集合)数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值，自动去重。</p><p>Set本身是一个构造函数，用来生成  Set  数据结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br></code></pre></td></tr></table></figure><p>Set函数可以接受一个数组作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]);<span class="hljs-comment">//&#123;1, 2, 3, 4&#125;</span><br><span class="hljs-comment">//转换为数组</span><br><span class="hljs-keyword">let</span> arr = [...s] <span class="hljs-comment">//通过展开运算符</span><br></code></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>s.size;<span class="hljs-comment">//size属性，得到</span><br> s.add(<span class="hljs-number">1</span>).add(<span class="hljs-number">2</span>).add(<span class="hljs-number">3</span>); <span class="hljs-comment">// 向 set 结构中添加值 </span><br> s.delete(<span class="hljs-number">2</span>)             <span class="hljs-comment">// 删除 set 结构中的2值   </span><br> s.has(<span class="hljs-number">1</span>)                <span class="hljs-comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span><br> s.clear()               <span class="hljs-comment">// 清除 set 结构中的所有值</span><br> <span class="hljs-comment">//注意：删除的是元素的值，不是代表的索引</span><br></code></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">s.forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(value))<br><br></code></pre></td></tr></table></figure><h3 id="Map数据结构"><a href="#Map数据结构" class="headerlink" title="Map数据结构"></a>Map数据结构</h3><h4 id="实例方法-1"><a href="#实例方法-1" class="headerlink" title="实例方法"></a>实例方法</h4><p>Map对象保存键值对，并且能够记住键的原始插入顺序，任何值都可以作为一个键或一个值</p><p>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of"><code>for...of</code></a> 循环在每次迭代后会返回一个形式为[key，value]的数组。</p><p><code>Map.prototype.clear() </code>移除Map对象的所有键/值对 。</p><p><code>Map.prototype.clear()</code>如果 <code>Map</code> 对象中存在该元素，则移除它并返回 *<code>true</code>*；否则如果该元素不存在则返回 <code>*false*</code>。随后调用 <code>Map.prototype.has(key)</code> 将返回 <code>false</code></p><p><code>Map.prototype.forEach(callbackFn[,thisArg])</code>按插入顺序，为 <code>Map</code>对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。</p><p><code>Map.prototype.get(key)</code> 返回键对应的值，如果不存在，则返回undefined。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/has"><code>Map.prototype.has(key)</code></a>返回一个布尔值，表示Map实例是否包含键对应的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br><br><span class="hljs-keyword">let</span> keyObj = &#123;&#125;; <span class="hljs-comment">//可以是字符串，方法，对象</span><br><span class="hljs-keyword">let</span> keyFunc = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;<br><span class="hljs-keyword">let</span> keyString = <span class="hljs-string">&#x27;a string&#x27;</span>;<br><br><span class="hljs-comment">// 添加键</span><br>myMap.set(keyString, <span class="hljs-string">&quot;和键&#x27;a string&#x27;关联的值&quot;</span>);<br>myMap.set(keyObj, <span class="hljs-string">&quot;和键keyObj关联的值&quot;</span>);<br>myMap.set(keyFunc, <span class="hljs-string">&quot;和键keyFunc关联的值&quot;</span>);<br><br>myMap.size; <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 读取值</span><br>myMap.get(keyString);    <span class="hljs-comment">// &quot;和键&#x27;a string&#x27;关联的值&quot;</span><br>myMap.get(keyObj);       <span class="hljs-comment">// &quot;和键keyObj关联的值&quot;</span><br>myMap.get(keyFunc);      <span class="hljs-comment">// &quot;和键keyFunc关联的值&quot;</span><br><br>myMap.get(<span class="hljs-string">&#x27;a string&#x27;</span>);   <span class="hljs-comment">// &quot;和键&#x27;a string&#x27;关联的值&quot;</span><br>                         <span class="hljs-comment">// 因为keyString === &#x27;a string&#x27;</span><br>myMap.get(&#123;&#125;);           <span class="hljs-comment">// undefined, 因为keyObj !== &#123;&#125;</span><br>myMap.get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;); <span class="hljs-comment">// undefined, 因为keyFunc !== function () &#123;&#125;</span><br><br><span class="hljs-comment">////////////******///////////</span><br><span class="hljs-keyword">let</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>myMap.set(<span class="hljs-literal">NaN</span>, <span class="hljs-string">&quot;not a number&quot;</span>);<br><br>myMap.get(<span class="hljs-literal">NaN</span>); <span class="hljs-comment">// &quot;not a number&quot;</span><br><br><span class="hljs-keyword">let</span> otherNaN = <span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br>myMap.get(otherNaN); <span class="hljs-comment">// &quot;not a number&quot;</span><br></code></pre></td></tr></table></figure><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><p>通过for..of</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>myMap.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;zero&quot;</span>);<br>myMap.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;one&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> myMap) &#123;<br>  <span class="hljs-built_in">console</span>.log(key + <span class="hljs-string">&quot; = &quot;</span> + value);<br>&#125;<br><span class="hljs-comment">// 将会显示两个log。一个是&quot;0 = zero&quot;另一个是&quot;1 = one&quot;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> myMap.keys()) &#123;<br>  <span class="hljs-built_in">console</span>.log(key);<br>&#125;<br><span class="hljs-comment">// 将会显示两个log。 一个是 &quot;0&quot; 另一个是 &quot;1&quot;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> myMap.values()) &#123;<br>  <span class="hljs-built_in">console</span>.log(value);<br>&#125;<br><span class="hljs-comment">// 将会显示两个log。 一个是 &quot;zero&quot; 另一个是 &quot;one&quot;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> myMap.entries()) &#123;<br>  <span class="hljs-built_in">console</span>.log(key + <span class="hljs-string">&quot; = &quot;</span> + value);<br>&#125;<br><span class="hljs-comment">// 将会显示两个log。 一个是 &quot;0 = zero&quot; 另一个是 &quot;1 = one&quot;</span><br></code></pre></td></tr></table></figure><h4 id="通过forEach"><a href="#通过forEach" class="headerlink" title="通过forEach()"></a>通过forEach()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">myMap.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, key</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(key + <span class="hljs-string">&quot; = &quot;</span> + value);<br>&#125;)<br><span class="hljs-comment">// 将会显示两个logs。 一个是 &quot;0 = zero&quot; 另一个是 &quot;1 = one&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Symbol关键字"><a href="#Symbol关键字" class="headerlink" title="Symbol关键字"></a>Symbol关键字</h3><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。是一种类似于字符串的数据类型</p><h4 id="Symbol的特点"><a href="#Symbol的特点" class="headerlink" title="Symbol的特点"></a>Symbol的特点</h4><ul><li>Symbol的值是唯一的，用来解决命名冲突的问题</li><li>Symbol值不能与其他数据进行运算</li><li>Symbol定义的对象属性不能使用for…in遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</li></ul><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建Symbol</span><br><span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Symbol</span>();<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;第一个&#x27;</span>);<br><span class="hljs-keyword">let</span> s3 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;第二个&#x27;</span>)<br><span class="hljs-comment">//s2不等于s3</span><br><span class="hljs-comment">//Symbol.for 创建</span><br><span class="hljs-keyword">let</span> s4 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">let</span> s5 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-comment">//s4等于s5</span><br><span class="hljs-comment">//////////////////////////////////////////</span><br><span class="hljs-comment">//对象添加Symbol类型数据</span><br><span class="hljs-keyword">let</span> game = &#123;<br>    <br>&#125;<br><span class="hljs-keyword">let</span> methods = &#123;<br>    up:<span class="hljs-built_in">Symbol</span>(),<br>    down:<span class="hljs-built_in">Symbol</span>()<br>&#125;<br>game[methods.up] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我可以上升&quot;</span>);<br>&#125;<br>game[methods.down] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我可以快速下降&quot;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(game);<br><span class="hljs-comment">//方法2</span><br><span class="hljs-keyword">let</span> youxi = &#123;<br>    name:<span class="hljs-string">&quot;狼人杀&quot;</span>,<br>    [<span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;zibao&#x27;</span>)]:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我可以发言&#x27;</span>);<br>    &#125;,<br>    [<span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;zibao&#x27;</span>)]:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我可以自爆&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(youxi);<br></code></pre></td></tr></table></figure><h4 id="Symbol内置属性"><a href="#Symbol内置属性" class="headerlink" title="Symbol内置属性"></a>Symbol内置属性</h4><p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><p>引用数据类型：对象(Object)、数组(Array)、函数(Function)。</p><h2 id="迭代器（iterator）"><a href="#迭代器（iterator）" class="headerlink" title="迭代器（iterator）"></a>迭代器（iterator）</h2><p>迭代器是一个接口，为各种不同的数据提供统一的访问机制。任何数据结构只要部署iterator结构，就可以完成遍历操作</p><p>ES6新增for of，迭代器为for of服务 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//声明一个对象</span><br>        <span class="hljs-keyword">const</span> banji = &#123;<br>            name: <span class="hljs-string">&quot;终极一班&quot;</span>,<br>            stus: [<br>                <span class="hljs-string">&#x27;xiaoming&#x27;</span>,<br>                <span class="hljs-string">&#x27;xiaoning&#x27;</span>,<br>                <span class="hljs-string">&#x27;xiaotian&#x27;</span>,<br>                <span class="hljs-string">&#x27;knight&#x27;</span><br>            ],<br>            [<span class="hljs-built_in">Symbol</span>.iterator]() &#123;<br>                <span class="hljs-comment">//索引变量</span><br>                <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br>                <span class="hljs-comment">//</span><br>                <span class="hljs-keyword">let</span> _this = <span class="hljs-built_in">this</span>;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    next: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                        <span class="hljs-keyword">if</span> (index &lt; _this.stus.length) &#123;<br>                            <span class="hljs-keyword">const</span> result = &#123; <span class="hljs-attr">value</span>: _this.stus[index], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;;<br>                            <span class="hljs-comment">//下标自增</span><br>                            index++;<br>                            <span class="hljs-comment">//返回结果</span><br>                            <span class="hljs-keyword">return</span> result;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;;<br>                        &#125;<br>                    &#125;<br>                &#125;;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//遍历这个对象 </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> banji) &#123;<br>            <span class="hljs-built_in">console</span>.log(v);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>生成器其实就是一个特殊的函数，异步编程的一种解决方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> * <span class="hljs-title">gen</span>(<span class="hljs-params">arg</span>)</span>&#123; <span class="hljs-comment">//声明方式</span><br>    <span class="hljs-built_in">console</span>.log(arg);<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;2&#x27;</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;3&#x27;</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello generator&quot;</span>);<br>&#125;<br><span class="hljs-keyword">let</span> interator = gen(<span class="hljs-string">&#x27;AAA&#x27;</span>);  <span class="hljs-comment">//生成器可以传参，next也可以传参</span><br><span class="hljs-built_in">console</span>.log(inerator.next()); <span class="hljs-comment">//执行方式  返回yield后面的字面量</span><br><span class="hljs-built_in">console</span>.log(inerator.next(<span class="hljs-string">&#x27;BBB&#x27;</span>)); <span class="hljs-comment">//执行方式  &#x27;BBB&#x27;作为第一个yield的返回结果</span><br><span class="hljs-built_in">console</span>.log(inerator.next(<span class="hljs-string">&#x27;CCC&#x27;</span>)); <span class="hljs-comment">//执行方式  &#x27;CCC&#x27;将作为第二个yield的返回结果</span><br><span class="hljs-built_in">console</span>.log(inerator.next()); <span class="hljs-comment">//执行方式 </span><br><br></code></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//生成器函数在异步编程</span><br><span class="hljs-comment">//1s后输出111 2s后输出222 3s后输出333</span><br>        <span class="hljs-comment">//通过回调函数实现(回调地狱)</span><br>        <span class="hljs-comment">// setTimeout(()=&gt;&#123;</span><br>        <span class="hljs-comment">//     console.log(111);</span><br>        <span class="hljs-comment">//     setTimeout(()=&gt;&#123;</span><br>        <span class="hljs-comment">//         console.log(222);</span><br>        <span class="hljs-comment">//     &#125;,2000);</span><br>        <span class="hljs-comment">//     setTimeout(()=&gt;&#123;</span><br>        <span class="hljs-comment">//         console.log(333);</span><br>        <span class="hljs-comment">//     &#125;,3000);</span><br>        <span class="hljs-comment">// &#125;,1000);</span><br>        <span class="hljs-comment">///////////////////////////////////////</span><br>        <span class="hljs-comment">//通过生成器</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">one</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br>            &#125;,<span class="hljs-number">1000</span>)<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">two</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>)<br>            &#125;,<span class="hljs-number">2000</span>)<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">three</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">333</span>)<br>            &#125;,<span class="hljs-number">3000</span>)<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> * <span class="hljs-title">gen</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">yield</span> one();<br>            <span class="hljs-keyword">yield</span> two();<br>            <span class="hljs-keyword">yield</span> three();<br>        &#125;<br>        <span class="hljs-keyword">let</span> iterator = gen();<br>        iterator.next();<br>        iterator.next();<br>        iterator.next();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//模拟获取  用户数据  订单数据  商品数据 </span><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUsers</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;用户数据&#x27;</span>;<br>               <span class="hljs-comment">//调用 next 方法, 并且将数据传入</span><br>               iterator.next(data);<br>           &#125;, <span class="hljs-number">1000</span>);<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOrders</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;订单数据&#x27;</span>;<br>               iterator.next(data);<br>           &#125;, <span class="hljs-number">1000</span>)<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;商品数据&#x27;</span>;<br>               iterator.next(data);<br>           &#125;, <span class="hljs-number">1000</span>)<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> * <span class="hljs-title">gen</span>(<span class="hljs-params"></span>)</span>&#123;<br>           <span class="hljs-keyword">let</span> users = <span class="hljs-keyword">yield</span> getUsers();<br>           <span class="hljs-keyword">let</span> orders = <span class="hljs-keyword">yield</span> getOrders();<br>           <span class="hljs-keyword">let</span> goods = <span class="hljs-keyword">yield</span> getGoods();<br>       &#125;<br><br>       <span class="hljs-comment">//调用生成器函数</span><br>       <span class="hljs-keyword">let</span> iterator = gen();<br>       iterator.next();<br><br></code></pre></td></tr></table></figure><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>Promise是ES6引入的异步编程的新解决方案。语法上Promise是一个构造函数，用来封装异步操作并可以获取其成功或者失败的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> status = <span class="hljs-literal">false</span>;<br>     <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolove, reject</span>) </span>&#123;<br>         <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>             <span class="hljs-keyword">if</span> (status) &#123;<br>                 <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;数据库用户数据读取成功&#x27;</span>;<br>                 resolove(data);<br>             &#125;<br>             <span class="hljs-keyword">else</span>&#123;<br>                 <span class="hljs-keyword">let</span> err = <span class="hljs-string">&#x27;读取失败&#x27;</span>;<br>                 reject(err);<br>             &#125;<br>         &#125;, <span class="hljs-number">1000</span>);<br>     &#125;);<br>     p.then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>         <span class="hljs-built_in">console</span>.log(value);<br>     &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) </span>&#123;<br>         <span class="hljs-built_in">console</span>.error(reason);<br>     &#125;)<br><br></code></pre></td></tr></table></figure><p>Promise的then属性，当Promise对象调用第一个function时调用第一个函数，调用第二个function时调用第二个函数</p><h3 id="应用1：Node-js读取文件"><a href="#应用1：Node-js读取文件" class="headerlink" title="应用1：Node.js读取文件"></a>应用1：Node.js读取文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入 fs 模块</span><br> <span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// fs.readFile(&#x27;./resources/hahaha.txt&#x27;,(err,data)=&gt;&#123;</span><br><span class="hljs-comment">//     if(err) </span><br><span class="hljs-comment">//         throw err;</span><br><span class="hljs-comment">//     console.log(data.toString());</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//****************使用Promise进行封装************************\\</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)</span>&#123;<br>    fs.readFile(<span class="hljs-string">&#x27;./resources/hahaha.txts&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(err) reject(err);<br>        resolve(data)<br>    &#125;);<br>&#125;);<br>p.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123; <span class="hljs-comment">//成功时</span><br>    <span class="hljs-built_in">console</span>.log(value.toString());<br>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)</span>&#123; <span class="hljs-comment">//失败时</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;文件读取失败&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Promise-的then"><a href="#Promise-的then" class="headerlink" title="Promise 的then"></a>Promise 的then</h3><p>then()方法的返回结果是Promise对象，对象状态由回调函数的执行结果决定</p><p>1、如果或回调函数中的返回的结果是非Promise类型的属性，状态为成功，则返回的状态为(resolved)成功，返回的值为return值</p><p>2、如果返回值是Promise对象，则返回的状态为上面return的Promise对象的状态</p><p>3、如果是抛出错误，则返回的状态为失败，返回值是失败值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建 promise 对象</span><br>       <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span>&#123;<br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>               resolve(<span class="hljs-string">&#x27;用户数据&#x27;</span>);<br>               <span class="hljs-comment">// reject(&#x27;出错啦&#x27;);</span><br>           &#125;, <span class="hljs-number">1000</span>)<br>       &#125;);<br><br>       <span class="hljs-comment">//调用 then 方法  then方法的返回结果是 Promise 对象, 对象状态由回调函数的执行结果决定</span><br>       <span class="hljs-comment">//1. 如果回调函数中返回的结果是 非 promise 类型的属性, 状态为成功, 返回值为对象的成功的值</span><br><br>       <span class="hljs-comment">// const result = p.then(value =&gt; &#123;</span><br>       <span class="hljs-comment">//     console.log(value);</span><br>       <span class="hljs-comment">//     //1. 非 promise 类型的属性</span><br>       <span class="hljs-comment">//     // return &#x27;iloveyou&#x27;;</span><br>       <span class="hljs-comment">//     //2. 是 promise 对象</span><br>       <span class="hljs-comment">//     // return new Promise((resolve, reject)=&gt;&#123;</span><br>       <span class="hljs-comment">//     //     // resolve(&#x27;ok&#x27;);</span><br>       <span class="hljs-comment">//     //     reject(&#x27;error&#x27;);</span><br>       <span class="hljs-comment">//     // &#125;);</span><br>       <span class="hljs-comment">//     //3. 抛出错误</span><br>       <span class="hljs-comment">//     // throw new Error(&#x27;出错啦!&#x27;);</span><br>       <span class="hljs-comment">//     throw &#x27;出错啦!&#x27;;</span><br>       <span class="hljs-comment">// &#125;, reason=&gt;&#123;</span><br>       <span class="hljs-comment">//     console.warn(reason);</span><br>       <span class="hljs-comment">// &#125;);</span><br><br>       <span class="hljs-comment">//链式调用</span><br>       p.then(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><br>       &#125;).then(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><br>       &#125;);<br></code></pre></td></tr></table></figure><h3 id="Promise-的catch"><a href="#Promise-的catch" class="headerlink" title="Promise 的catch"></a>Promise 的catch</h3><p>用来实现失败时执行，其实用then也能做，相当于一个语法糖</p><p>//Promise更详细的课程在后面学习</p><h1 id="jsES6中的类和对象"><a href="#jsES6中的类和对象" class="headerlink" title="jsES6中的类和对象"></a>jsES6中的类和对象</h1><h2 id="创建类和对象"><a href="#创建类和对象" class="headerlink" title="创建类和对象"></a>创建类和对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uanme</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;Liudehua&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(ldh.uname);<br></code></pre></td></tr></table></figure><ol><li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li><li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li><li>多个函数方法之间不需要添加逗号分隔</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li></ol><h2 id="类中添加方法"><a href="#类中添加方法" class="headerlink" title="类中添加方法"></a>类中添加方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uanme</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">sing</span>(<span class="hljs-params">songName</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(songName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constuctor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">money</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br>son.money;<br></code></pre></td></tr></table></figure><p>子类使用super关键字访问父类的方法，这里调用父类的函数，可以是构造函数，可以是普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义了父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>&#125;<br> &#125;<br><span class="hljs-comment">//子元素继承父类</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(x, y); <span class="hljs-comment">//使用super调用了父类中的构造函数</span><br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    son.sum(); <span class="hljs-comment">//结果为3</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong> </p><ol><li>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</li><li>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</li><li>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</li></ol><p>super.父类方法名()可调用父类的普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 父类有加法方法</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>   &#125;<br> &#125;<br> <span class="hljs-comment">// 子类继承父类加法方法 同时 扩展减法方法</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-comment">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span><br>   <span class="hljs-built_in">super</span>(x, y);<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">subtract</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x - <span class="hljs-built_in">this</span>.y);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);<br>son.subtract(); <span class="hljs-comment">//2</span><br>son.sum();<span class="hljs-comment">//8</span><br></code></pre></td></tr></table></figure><h2 id="ES6中的注意点"><a href="#ES6中的注意点" class="headerlink" title="ES6中的注意点"></a>ES6中的注意点</h2><p>ES6必须先定义类，再才能实例化</p><p>类里面共有的属性和方法一定要加this</p><p>类里面的this指向问题：constructor里面的this指向创建的对象 方法中的this指向调用者</p><p>##TAB选项栏案例</p><p>#构造函数与原型（ES6之前）</p><p>##对象的三种创建方式–复习</p><ol><li><p>字面量方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br></code></pre></td></tr></table></figure></li><li><p>new关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure></li><li><p>构造函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure><h2 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h2></li></ol><h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(ldh.uname);<span class="hljs-comment">//实例成员只能通过实例化的对象来访问</span><br></code></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>ES6的静态成员通过static关键字，静态成员只能由类进行访问，它属于类，而不属于对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">Phone</span></span>&#123;<br>    <span class="hljs-keyword">static</span> name = <span class="hljs-string">&#x27;手机&#x27;</span>;<br><span class="hljs-function"><span class="hljs-title">call</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> nakiya = <span class="hljs-keyword">new</span> Phone();<br>Phone.name;<span class="hljs-comment">//手机</span><br>nakiya.name;<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br>Star.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(Star.sex);<span class="hljs-comment">//静态成员只能通过构造函数来访问</span><br></code></pre></td></tr></table></figure><h2 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h2><p>存在浪费内存的问题：每创建一个对象都要单独开辟一个空间</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106141737235.png" alt="image-20210106141737235"></p><h2 id="构造函数原型prototype"><a href="#构造函数原型prototype" class="headerlink" title="构造函数原型prototype"></a>构造函数原型prototype</h2><p>每一个构造函数都有一个prototype属性，指向另一个对象。这个prototype本身都是一个对象，这个对象的所以属性和方法，都会被构造函数所拥有</p><p>把那些不变的方法，直接定义在prototype对象上，这样所有对象的实例可以共享这些方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>   <span class="hljs-comment">//  this.sing = function() &#123;</span><br>     <span class="hljs-comment">//console.log(&#x27;我会唱歌&#x27;);</span><br>    &#125;<br>&#125;<br>Star.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//在原型对象上添加一个共有的方法</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br>ldh.sing();<br></code></pre></td></tr></table></figure><p>公共属性定义在构造函数里，公共方法放在原型对象里面</p><h2 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型 _proto_"></a>对象原型 <code>_proto_</code></h2><p>对象有一个属性<code>_proto_</code>指向构造函数的prototype原型对象，之所以可以使用构造函数prototype原型对象的属性和方法 ，就是因为对象有<code>_proto</code>_存在</p><p>​    <img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106143345685.png" alt="image-20210106143345685"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106143416554.png" alt="image-20210106143416554"></p><p>方法的查找规则：首先看ldh对象身上是否有sing方法，如果有就执行这个对象上的sing</p><p>如果没有sing这个方法，应为_proto_的存在，就去构造函数原型对象prototype身上查找</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。<br>如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。<br>如果还没有就查找原型对象的原型（<span class="hljs-built_in">Object</span>的原型对象）。<br>依此类推一直找到 <span class="hljs-built_in">Object</span> 为止（<span class="hljs-literal">null</span>）。<br>__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。<br></code></pre></td></tr></table></figure><h2 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h2><p>对象原型(<em>proto</em>)和构造函数(<em>prototype</em>)原型对象里面都有一个属性constructor属性，constructor指向构造函数本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//如果我们这样写就有问题：</span><br>Star.prototype = &#123;<br>    <span class="hljs-comment">//如果我们修改了原来的原型对象，给原型对象赋值的是一个新的对象，则必须手动让construcor指向原来的构造函数</span><br>    <span class="hljs-title">constructor</span>:<span class="hljs-title">Star</span>,//重要<br>    <span class="hljs-title">sing</span>:<span class="hljs-title">function</span>(<span class="hljs-params"></span>)&#123;<br>&#125;,<br>    movie:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106145224927.png" alt="image-20210106145224927"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106150011894.png" alt="image-20210106150011894"></p><p>原型链的作用就在于一个对象可以一层接着一层向上查找</p><p>JavaScript 成员查找机制 按照原型链的方向进行查找</p><p>1、当访问一个对象的属性（或者方法时），先查找这个对象本身有无该属性</p><p>2、如果没有就查找它的原型(<code>_proto_</code>指向的<code>prototype</code>原型对象)</p><p>3、如果还没有就查找原型对象的原型（object原型对象）</p><p>4、还是查找不到则到了最顶层null</p><p>原型对象中的this指向问题</p><p>1、在构造函数中，this指向对象实例</p><p>2、在原型对象中，原型对象函数中this指向实例对象</p><h2 id="get和set关键字"><a href="#get和set关键字" class="headerlink" title="get和set关键字"></a>get和set关键字</h2><p>get在读取属性值时会调用，set在修改属性值时会调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br>         <span class="hljs-keyword">get</span> <span class="hljs-title">price</span>() &#123;<br>             <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;价格属性被读取&quot;</span>);<br>             <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;呵呵呵&quot;</span>;<br>         &#125;<br>         <span class="hljs-keyword">set</span> <span class="hljs-title">price</span>(<span class="hljs-params">newVal</span>) &#123;<br>             <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;价格被修改&quot;</span>);<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> Phone();<br>     <span class="hljs-built_in">console</span>.log(s.price);<br>     s.price = <span class="hljs-string">&#x27;free&#x27;</span>;<br></code></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://i.loli.net/2021/01/14/8RuJGQS9hecarmE.png" alt="image.png"></p><h2 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h2><p>通过原型对象，对原来的内置对象进行扩展自定义方法，比如给数组增加自定义求偶数的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.prototype);<br><span class="hljs-built_in">Array</span>.prototype.sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt; <span class="hljs-built_in">this</span>.length;i++)&#123;<br>        sum+=<span class="hljs-built_in">this</span>[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr.sum();<br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="call-方法"><a href="#call-方法" class="headerlink" title="call()方法"></a>call()方法</h2><p>可以修改函数的this指向</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106214107229.png" alt="image-20210106214107229"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">x,y</span>)</span>&#123;<br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hahaha&quot;</span>);<br>         <span class="hljs-built_in">console</span>.log(x+y);<br>     &#125;<br>     <span class="hljs-keyword">var</span> o =&#123;<br>         name : <span class="hljs-string">&#x27;andy&#x27;</span><br>     &#125;<br>     <span class="hljs-comment">// fn.call(); 可以调用函数</span><br>     fn.call(o,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">//改变了函数的this指向 此时函数的this指向了o这个对象</span><br></code></pre></td></tr></table></figure><h2 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h2><p><code>Number.EPSILON</code>是JavaScript表示的最小精度，只要小于这个数，则代表这两个数相等</p><p>二进制和八进制</p><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 <code>0b</code>和<code>0o</code>表示。</p><p><code>Number.isFinite() </code>与<code> Number.isNaN()</code></p><p><code>Number.isFinite()</code> 用来检查一个数值是否为有限的<br><code>Number.isNaN()</code> 用来检查一个值是否为 NaN</p><p><code>Number.parseInt()</code> 与 <code>Number.parseFloat()</code></p><p>ES6 将全局方法 parseInt和 parseFloat，移植到 Number对象上面，使用不变。</p><p><code>Math.trunc</code></p><p>用于去除一个数的小数部分，返回整数部分。</p><p><code>Number.isInteger</code></p><p><code>Number.isInteger()</code> 用来判断一个数值是否为整数</p><h2 id="对象方法扩展"><a href="#对象方法扩展" class="headerlink" title="对象方法扩展"></a>对象方法扩展</h2><p><code>Object.is</code>判断两个值是否完全相等</p><p>两个NaN也是相等的，用===返回false</p><p><code>Object.assign</code>用于对象的合并</p><p><code>Object.assign(obj1,obj2)</code>   <code>obj2</code>合并<code>obj1</code> </p><p><code>Object.SetPrototypeof</code> 设置原型对象</p><p><code>Object.getPrototypeof</code> 获取原型对象</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>模块化是指一个大的程序文件，拆分成许多小的文件，然后将小的文件合并</p><p>模块化的好处：</p><ul><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ul><p>暴露方法</p><h3 id="分别暴露"><a href="#分别暴露" class="headerlink" title="分别暴露"></a>分别暴露</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> shool = <span class="hljs-string">&#x27;尚硅谷&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">teach</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;哈哈哈&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="统一暴露"><a href="#统一暴露" class="headerlink" title="统一暴露"></a>统一暴露</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">let</span> shool = <span class="hljs-string">&#x27;尚硅谷&#x27;</span>; <br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">teach</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;哈哈哈&quot;</span>);<br>&#125;<br><span class="hljs-keyword">export</span>&#123;shool,teach&#125;;<br></code></pre></td></tr></table></figure><h3 id="默认暴露"><a href="#默认暴露" class="headerlink" title="默认暴露"></a>默认暴露</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    school :<span class="hljs-string">&#x27;ATGUIGU&#x27;</span>,<br>    change: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;哈哈哈&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通用导入方式"><a href="#通用导入方式" class="headerlink" title="通用导入方式"></a>通用导入方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> m1 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/js/m1.js&quot;</span> <span class="hljs-comment">//m1是别名，重名时也可以这样用</span><br></code></pre></td></tr></table></figure><h3 id="解构赋值形势"><a href="#解构赋值形势" class="headerlink" title="解构赋值形势"></a>解构赋值形势</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;shool,teach&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/js/m1.js&quot;</span><br></code></pre></td></tr></table></figure><p>并且可以直接用</p><h3 id="默认暴露时如何导入"><a href="#默认暴露时如何导入" class="headerlink" title="默认暴露时如何导入"></a>默认暴露时如何导入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> m3&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/js/m1.js&quot;</span><br></code></pre></td></tr></table></figure><h3 id="简便导入"><a href="#简便导入" class="headerlink" title="简便导入"></a>简便导入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> m3 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/js/m1.js&quot;</span>; <span class="hljs-comment">//只针对默认暴露才行，直接写别名</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node.js(持续更新)</title>
    <link href="/2021/01/15/node%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/15/node%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js基础"><a href="#Node-js基础" class="headerlink" title="Node.js基础"></a>Node.js基础</h1><h2 id="npm包管理"><a href="#npm包管理" class="headerlink" title="npm包管理"></a>npm包管理</h2><h3 id="基于CommonJS规范"><a href="#基于CommonJS规范" class="headerlink" title="基于CommonJS规范"></a>基于CommonJS规范</h3><ul><li>内置的Node.js：在node.js官方文档可以看到</li><li>第三方的Node.js：通过npm进行安装</li><li>自定义的Node.js模块  ：通过common.js规范暴露导入</li></ul><h3 id="NPM-Node-Package-Manager"><a href="#NPM-Node-Package-Manager" class="headerlink" title="NPM: Node Package Manager"></a>NPM: Node Package Manager</h3><h4 id="全局安装package"><a href="#全局安装package" class="headerlink" title="全局安装package"></a>全局安装package</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ npm install <span class="hljs-keyword">forever</span> <span class="hljs-comment">--global (-g)</span><br>$ <span class="hljs-keyword">forever</span><br>$ npm uninstall <span class="hljs-keyword">forever</span> <span class="hljs-comment">--global</span><br>$ <span class="hljs-keyword">forever</span><br></code></pre></td></tr></table></figure><p><strong>全局安装包的目录</strong></p><p>Windows</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\你</span>的用户名<span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\R</span>oaming<span class="hljs-symbol">\n</span>pm<span class="hljs-symbol">\n</span>ode_modules<br></code></pre></td></tr></table></figure><h4 id="本地安装package"><a href="#本地安装package" class="headerlink" title="本地安装package"></a>本地安装package</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> ~/desktop<br><span class="hljs-variable">$</span> mkdir <span class="hljs-built_in">gp</span><span class="hljs-literal">-project</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> <span class="hljs-built_in">gp</span><span class="hljs-literal">-project</span><br><span class="hljs-variable">$</span> npm install underscore<br><span class="hljs-variable">$</span> npm list (<span class="hljs-built_in">ls</span>)<br></code></pre></td></tr></table></figure><h4 id="package-json初始化"><a href="#package-json初始化" class="headerlink" title="package.json初始化"></a>package.json初始化</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">pwd</span><br><span class="hljs-variable">$</span> npm init <span class="hljs-literal">-y</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> package.json<br></code></pre></td></tr></table></figure><h4 id="使用package-json"><a href="#使用package-json" class="headerlink" title="使用package.json"></a>使用package.json</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> npm install underscore -<span class="hljs-literal">-save</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> package.json<br><span class="hljs-variable">$</span> npm install lodash -<span class="hljs-literal">-save</span><span class="hljs-literal">-dev</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> package.json<br><span class="hljs-variable">$</span> <span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> node_modules<br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br><span class="hljs-variable">$</span> npm install<br><span class="hljs-variable">$</span> npm uninstall underscore -<span class="hljs-literal">-save</span><br><span class="hljs-variable">$</span> npm list | grep underscore<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> package.json<br></code></pre></td></tr></table></figure><h4 id="安装指定版本的包"><a href="#安装指定版本的包" class="headerlink" title="安装指定版本的包"></a>安装指定版本的包</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>pwd<br><span class="hljs-variable">$ </span>npm list<br><span class="hljs-variable">$ </span>npm info underscore<br><span class="hljs-variable">$ </span>npm view underscore versions<br><span class="hljs-variable">$ </span>npm install underscore<span class="hljs-variable">@1</span>.<span class="hljs-number">8.0</span><br><span class="hljs-variable">$ </span>npm list<br><span class="hljs-variable">$ </span>npm uninstall underscore<br><span class="hljs-variable">$ </span>npm list<br></code></pre></td></tr></table></figure><h5 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h5><p>如何分析，例如13.4.6分为major: 13, minor：4，patch：6</p><p><img src="https://i.loli.net/2021/01/15/RG2jPpcAf1tzrw8.png" alt="捕获.PNG"></p><p>这里^代表的只管理主版本号</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210115173728200.png" alt="image-20210115173728200"></p><p>~表示只管理主版本号和次版本号</p><p>不指定版本，直接写*表示最新版本</p><p>如果没有~和^表示版本号固定，写的啥就是啥</p><h4 id="更新本地安装的包"><a href="#更新本地安装的包" class="headerlink" title="更新本地安装的包"></a>更新本地安装的包</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> npm info underscore<br><span class="hljs-symbol">$</span> npm view underscore versions   查看版本<br><span class="hljs-symbol">$</span> npm install underscore@<span class="hljs-number">1.4</span><span class="hljs-number">.4</span> --save-dev<br><span class="hljs-symbol">$</span> npm list | grep gulp<br><span class="hljs-symbol">$</span> npm outdated <span class="hljs-comment">//~2.0.0表示patch, ^2.0.0表示minor * 表示xx最新版本</span><br><span class="hljs-symbol">$</span> npm list | grep gulp<br><span class="hljs-symbol">$</span> npm update<br></code></pre></td></tr></table></figure><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm cache clean <span class="hljs-comment">--force</span><br></code></pre></td></tr></table></figure><p>更多请参考老师的博客<a href="https://lurongtao.gitee.io/felixbooks-gp19-node.js/basics/01-Node.js%E5%9F%BA%E7%A1%80.html">https://lurongtao.gitee.io/felixbooks-gp19-node.js/basics/01-Node.js%E5%9F%BA%E7%A1%80.html</a></p><h2 id="node-js内置模块"><a href="#node-js内置模块" class="headerlink" title="node.js内置模块"></a>node.js内置模块</h2><h3 id="url方法"><a href="#url方法" class="headerlink" title="url方法"></a>url方法</h3><p>记录js日志的工具log4js</p><h4 id="parse方法"><a href="#parse方法" class="headerlink" title="parse方法"></a>parse方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-keyword">const</span> log4js = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;log4js&quot;</span>);<br>log4js.configure(&#123;<br>    appenders: &#123; <span class="hljs-attr">cheese</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;cheese.log&quot;</span> &#125; &#125;,<br>    categories: &#123; <span class="hljs-attr">default</span>: &#123; <span class="hljs-attr">appenders</span>: [<span class="hljs-string">&quot;cheese&quot;</span>], <span class="hljs-attr">level</span>: <span class="hljs-string">&quot;error&quot;</span> &#125; &#125;<br>  &#125;);<span class="hljs-comment">//配置</span><br><span class="hljs-keyword">var</span> logger = log4js.getLogger(<span class="hljs-string">&#x27;cheese&#x27;</span>);<br>logger.level = <span class="hljs-string">&quot;debug&quot;</span>;<br><span class="hljs-keyword">const</span> urlString = <span class="hljs-string">&#x27;http://www.baidu.com:443/path/index.html?id=2#tag=3&#x27;</span>;<br>logger.debug(url.parse(urlString));<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">[2021-01-15T21:08:33.877] [DEBUG] cheese - Url &#123;<br>  protocol: &#x27;http:&#x27;,<br>  slashes: true,<br>  auth: null,<br>  host: &#x27;www.baidu.com:443&#x27;,<br>  port: &#x27;443&#x27;,<br>  hostname: &#x27;www.baidu.com&#x27;,<br>  hash: &#x27;#tag=3&#x27;,<br>  search: &#x27;?id=2&#x27;,<br>  query: &#x27;id=2&#x27;,<br>  pathname: &#x27;/path/index.html&#x27;,<br>  path: &#x27;/path/index.html?id=2&#x27;,<br>  href: &#x27;http://www.baidu.com:443/path/index.html?id=2#tag=3&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  protocol: <span class="hljs-string">&#x27;http:&#x27;</span>,<br>  slashes: <span class="hljs-literal">true</span>,<br>  auth: <span class="hljs-literal">null</span>,<br>  host: <span class="hljs-string">&#x27;www.baidu.com:443&#x27;</span>,<br>  port: <span class="hljs-string">&#x27;443&#x27;</span>,<br>  hostname: <span class="hljs-string">&#x27;www.baidu.com&#x27;</span>,<br>  hash: <span class="hljs-string">&#x27;#tag=3&#x27;</span>,<br>  search: <span class="hljs-string">&#x27;?id=2&#x27;</span>,<br>  query: <span class="hljs-string">&#x27;id=2&#x27;</span>,<br>  pathname: <span class="hljs-string">&#x27;/path/index.html&#x27;</span>,<br>  path: <span class="hljs-string">&#x27;/path/index.html?id=2&#x27;</span>,<br>  href: <span class="hljs-string">&#x27;http://www.baidu.com:443/path/index.html?id=2#tag=3&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[2021-01-15T21:14:30.478] [DEBUG] cheese - http://www.baidu.com:443/path/index.html?id=2#tag=3<br></code></pre></td></tr></table></figure><h4 id="resolve方法"><a href="#resolve方法" class="headerlink" title="resolve方法"></a>resolve方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<br><span class="hljs-keyword">var</span> a = url.resolve(<span class="hljs-string">&#x27;/one/two/three&#x27;</span>, <span class="hljs-string">&#x27;four&#x27;</span>)<br><span class="hljs-keyword">var</span> b = url.resolve(<span class="hljs-string">&#x27;http://example.com/&#x27;</span>, <span class="hljs-string">&#x27;/one&#x27;</span>)<br><span class="hljs-keyword">var</span> c = url.resolve(<span class="hljs-string">&#x27;http://example.com/one&#x27;</span>, <span class="hljs-string">&#x27;/two&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(a + <span class="hljs-string">&quot;,&quot;</span> + b + <span class="hljs-string">&quot;,&quot;</span> + c)<br></code></pre></td></tr></table></figure><p>结果：<code>/one/two/four,http://example.com/one,http://example.com/two</code></p><h4 id="URLSearchParams方法"><a href="#URLSearchParams方法" class="headerlink" title="URLSearchParams方法"></a>URLSearchParams方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> urlParms = <span class="hljs-keyword">new</span> URLSearchParams(url.parse(urlString).search);<br><span class="hljs-built_in">console</span>.log(urlParms.get(<span class="hljs-string">&#x27;id&#x27;</span>));<span class="hljs-comment">//获取Url的相关参数</span><br></code></pre></td></tr></table></figure><h3 id="http方法"><a href="#http方法" class="headerlink" title="http方法"></a>http方法</h3><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> logger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../utils/log&#x27;</span>)<br><span class="hljs-keyword">const</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)<br><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> https = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;https&#x27;</span>)<br><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// const url = request.url</span><br>  <span class="hljs-comment">// logger.debug(response)</span><br>  <span class="hljs-comment">// debugger;</span><br>  <span class="hljs-comment">// let data = &#x27;&#x27;</span><br>  <span class="hljs-comment">// request.on(&#x27;data&#x27;, (chunk) =&gt; &#123;</span><br>  <span class="hljs-comment">//   data += chunk</span><br>  <span class="hljs-comment">// &#125;)</span><br>  <span class="hljs-comment">// request.on(&#x27;end&#x27;, () =&gt; &#123;</span><br>    <br>  <span class="hljs-comment">// &#125;)</span><br><br>  https.get(<span class="hljs-string">&#x27;https://www.xiaomiyoupin.com/mtop/mf/cat/list&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;&#x27;</span><br>    result.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>      data += chunk<br>    &#125;)<br>    result.on(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      response.writeHead(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span><br>      &#125;)<br>      response.write(data)<br>      response.end()<br>    &#125;)<br>  &#125;)<br><br>&#125;)<br><br>server.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;localhost:8080&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)<br><br><span class="hljs-keyword">const</span> postData = querystring.stringify(&#123;<br>  province: <span class="hljs-string">&#x27;上海&#x27;</span>,<br>  city: <span class="hljs-string">&#x27;上海&#x27;</span>,<br>  district: <span class="hljs-string">&#x27;宝山区&#x27;</span>,<br>  address: <span class="hljs-string">&#x27;同济支路199号智慧七立方3号楼2-4层&#x27;</span>,<br>  latitude: <span class="hljs-number">43.0</span>,<br>  longitude: <span class="hljs-number">160.0</span>,<br>  message: <span class="hljs-string">&#x27;求购一条小鱼&#x27;</span>,<br>  contact: <span class="hljs-string">&#x27;13666666&#x27;</span>,<br>  type: <span class="hljs-string">&#x27;sell&#x27;</span>,<br>  time: <span class="hljs-number">1571217561</span><br>&#125;)<br><br><span class="hljs-keyword">const</span> options = &#123;<br>  protocol: <span class="hljs-string">&#x27;http:&#x27;</span>,<br>  hostname: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  method: <span class="hljs-string">&#x27;post&#x27;</span>,<br>  port: <span class="hljs-number">3000</span>,<br>  path: <span class="hljs-string">&#x27;/data&#x27;</span>,<br>  headers: &#123;<br>    <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>    <span class="hljs-string">&#x27;Content-Length&#x27;</span>: Buffer.byteLength(postData)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> request = http.request(options, <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <br>  &#125;)<br>  request.write(postData)<br>  request.end()<br><br>  res.end()<br>&#125;)<br><br>server.listen(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax(持续更新)</title>
    <link href="/2021/01/13/Ajax/"/>
    <url>/2021/01/13/Ajax/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>它是浏览器提供的一套方法，可以实现页面无刷新更新数据</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>页面上拉加载更多数据</li><li>列表数据无刷新分页</li><li>表单项离开焦点数据验证</li><li>搜索文字自动提示</li></ul><p>Ajax运行原理</p><p><img src="https://i.loli.net/2021/01/14/SOE7DUVIvBPLZex.png" alt="image-20210111200420944.png"></p><h2 id="XML-简介（历史）"><a href="#XML-简介（历史）" class="headerlink" title="XML 简介（历史）"></a>XML 简介（历史）</h2><p>xml 可扩展标记语言，XML被设计用来传输和存储数据，HTML有预定义标签，而XML没有</p><p>XML被用来Ajax与后端交换数据，现在使用的是<code>json</code>数据</p><h2 id="Ajax的特点"><a href="#Ajax的特点" class="headerlink" title="Ajax的特点"></a>Ajax的特点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>无需刷新页面而与服务器端进行通信</li><li>允许根据用户事件来更新部分页面内容</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>没有浏览历史，不可以回退</li><li>存在跨域问题</li><li>对搜索引擎不太友好，因为是动态创建的，所以爬虫不到</li></ul><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>规定了浏览器与万维网服务器之间互相通信的规则</p><p> 分为请求报文和响应报文</p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p><img src="https://i.loli.net/2021/01/14/A6WEXixneogLvw5.png" alt="image.png"></p><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p><img src="https://i.loli.net/2021/01/14/wcLuIHv14StglZB.png" alt="image.png"></p><h2 id="express基本使用"><a href="#express基本使用" class="headerlink" title="express基本使用"></a>express基本使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2. 创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3. 创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应</span><br>    response.send(<span class="hljs-string">&#x27;HELLO EXPRESS&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//4. 监听端口启动服务</span><br>app.listen(<span class="hljs-number">8001</span>, <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务已经启动, 8001 端口监听中....&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="AJAX请求基本操作"><a href="#AJAX请求基本操作" class="headerlink" title="AJAX请求基本操作"></a>AJAX请求基本操作</h2><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//创建对象</span><br>            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>            <span class="hljs-comment">//初始化 设置请求方法和url</span><br>            xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:8001/server&#x27;</span>);<br>            <span class="hljs-comment">//发送</span><br>            xhr.send();<br>            <span class="hljs-comment">//事件绑定 处理服务端的结果</span><br>            xhr.onreadystatechange =<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>)&#123; <span class="hljs-comment">//当为4时 服务端返回了所以结果</span><br>                    <span class="hljs-keyword">if</span>(xhr.status&gt;=<span class="hljs-number">200</span>&amp;&amp;xhr.status&lt;<span class="hljs-number">300</span>)<br>                        <span class="hljs-comment">//处理结果</span><br>                        <span class="hljs-built_in">console</span>.log(xhr.status);<br>                        <span class="hljs-built_in">console</span>.log(xhr.statusText);<br>                        <span class="hljs-built_in">console</span>.log(xhr.getAllResponseHeaders());<br>                        <span class="hljs-built_in">console</span>.log(xhr.response);<br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p>和get请求基本一样，要在服务端要定义<code>app.post</code></p><h3 id="如何接收服务端响应的json数据格式的数据"><a href="#如何接收服务端响应的json数据格式的数据" class="headerlink" title="如何接收服务端响应的json数据格式的数据"></a>如何接收服务端响应的json数据格式的数据</h3><p>通过Ajax设置接收的数据格式为<code>xhr.responseType = &#39;json&#39;</code>，即可直接得到json数据格式的数据，node.js响应的只能是字符串或者是buffer</p><h3 id="如何解决IE缓存问题"><a href="#如何解决IE缓存问题" class="headerlink" title="如何解决IE缓存问题"></a>如何解决IE缓存问题</h3><p><code>xhr.open(&quot;GET&quot;,&#39;http://127.0.0.1:8000/ie?t=&#39;+Data.now())</code></p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 超时</span><br>xhr.timeout = <span class="hljs-number">2000</span>；<br>xhr.ontimeout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-string">&quot;请求超时&quot;</span>);<br>&#125;<br><span class="hljs-comment">//网络异常</span><br>xhr.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-string">&quot;你的网络似乎出了问题&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><p>用<code>xhr.abort()</code>方法可以取消请求</p><h3 id="重复请求"><a href="#重复请求" class="headerlink" title="重复请求"></a>重复请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">      <span class="hljs-comment">//获取元素对象</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">let</span> x = <span class="hljs-literal">null</span>;</span><br><span class="javascript">      <span class="hljs-comment">//标识变量</span></span><br><span class="javascript">      <span class="hljs-keyword">let</span> isSending = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 是否正在发送AJAX请求</span></span><br><span class="javascript">      btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">//判断标识变量</span></span><br><span class="javascript">          <span class="hljs-keyword">if</span>(isSending) x.abort();<span class="hljs-comment">// 如果正在发送, 则取消该请求, 创建一个新的请求</span></span><br><span class="javascript">          x = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript">          <span class="hljs-comment">//修改 标识变量的值</span></span><br><span class="javascript">          isSending = <span class="hljs-literal">true</span>;</span><br><span class="javascript">          x.open(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br>          x.send();<br><span class="javascript">          x.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">              <span class="hljs-keyword">if</span>(x.readyState === <span class="hljs-number">4</span>)&#123;</span><br><span class="javascript">                  <span class="hljs-comment">//修改标识变量</span></span><br><span class="javascript">                  isSending = <span class="hljs-literal">false</span>;</span><br>              &#125;<br>          &#125;<br>      &#125;<br><br><span class="javascript">      <span class="hljs-comment">// abort</span></span><br><span class="javascript">      btns[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>          x.abort();<br>      &#125;<br></code></pre></td></tr></table></figure><p>通过一个状态表示即可进行判断</p><h2 id="JQuery-Ajax"><a href="#JQuery-Ajax" class="headerlink" title="JQuery-Ajax"></a>JQuery-Ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          $.get(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>              <span class="hljs-built_in">console</span>.log(data);<br>          &#125;,<span class="hljs-string">&#x27;json&#x27;</span>);<br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          $.post(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>              <span class="hljs-built_in">console</span>.log(data);<br>          &#125;);<br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          $.ajax(&#123;<br>              <span class="hljs-comment">//url</span><br>              url: <span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,<br>              <span class="hljs-comment">//参数</span><br>              data: &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;,<br>              <span class="hljs-comment">//请求类型</span><br>              type: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>              <span class="hljs-comment">//响应体结果</span><br>              dataType: <span class="hljs-string">&#x27;json&#x27;</span>,<br>              <span class="hljs-comment">//成功的回调</span><br>              success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>                  <span class="hljs-built_in">console</span>.log(data);<br>              &#125;,<br>              <span class="hljs-comment">//超时时间</span><br>              timeout: <span class="hljs-number">2000</span>,<br>              <span class="hljs-comment">//失败的回调</span><br>              error: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;出错啦!!&#x27;</span>);<br>              &#125;,<br>              <span class="hljs-comment">//头信息</span><br>              headers: &#123;<br>                  c:<span class="hljs-number">300</span>,<br>                  d:<span class="hljs-number">400</span><br>              &#125;<br>          &#125;);<br>      &#125;);<br></code></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>目前最热门的Ajax请求库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">// https://github.com/axios/axios</span><br><span class="hljs-comment">// get方法</span><br>        <span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);<br><br>        <span class="hljs-comment">//配置 baseURL</span><br>        axios.defaults.baseURL = <span class="hljs-string">&#x27;http://127.0.0.1:8000&#x27;</span>;<br><br>        btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//GET 请求</span><br>            axios.get(<span class="hljs-string">&#x27;/axios-server&#x27;</span>, &#123;<br>                <span class="hljs-comment">//url 参数</span><br>                params: &#123;<br>                    id: <span class="hljs-number">100</span>,<br>                    vip: <span class="hljs-number">7</span><br>                &#125;,<br>                <span class="hljs-comment">//请求头信息</span><br>                headers: &#123;<br>                    name: <span class="hljs-string">&#x27;atguigu&#x27;</span>,<br>                    age: <span class="hljs-number">20</span><br>                &#125;<br>            &#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(value);<br>            &#125;);<br>        &#125;<br><span class="hljs-comment">//post方法</span><br>        btns[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            axios.post(<span class="hljs-string">&#x27;/axios-server&#x27;</span>, &#123;<br>                username: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>                password: <span class="hljs-string">&#x27;admin&#x27;</span><br>            &#125;, &#123;<br>                <span class="hljs-comment">//url </span><br>                params: &#123;<br>                    id: <span class="hljs-number">200</span>,<br>                    vip: <span class="hljs-number">9</span><br>                &#125;,<br>                <span class="hljs-comment">//请求头参数</span><br>                headers: &#123;<br>                    height: <span class="hljs-number">180</span>,<br>                    weight: <span class="hljs-number">180</span>,<br>                &#125;<br>            &#125;);<br>        &#125;<br>    <br>        btns[<span class="hljs-number">2</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            axios(&#123;<br>                <span class="hljs-comment">//请求方法</span><br>                method : <span class="hljs-string">&#x27;POST&#x27;</span>,<br>                <span class="hljs-comment">//url</span><br>                url: <span class="hljs-string">&#x27;/axios-server&#x27;</span>,<br>                <span class="hljs-comment">//url参数</span><br>                params: &#123;<br>                    vip:<span class="hljs-number">10</span>,<br>                    level:<span class="hljs-number">30</span><br>                &#125;,<br>                <span class="hljs-comment">//头信息</span><br>                headers: &#123;<br>                    a:<span class="hljs-number">100</span>,<br>                    b:<span class="hljs-number">200</span><br>                &#125;,<br>                <span class="hljs-comment">//请求体参数</span><br>                data: &#123;<br>                    username: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>                    password: <span class="hljs-string">&#x27;admin&#x27;</span><br>                &#125;<br>            &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>                <span class="hljs-comment">//响应状态码</span><br>                <span class="hljs-built_in">console</span>.log(response.status);<br>                <span class="hljs-comment">//响应状态字符串</span><br>                <span class="hljs-built_in">console</span>.log(response.statusText);<br>                <span class="hljs-comment">//响应头信息</span><br>                <span class="hljs-built_in">console</span>.log(response.headers);<br>                <span class="hljs-comment">//响应体</span><br>                <span class="hljs-built_in">console</span>.log(response.data);<br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//文档地址</span><br>      <span class="hljs-comment">//https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch</span><br>      <br>      <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br><br>      btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          fetch(<span class="hljs-string">&#x27;http://127.0.0.1:8000/fetch-server?vip=10&#x27;</span>, &#123;<br>              <span class="hljs-comment">//请求方法</span><br>              method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>              <span class="hljs-comment">//请求头</span><br>              headers: &#123;<br>                  name:<span class="hljs-string">&#x27;atguigu&#x27;</span><br>              &#125;,<br>              <span class="hljs-comment">//请求体</span><br>              body: <span class="hljs-string">&#x27;username=admin&amp;password=admin&#x27;</span><br>          &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>              <span class="hljs-comment">// return response.text();</span><br>              <span class="hljs-keyword">return</span> response.json();<br>          &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>              <span class="hljs-built_in">console</span>.log(response);<br>          &#125;);<br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>由Netscape公司提出，是浏览器的一种安全策略</p><p>同源：协议，域名，端口号必须相同，违背同源策略就是跨域</p><h3 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h3><h3 id="使用Jsonp"><a href="#使用Jsonp" class="headerlink" title="使用Jsonp"></a>使用Jsonp</h3><script>本身具有跨域特性，但是跨域返回的必须是js代码。这样前端浏览器才能解析### 使用JQuery### 使用CORS不需要在客服端做任何特殊操作，完全在服务端中进行处理，支持get和post请求。跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有哪有访问权限访问哪些资源<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">Access-Control-Allow-Origin: &lt;origin&gt; | *<br>    <span class="hljs-comment">//*表示通配符，表示所以网站都可以跨域访问</span><br>Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header <span class="hljs-comment">//这样浏览器就能够通过getResponseHeader访问X-My-Custom-Header和 X-Another-Custom-Header 响应头了。</span><br>Access-Control-Max-Age: &lt;delta-seconds&gt; <span class="hljs-comment">//delta-seconds 参数表示preflight请求的结果在多少秒内有效。</span><br>Access-Control-Allow-Methods: &lt;method&gt;[, &lt;method&gt;]* 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法。<br>Access-Control-Allow-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]* <span class="hljs-comment">//Access-Control-Allow-Headers 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css(持续更新)</title>
    <link href="/2021/01/12/css/"/>
    <url>/2021/01/12/css/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:red;<br>     <span class="hljs-comment">/*这是另一个注释*/</span><br>    <span class="hljs-attribute">text-align</span>:center;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="id和class选择器"><a href="#id和class选择器" class="headerlink" title="id和class选择器"></a>id和class选择器</h2><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p><p>HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。</p><p>以下的样式规则应用于元素属性 id=”para1”</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*#是id选择器*/</span><br><span class="hljs-selector-id">#para1</span><br>&#123;<br>    <span class="hljs-attribute">text-align</span>:center;<br>    <span class="hljs-attribute">color</span>:red;<br>&#125;<br><span class="hljs-comment">/* ID属性不要以数字开头，数字开头的ID在 Mozilla/Firefox 浏览器中不起作用。*/</span><br></code></pre></td></tr></table></figure><h2 id="CSS创建"><a href="#CSS创建" class="headerlink" title="CSS创建"></a>CSS创建</h2><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><p>即从外部引入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">head</span>&gt;<br>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;<br>&lt;/<span class="hljs-selector-tag">head</span>&gt;<br><span class="hljs-comment">/*浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .css 扩展名进行保存。*/</span><br></code></pre></td></tr></table></figure><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">hr</span> &#123;<span class="hljs-attribute">color</span>:sienna;&#125;</span><br><span class="css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">20px</span>;&#125;</span><br><span class="css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;images/back40.gif&quot;</span>);&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：</p><p><code>&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt;</code></p><h2 id="多重样式优先级（！！！重要）"><a href="#多重样式优先级（！！！重要）" class="headerlink" title="多重样式优先级（！！！重要）"></a>多重样式优先级（！！！重要）</h2><p><strong>内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式</strong></p><p>优先级是浏览器是通过判断哪些属性值与元素最相关以决定并应用到该元素上的。优先级仅由选择器组成的匹配规则决定的。优先级就是分配给指定的CSS声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。</p><h3 id="css-7-种选择器："><a href="#css-7-种选择器：" class="headerlink" title="css 7 种选择器："></a>css 7 种选择器：</h3><ul><li>id选择器</li><li>类选择器</li><li>伪类选择器</li><li>属性选择器</li><li>伪元素选择器</li><li>通配选择器</li><li>标签选择器</li></ul><p>CSS 优先规则：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">内联样式 &gt; <span class="hljs-built_in">id</span> 选择器 &gt; 类选择器 = 伪类选择器 = 属性选择器 &gt; 标签选择器 = 伪元素选择器<br></code></pre></td></tr></table></figure><h3 id="important-规则例外"><a href="#important-规则例外" class="headerlink" title="!important 规则例外"></a>!important 规则例外</h3><p>当 !important 规则被应用在一个样式声明中时,该样式声明会覆盖CSS中任何其他的声明, 无论它处在声明列表中的哪里. 尽管如此, !important规则还是与优先级毫无关系.使用 !important 不是一个好习惯，因为它改变了你样式表本来的级联规则，从而使其难以调试。</p><p>一些经验法则：</p><ul><li><strong>Always</strong> 要优化考虑使用样式规则的优先级来解决问题而不是 <code>!important</code></li><li><strong>Only</strong> 只在需要覆盖全站或外部 css（例如引用的 ExtJs 或者 YUI ）的特定页面中使用 <code>!important</code></li><li><strong>Never</strong> 永远不要在全站范围的 css 上使用<code> !important</code></li><li><strong>Never</strong> 永远不要在你的插件中使用 <code>!important</code></li></ul><h3 id="权重计算"><a href="#权重计算" class="headerlink" title="权重计算:"></a>权重计算:<img src="https://www.runoob.com/wp-content/uploads/2017/06/jc6_002_thumb.png" alt="img"></h3><p>解释：</p><ul><li> \1. 内联样式表的权值最高 1000；</li><li> \2. ID 选择器的权值为 100</li><li> \3. Class 类选择器的权值为 10</li><li> \4. HTML 标签选择器的权值为 1</li></ul><h3 id="CSS-优先级法则："><a href="#CSS-优先级法则：" class="headerlink" title="CSS 优先级法则："></a>CSS 优先级法则：</h3><ul><li> A 选择器都有一个权值，权值越大越优先；</li><li> B 当权值相等时，后出现的样式表设置要优于先出现的样式表设置；</li><li> C 创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；</li><li> D 继承的CSS 样式不如后来指定的CSS 样式；</li><li>E 在同一组属性设置中标有“!important”规则的优先级最大；示例如下：<a href="https://c.runoob.com/codedemo/3049">https://c.runoob.com/codedemo/3049</a><br> 结果：在Firefox 下显示为蓝色；在IE 6 下显示为红色；</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2017/06/css_weight.png" alt="img"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="所以css背景属性"><a href="#所以css背景属性" class="headerlink" title="所以css背景属性"></a>所以css背景属性</h3><table><thead><tr><th><a href="https://www.runoob.com/cssref/css3-pr-background.html">background</a></th><th>简写属性，作用是将背景属性设置在一个声明中。</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/pr-background-attachment.html">background-attachment</a></td><td>背景图像是否固定或者随着页面的其余部分滚动。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-background-color.html">background-color</a></td><td>设置元素的背景颜色。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-background-image.html">background-image</a></td><td>把图像设置为背景。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-background-position.html">background-position</a></td><td>设置背景图像的起始位置。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-background-repeat.html">background-repeat</a></td><td>设置背景图像是否及如何重复。</td></tr></tbody></table><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="文本的对齐方式"><a href="#文本的对齐方式" class="headerlink" title="文本的对齐方式"></a>文本的对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">text-align</span>:center;&#125; <span class="hljs-comment">/*标题居中*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.date</span> &#123;<span class="hljs-attribute">text-align</span>:right;&#125;<span class="hljs-comment">/*时间居右*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.main</span> &#123;<span class="hljs-attribute">text-align</span>:justify;&#125;<span class="hljs-comment">/*左右外边距对其*/</span><br></code></pre></td></tr></table></figure><h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><p>text-decoration 属性用来设置或删除文本的装饰。从设计的角度看 text-decoration属性主要是用来删除链接的下划线：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">text-decoration</span>:none;&#125; <span class="hljs-comment">/*删除下划线*/</span><br><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">text-decoration</span>:overline;&#125;<span class="hljs-comment">/*居上线*/</span><br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">text-decoration</span>:line-through;&#125;<span class="hljs-comment">/*冲过中间线*/</span><br><span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">text-decoration</span>:underline;&#125;<span class="hljs-comment">/*下划线*/</span><br></code></pre></td></tr></table></figure><h3 id="文本转换"><a href="#文本转换" class="headerlink" title="文本转换"></a>文本转换</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.uppercase</span> &#123;<span class="hljs-attribute">text-transform</span>:uppercase;&#125; <span class="hljs-comment">/*大写*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.lowercase</span> &#123;<span class="hljs-attribute">text-transform</span>:lowercase;&#125;<span class="hljs-comment">/*小写*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.capitalize</span> &#123;<span class="hljs-attribute">text-transform</span>:capitalize;&#125;<span class="hljs-comment">/*首字母大写*/</span><br></code></pre></td></tr></table></figure><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">text-indent</span>:<span class="hljs-number">50px</span>;&#125; <span class="hljs-comment">/*第一行缩进50px*/</span><br></code></pre></td></tr></table></figure><h3 id="所有css文本属性"><a href="#所有css文本属性" class="headerlink" title="所有css文本属性"></a>所有css文本属性</h3><table><thead><tr><th><a href="https://www.runoob.com/cssref/pr-text-color.html">color</a></th><th>设置文本颜色</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/pr-text-direction.html">direction</a></td><td>设置文本方向。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-letter-spacing.html">letter-spacing</a></td><td>设置字符间距</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-line-height.html">line-height</a></td><td>设置行高</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-text-align.html">text-align</a>·</td><td>对齐元素中的文本</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-text-decoration.html">text-decoration</a></td><td>向文本添加修饰</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-text-indent.html">text-indent</a></td><td>缩进元素中文本的首行</td></tr><tr><td><a href="https://www.runoob.com/cssref/css3-pr-text-shadow.html">text-shadow</a></td><td>设置文本阴影</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-text-transform.html">text-transform</a></td><td>控制元素中的字母</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-text-unicode-bidi.html">unicode-bidi</a></td><td>设置或返回文本是否被重写</td></tr></tbody></table><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><table><thead><tr><th><a href="https://www.runoob.com/cssref/pr-font-font.html">font</a></th><th>在一个声明中设置所有的字体属性</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/pr-font-font-family.html">font-family</a></td><td>指定文本的字体系列</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-font-font-size.html">font-size</a></td><td>指定文本的字体大小</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-font-font-style.html">font-style</a></td><td>指定文本的字体样式</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-font-font-variant.html">font-variant</a></td><td>以小型大写字体或者正常字体显示文本。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-font-weight.html">font-weight</a></td><td>指定字体的粗细。</td></tr></tbody></table><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#000000</span>;&#125;      <span class="hljs-comment">/* 未访问链接*/</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#00FF00</span>;&#125;  <span class="hljs-comment">/* 已访问链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF00FF</span>;&#125;  <span class="hljs-comment">/* 鼠标移动到链接上 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#0000FF</span>;&#125;  <span class="hljs-comment">/* 鼠标点击时 */</span><br><span class="hljs-comment">/*a:hover 必须跟在 a:link 和 a:visited后面a:active 必须跟在 a:hover后面*/</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--text-decoration 属性主要用于删除链接中的下划线：--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">text-decoration</span> 属性主要用于删除链接中的下划线：html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">text-decoration</span>:none;&#125;    <span class="hljs-comment">/* unvisited link */</span></span><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">text-decoration</span>:none;&#125; <span class="hljs-comment">/* visited link */</span></span><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">text-decoration</span>:underline;&#125;   <span class="hljs-comment">/* mouse over link */</span></span><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">text-decoration</span>:underline;&#125;  <span class="hljs-comment">/* selected link */</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/css/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>This is a link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>注意:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> hover必须在:link和 a:visited之后定义才有效.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>注意:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;<span class="hljs-name">active</span></span>必须在hover之后定义是有效的.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>在 HTML中，有两种类型的列表：</p><ul><li>无序列表 <strong>ul</strong> - 列表项标记用特殊图形（如小黑点、小方框等）</li><li>有序列表 <strong>ol</strong> - 列表项的标记有数字或字母</li></ul><p>list-style-type属性指定列表项标记的类型是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.a</span> &#123;<span class="hljs-attribute">list-style-type</span>: circle;&#125;<br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.b</span> &#123;<span class="hljs-attribute">list-style-type</span>: square;&#125;<br> <br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.c</span> &#123;<span class="hljs-attribute">list-style-type</span>: upper-roman;&#125;<br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.d</span> &#123;<span class="hljs-attribute">list-style-type</span>: lower-alpha;&#125;<br><span class="hljs-selector-tag">ul</span><br>&#123;<br>    <span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;sqpurple.gif&#x27;</span>);<span class="hljs-comment">/*要指定列表项标记的图像，使用列表样式图像属性：*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="css列表属性"><a href="#css列表属性" class="headerlink" title="css列表属性"></a>css列表属性</h3><table><thead><tr><th><a href="https://www.runoob.com/cssref/pr-list-style.html">list-style</a></th><th>简写属性。用于把所有用于列表的属性设置于一个声明中</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/pr-list-style-image.html">list-style-image</a></td><td>将图像设置为列表项标志。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-list-style-position.html">list-style-position</a></td><td>设置列表中列表项标志的位置。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-list-style-type.html">list-style-type</a></td><td>设置列表项标志的类型。</td></tr></tbody></table><p>##css盒子模型(重要！！！)</p><p><img src="https://www.runoob.com/images/box-model.gif" alt="CSS box-model"></p><ul><li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li></ul><p><img src="https://www.runoob.com/images/lamp.gif" alt="Remark"><strong>重要:</strong> 当您指定一个 CSS 元素的宽度和高度属性时，你只是设置内容区域的宽度和高度。要知道，完整大小的元素，你还必须添加内边距，边框和边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">25px</span> solid green;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">25px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>300px (宽)<br>+ 50px (左 + 右填充)<br>+ 50px (左 + 右边框)<br>+ 50px (左 + 右边距)<br>= 450px</p><p>最终元素的总宽度计算公式是这样的：总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距</p><p>元素的总高度最终计算公式是这样的：总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><h3 id="border-style"><a href="#border-style" class="headerlink" title="border-style :"></a>border-style :</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">none:</span> 默认无边框<br><span class="hljs-symbol">dotted:</span> 定义一个点线边框<br><span class="hljs-symbol">solid:</span> 定义实线边框<br><span class="hljs-symbol">double:</span> 定义两个边框。 两个边框的宽度和 border-width 的值相同<br><span class="hljs-symbol">groove:</span> 定义<span class="hljs-number">3</span>D沟槽边框。效果取决于边框的颜色值<br><span class="hljs-symbol">ridge:</span> 定义<span class="hljs-number">3</span>D脊边框。效果取决于边框的颜色值<br><span class="hljs-symbol">inset:</span>定义一个<span class="hljs-number">3</span>D的嵌入边框。效果取决于边框的颜色值<br><span class="hljs-symbol">outset:</span> 定义一个<span class="hljs-number">3</span>D突出边框。 效果取决于边框的颜色值<br></code></pre></td></tr></table></figure><h3 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border.html">border</a></td><td align="left">简写属性，用于把针对四个边的属性设置在一个声明。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-style.html">border-style</a></td><td align="left">用于设置元素所有边框的样式，或者单独地为各边设置边框样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-width.html">border-width</a></td><td align="left">简写属性，用于为元素的所有边框设置宽度，或者单独地为各边边框设置宽度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-color.html">border-color</a></td><td align="left">简写属性，设置元素的所有边框中可见部分的颜色，或为 4 个边分别设置颜色。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom.html">border-bottom</a></td><td align="left">简写属性，用于把下边框的所有属性设置到一个声明中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-color.html">border-bottom-color</a></td><td align="left">设置元素的下边框的颜色。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-style.html">border-bottom-style</a></td><td align="left">设置元素的下边框的样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-width.html">border-bottom-width</a></td><td align="left">设置元素的下边框的宽度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-left.html">border-left</a></td><td align="left">简写属性，用于把左边框的所有属性设置到一个声明中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-color.html">border-left-color</a></td><td align="left">设置元素的左边框的颜色。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-style.html">border-left-style</a></td><td align="left">设置元素的左边框的样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-width.html">border-left-width</a></td><td align="left">设置元素的左边框的宽度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-right.html">border-right</a></td><td align="left">简写属性，用于把右边框的所有属性设置到一个声明中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-color.html">border-right-color</a></td><td align="left">设置元素的右边框的颜色。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-style.html">border-right-style</a></td><td align="left">设置元素的右边框的样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-width.html">border-right-width</a></td><td align="left">设置元素的右边框的宽度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-top.html">border-top</a></td><td align="left">简写属性，用于把上边框的所有属性设置到一个声明中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-color.html">border-top-color</a></td><td align="left">设置元素的上边框的颜色。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-style.html">border-top-style</a></td><td align="left">设置元素的上边框的样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-width.html">border-top-width</a></td><td align="left">设置元素的上边框的宽度。</td></tr></tbody></table><h2 id="轮廓outline"><a href="#轮廓outline" class="headerlink" title="轮廓outline"></a>轮廓outline</h2><p>轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><p>CSS outline 属性规定元素轮廓的样式、颜色和宽度。</p><p><img src="https://www.runoob.com/images/box_outline.gif" alt="Outline"></p><h2 id="外边距margin"><a href="#外边距margin" class="headerlink" title="外边距margin"></a>外边距margin</h2><p><img src="https://www.runoob.com/wp-content/uploads/2013/08/VlwVi.png" alt="img"></p><table><thead><tr><th>auto</th><th>设置浏览器边距。 这样做的结果会依赖于浏览器</th></tr></thead><tbody><tr><td><em>length</em></td><td>定义一个固定的margin（使用像素，pt，em等）</td></tr><tr><td><em>%</em></td><td>定义一个使用百分比的边距</td></tr></tbody></table><p>为了缩短代码，有可能使用一个属性中margin指定的所有边距属性。这就是所谓的简写属性。</p><p>所有边距属性的简写属性是 <strong>margin</strong> :顺序是上右下左（即使顺时针）</p><p>margin属性可以有一到四个值。</p><ul><li>margin:25px 50px 75px 100px;<ul><li>上边距为25px</li><li>右边距为50px</li><li>下边距为75px</li><li>左边距为100px</li></ul></li><li>margin:25px 50px 75px;<ul><li>上边距为25px</li><li>左右边距为50px</li><li>下边距为75px</li></ul></li><li>margin:25px 50px;<ul><li>上下边距为25px</li><li>左右边距为50px</li></ul></li><li>margin:25px;<ul><li>所有的4个边距都是25px</li></ul></li></ul><h3 id="填充-内边距-padding"><a href="#填充-内边距-padding" class="headerlink" title="填充(内边距)padding"></a>填充(内边距)padding</h3><table><thead><tr><th><em>length</em></th><th>定义一个固定的填充(像素, pt, em,等)</th></tr></thead><tbody><tr><td><em>%</em></td><td>使用百分比值定义一个填充</td></tr></tbody></table><h2 id="分组嵌套选择器"><a href="#分组嵌套选择器" class="headerlink" title="分组嵌套选择器"></a>分组嵌套选择器</h2><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>具有相同样式的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br><span class="hljs-selector-tag">h2</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br><span class="hljs-selector-tag">p</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br><span class="hljs-comment">/*为了尽量减少代码，你可以使用分组选择器。每个选择器用逗号分隔。在下面的例子中，我们对以上代码使用分组选择器：*/</span><br><span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">h2</span>,<span class="hljs-selector-tag">p</span><br>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>它可能适用于选择器内部的选择器的样式。</p><p>在下面的例子设置了三个样式：</p><ul><li><strong>p{ }</strong>: 为所有 <strong>p</strong> 元素指定一个样式。</li><li><strong>.marked{ }</strong>: 为所有 <strong>class=”marked”</strong> 的元素指定一个样式。</li><li><strong>.marked p{ }</strong>: 为所有 <strong>class=”marked”</strong> 元素内的 <strong>p</strong> 元素指定一个样式。</li><li><strong>p.marked{ }</strong>: 为所有 <strong>class=”marked”</strong> 的 <strong>p</strong> 元素指定一个样式</li></ul><h2 id="css尺寸"><a href="#css尺寸" class="headerlink" title="css尺寸"></a>css尺寸</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*使用百分比定义行高*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.small</span> &#123;<span class="hljs-attribute">line-height</span>:<span class="hljs-number">90%</span>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.big</span> &#123;<span class="hljs-attribute">line-height</span>:<span class="hljs-number">200%</span>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th><a href="https://www.runoob.com/cssref/pr-dim-height.html">height</a></th><th>设置元素的高度。</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/pr-dim-line-height.html">line-height</a></td><td>设置行高。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-max-height.html">max-height</a></td><td>设置元素的最大高度。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-max-width.html">max-width</a></td><td>设置元素的最大宽度。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-min-height.html">min-height</a></td><td>设置元素的最小高度。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-min-width.html">min-width</a></td><td>设置元素的最小宽度。</td></tr><tr><td><a href="https://www.runoob.com/cssref/pr-dim-width.html">width</a></td><td>设置元素的宽度。</td></tr></tbody></table><p>属性值</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">normal</td><td align="left">默认。设置合理的行间距。</td></tr><tr><td align="left"><em>number</em></td><td align="left">设置数字，此数字会与当前的字体尺寸相乘来设置行间距。</td></tr><tr><td align="left"><em>length</em></td><td align="left">设置固定的行间距。</td></tr><tr><td align="left"><em>%</em></td><td align="left">基于当前字体尺寸的百分比行间距。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 line-height 属性的值。</td></tr></tbody></table><h2 id="css显示（重要）"><a href="#css显示（重要）" class="headerlink" title="css显示（重要）"></a>css显示（重要）</h2><h3 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h3><p>隐藏一个元素可0……………………………………………….0、</p><p>3通过把display属性设置为<code>none</code>或者把visibility属性设为<code>hidden</code> ，但它们两者有区别，hidden只是隐藏了但还是会影响布局，但设为none后的元素不会影响布局</p><h3 id="css-display-块和内联元素"><a href="#css-display-块和内联元素" class="headerlink" title="css display-块和内联元素"></a>css display-块和内联元素</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><ul><li>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;</li><li>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;</li></ul><p>首先要区别块和内联元素，块元素是一个元素，占用了全部宽度，在前后都是换行符，简单的说块级元素例如一个<div></div>就是一行</p><p><strong>块级元素主要有：</strong></p><ul><li> address , blockquote , center , dir , div , dl , fieldset , form , h1 , h2 , h3 , h4 , h5 , h6 , hr , isindex , menu , noframes , noscript , ol , p , pre , table , ul , li</li></ul><p><img src="https://i.loli.net/2021/01/12/iJcqPEySKWbdZfD.png" alt="image.png"></p><h4 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h4><p>内联元素只需要必要的宽度，不强制换行，例子有<span>,<a>而<span></span>后下一个还是在同一行</p><ul><li>和相邻的内联元素在同一行;</li><li>宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变，就是里面文字或图片的大小;</li></ul><p><strong>内联元素主要有：</strong></p><ul><li>a , abbr , acronym , b , bdo , big , br , cite , code , dfn , em , font , i , img , input , kbd , label , q , s , samp , select , small , span , strike , strong , sub , sup ,textarea , tt , u , var</li></ul><p><img src="https://i.loli.net/2021/01/12/J7HFSPdOp1LganU.png" alt="image.png"></p><p>利用CSS我们可以摆脱上面表格里HTML标签归类的限制，自由地在不同标签/元素上应用我们需要的属性。</p><p>主要用的CSS样式有以下三个：</p><ul><li>display:block – 显示为块级元素</li><li>display:inline – 显示为内联元素</li><li>display:inline-block – 显示为内联块元素，表现为同行显示并可修改宽高内外边距等属性</li></ul><h2 id="css定位（重要）"><a href="#css定位（重要）" class="headerlink" title="css定位（重要）"></a>css定位（重要）</h2><p>css的position指定了元素的定位类型，position属性的五个值：</p><ul><li>static</li><li>relative</li><li>fixed</li><li>absolute</li><li>sticky</li></ul><h4 id="static定位-默认"><a href="#static定位-默认" class="headerlink" title="static定位(默认)"></a>static定位(默认)</h4><p>HTML元素的默认值，即没有定位，遵循正常的文档流对象，静态定位的元素不会受到top、bottom、left、right影响</p><h4 id="fixed定位"><a href="#fixed定位" class="headerlink" title="fixed定位"></a>fixed定位</h4><p>元素的位置相当于浏览器窗口时固定的位置。即使窗口滚动也不会移动(一直固定在浏览器窗口的那个位置)</p><h4 id="relative定位"><a href="#relative定位" class="headerlink" title="relative定位"></a>relative定位</h4><p>相对定位元素的定位时相当其正常位置，相对定位元素经常被用来作为绝对定位元素的容器块</p><h4 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h4><p>绝对定位元素的位置相对于最近的已定位父元素，如果定位没有已定位的父元素，那么它的位置相对于<html></p><h4 id="sticky定位"><a href="#sticky定位" class="headerlink" title="sticky定位"></a>sticky定位</h4><p>sticky 英文字面意思是粘，粘贴，所以可以把它称之为粘性定位。<strong>position: sticky;</strong> 基于用户的滚动位置来定位。</p><p>粘性定位的元素是依赖于用户的滚动，在 <strong>position:relative</strong> 与 <strong>position:fixed</strong> 定位之间切换。</p><p>它的行为就像 <strong>position:relative;</strong> 而当页面滚动超出目标区域时，它的表现就像 **position:fixed;**，它会固定在目标位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.sticky</span> &#123;<br>    <span class="hljs-attribute">position</span>: -webkit-sticky; <span class="hljs-comment">/* Safari 浏览器需要*/</span><br>    <span class="hljs-attribute">position</span>: sticky;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效,否则与相对定位相同*/</span><br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#4CAF50</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重叠的元素"><a href="#重叠的元素" class="headerlink" title="重叠的元素"></a>重叠的元素</h3><p>元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素，z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span><br>&#123;<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">z-index</span>:-<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><p><img src="https://i.loli.net/2021/01/12/o3MpvnY9Qgqbes5.png" alt="image.png"></p><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>css overflow属性用于控制内容溢出元素框时显示的方式，可以控制内容溢出元素框时在对应的元素区间内添加滚动条</p><table><thead><tr><th>visible</th><th>默认值。内容不会被修剪，会呈现在元素框之外。</th></tr></thead><tbody><tr><td>hidden</td><td>内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td>scroll</td><td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>auto</td><td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table><h2 id="css浮动"><a href="#css浮动" class="headerlink" title="css浮动"></a>css浮动</h2><p>css的float，会使元素向左或向右移动，其周围的元素也会重新排列</p><p>如果你把几个浮动的元素放到一起，如果有空间的话，它们将彼此相邻。在这里，我们对图片廊使用 float 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.thumbnail</span> <br>&#123;<br>    <span class="hljs-attribute">float</span>:left;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">110px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">5px</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果</p><p><img src="https://i.loli.net/2021/01/12/ynsj5rTkCveoJ4Z.png" alt="image.png"></p><p>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。</p><p>clear 属性指定元素两侧不能出现浮动元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.text_line</span><br>&#123;<br>    <span class="hljs-attribute">clear</span>:both;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="css水平垂直对齐-重要"><a href="#css水平垂直对齐-重要" class="headerlink" title="css水平垂直对齐(重要)"></a>css水平垂直对齐(重要)</h2><h3 id="水平对齐"><a href="#水平对齐" class="headerlink" title="水平对齐"></a>水平对齐</h3><p>要水平居中对齐一个元素(如 <div>), 可以使用 **margin: auto;**。</p><p>设置到元素的宽度将防止它溢出到容器的边缘。</p><p>元素通过指定宽度，并将两边的空外边距平均分配：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;<br>    <span class="hljs-attribute">margin</span>: auto;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="水平文字对齐"><a href="#水平文字对齐" class="headerlink" title="水平文字对齐"></a>水平文字对齐</h3><p>如果仅仅是为了文本在元素内居中对齐，可以使用 <strong>text-align: center;</strong></p><h3 id="实现图片居中对齐"><a href="#实现图片居中对齐" class="headerlink" title="实现图片居中对齐"></a>实现图片居中对齐</h3><p>要让图片居中对齐, 可以使用 <strong>margin: auto;</strong> 并将它放到 <strong>块</strong> 元素中:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">margin</span>: auto;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">40%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用定位方式实现左右对齐"><a href="#使用定位方式实现左右对齐" class="headerlink" title="使用定位方式实现左右对齐"></a>使用定位方式实现左右对齐</h3><p>我们可以使用 <strong>position: absolute;</strong> 属性来对齐元素:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.right</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#73AD21</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用float实现左右对齐"><a href="#使用float实现左右对齐" class="headerlink" title="使用float实现左右对齐"></a>使用float实现左右对齐</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.right</span> &#123;<br>    <span class="hljs-attribute">float</span>: right;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#73AD21</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以在父元素上添加 overflow: auto; 来解决子元素溢出的问题:</p><p><code>.clearfix &#123;    overflow: auto; &#125;</code></p><h3 id="垂直居中对齐"><a href="#垂直居中对齐" class="headerlink" title="垂直居中对齐"></a>垂直居中对齐</h3><p>最简单的是使头部顶部使用padding</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;  <br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">70px</span> <span class="hljs-number">0</span>; <span class="hljs-comment">/*垂直居中*/</span><br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">70px</span> <span class="hljs-number">0</span>; <span class="hljs-comment">/*垂直水平居中*/</span><br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用line-height实现垂直居中"><a href="#使用line-height实现垂直居中" class="headerlink" title="使用line-height实现垂直居中"></a>使用line-height实现垂直居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;  <span class="hljs-comment">/*文本的行间距*/</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br> <br><span class="hljs-comment">/* 如果文本有多行，添加以下代码: */</span><br><span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用position和tansform"><a href="#使用position和tansform" class="headerlink" title="使用position和tansform"></a>使用position和tansform</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123; <br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green; <br>&#125;<br> <br><span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><h3 id="后代选择其（儿子孙子。。。。）"><a href="#后代选择其（儿子孙子。。。。）" class="headerlink" title="后代选择其（儿子孙子。。。。）"></a>后代选择其（儿子孙子。。。。）</h3><p>后代选择器用于选取某元素的后代元素，以下实例选取所有 <p> 元素插入到 <div> 元素中: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span><br>&#123;<br>  <span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/13/XMNaAntHqmelVYF.png" alt="image.png"></p><h3 id="子元素选择器（只能是儿子）-gt"><a href="#子元素选择器（只能是儿子）-gt" class="headerlink" title="子元素选择器（只能是儿子）&gt;"></a>子元素选择器（只能是儿子）&gt;</h3><p>与后代选择器相比，子元素选择器（Child selectors）只能选择作为某元素子元素的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span><br>&#123;<br>  <span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器   +"></a>相邻兄弟选择器   +</h3><p>相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。</p><p>以下实例选取了所有位于 <div> 元素后的第一个 <p> 元素:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>div+p<br>&#123;<br><span class="css"><span class="hljs-selector-tag">background-color</span><span class="hljs-selector-pseudo">:yellow</span>;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>文章标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>DIV 内部标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>DIV 内部段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>DIV 之后的第一个 P 元素。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>DIV 之后的第二个 P 元素。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/13/bPLm15NS8fhIClo.png" alt="image.png"></p><h3 id="后续兄弟选择器"><a href="#后续兄弟选择器" class="headerlink" title="后续兄弟选择器"></a>后续兄弟选择器</h3><p>以下实例选取了所有 <div> 元素之后的所有相邻兄弟元素 <p> : </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>~<span class="hljs-selector-tag">p</span><br>&#123;<br>  <span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS的伪类"><a href="#CSS的伪类" class="headerlink" title="CSS的伪类"></a>CSS的伪类</h2><p>CSS伪类是用来添加一些选择器的特殊效果</p><p>伪类的语法：</p><p><code>selector:pseudo-class &#123;property:value;&#125;</code></p><p>CSS类也可以使用伪类：</p><p><code>selector.class:pseudo-class &#123;property:value;&#125;</code></p><p>例子：链接的不同状态下不同样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF0000</span>;&#125; <span class="hljs-comment">/* 未访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#00FF00</span>;&#125; <span class="hljs-comment">/* 已访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF00FF</span>;&#125; <span class="hljs-comment">/* 鼠标划过链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#0000FF</span>;&#125; <span class="hljs-comment">/* 已选中的链接 *</span><br></code></pre></td></tr></table></figure><p>CSS的伪类</p><table><thead><tr><th><a href="https://www.runoob.com/cssref/sel-checked.html">:checked</a></th><th>input:checked</th><th>选择所有选中的表单元素</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/css/cssref/sel-disabled.html">:disabled</a></td><td>input:disabled</td><td>选择所有禁用的表单元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-empty.html">:empty</a></td><td>p:empty</td><td>选择所有没有子元素的p元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-enable.html">:enabled</a></td><td>input:enabled</td><td>选择所有启用的表单元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-first-of-type.html">:first-of-type</a></td><td>p:first-of-type</td><td>选择的每个 p 元素是其父元素的第一个 p 元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-in-range.html">:in-range</a></td><td>input:in-range</td><td>选择元素指定范围内的值</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-invalid.html">:invalid</a></td><td>input:invalid</td><td>选择所有无效的元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-last-child.html">:last-child</a></td><td>p:last-child</td><td>选择所有p元素的最后一个子元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-last-of-type.html">:last-of-type</a></td><td>p:last-of-type</td><td>选择每个p元素是其母元素的最后一个p元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-not.html">:not(selector)</a></td><td>:not(p)</td><td>选择所有p以外的元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-child.html">:nth-child(n)</a></td><td>p:nth-child(2)</td><td>选择所有 p 元素的父元素的第二个子元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-last-child.html">:nth-last-child(n)</a></td><td>p:nth-last-child(2)</td><td>选择所有p元素倒数的第二个子元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-last-of-type.html">:nth-last-of-type(n)</a></td><td>p:nth-last-of-type(2)</td><td>选择所有p元素倒数的第二个为p的子元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-of-type.html">:nth-of-type(n)</a></td><td>p:nth-of-type(2)</td><td>选择所有p元素第二个为p的子元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-only-of-type.html">:only-of-type</a></td><td>p:only-of-type</td><td>选择所有仅有一个子元素为p的元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-only-child.html">:only-child</a></td><td>p:only-child</td><td>选择所有仅有一个子元素的p元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-optional.html">:optional</a></td><td>input:optional</td><td>选择没有”required”的元素属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-out-of-range.html">:out-of-range</a></td><td>input:out-of-range</td><td>选择指定范围以外的值的元素属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-read-only.html">:read-only</a></td><td>input:read-only</td><td>选择只读属性的元素属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-read-write.html">:read-write</a></td><td>input:read-write</td><td>选择没有只读属性的元素属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-required.html">:required</a></td><td>input:required</td><td>选择有”required”属性指定的元素属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-root.html">:root</a></td><td>root</td><td>选择文档的根元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-target.html">:target</a></td><td>#news:target</td><td>选择当前活动#news元素(点击URL包含锚的名字)</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-valid.html">:valid</a></td><td>input:valid</td><td>选择所有有效值的属性</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-link.html">:link</a></td><td>a:link</td><td>选择所有未访问链接</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-visited.html">:visited</a></td><td>a:visited</td><td>选择所有访问过的链接</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-active.html">:active</a></td><td>a:active</td><td>选择正在活动链接</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-hover.html">:hover</a></td><td>a:hover</td><td>把鼠标放在链接上的状态</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-focus.html">:focus</a></td><td>input:focus</td><td>选择元素输入后具有焦点</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstletter.html">:first-letter</a></td><td>p:first-letter</td><td>选择每个<p> 元素的第一个字母</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstline.html">:first-line</a></td><td>p:first-line</td><td>选择每个<p> 元素的第一行</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstchild.html">:first-child</a></td><td>p:first-child</td><td>选择器匹配属于任意元素的第一个子元素的 <p> 元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-before.html">:before</a></td><td>p:before</td><td>在每个<p>元素之前插入内容</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-after.html">:after</a></td><td>p:after</td><td>在每个<p>元素之后插入内容</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-lang.html">:lang(<em>language</em>)</a></td><td>p:lang(it)</td><td>为<p>元素的lang属性选择一个开始值</td></tr></tbody></table><p>CSS的伪元素</p><p>CSS伪元素是用来添加一些选择器的特殊效果。</p><table><thead><tr><th><a href="https://www.runoob.com/cssref/sel-link.html">:link</a></th><th>a:link</th><th>选择所有未访问链接</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/sel-visited.html">:visited</a></td><td>a:visited</td><td>选择所有访问过的链接</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-active.html">:active</a></td><td>a:active</td><td>选择正在活动链接</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-hover.html">:hover</a></td><td>a:hover</td><td>把鼠标放在链接上的状态</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-focus.html">:focus</a></td><td>input:focus</td><td>选择元素输入后具有焦点</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstletter.html">:first-letter</a></td><td>p:first-letter</td><td>选择每个<p> 元素的第一个字母</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstline.html">:first-line</a></td><td>p:first-line</td><td>选择每个<p> 元素的第一行</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstchild.html">:first-child</a></td><td>p:first-child</td><td>选择器匹配属于任意元素的第一个子元素的 <p> 元素</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-before.html">:before</a></td><td>p:before</td><td>在每个<p>元素之前插入内容</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-after.html">:after</a></td><td>p:after</td><td>在每个<p>元素之后插入内容</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-lang.html">:lang(<em>language</em>)</a></td><td>p:lang(it)</td><td>为<p>元素的lang属性选择一个开始值</td></tr></tbody></table><p><strong>伪类</strong>选择元素基于的是当前元素处于的状态，或者说元素当前所具有的特性，而不是元素的id、class、属性等静态的标志。由于状态是动态变化的，所以一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。由此可以看出，它的功能和class有些类似，但它是基于文档之外的抽象，所以叫伪类。</p><p>与伪类针对特殊状态的元素不同的是，<strong>伪元素</strong>是对元素中的特定内容进行操作，它所操作的层次比伪类更深了一层，也因此它的动态性比伪类要低得多。实际上，设计伪元素的目的就是去选取诸如元素内容第一个字（母）、第一行，选取某些内容前面或后面这种普通的选择器无法完成的工作。它控制的内容实际上和元素是相同的，但是它本身只是基于元素的抽象，并不存在于文档中，所以叫伪元素。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2021/01/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/01/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="js概述"><a href="#js概述" class="headerlink" title="js概述"></a>js概述</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>正则表达式(Regular Expression)用于匹配字符组合的模式。在JavaScript中，正则表达式是对象</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>用于验证表单，例如注册的密码格式限制等</li><li>过滤敏感词‘</li><li>从字符串中获取我们想要的特定部分等</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>灵活性、逻辑性和功能性强</li><li>简单方式达到对字符串的复杂控制</li><li>缺点：刚接触时，晦涩难懂</li><li>目标：不要求写出来，但要能看懂，能修改别人写好的正则表达式</li></ul><h2 id="正则表达式在js中的应用"><a href="#正则表达式在js中的应用" class="headerlink" title="正则表达式在js中的应用"></a>正则表达式在js中的应用</h2><h3 id="通过调用RegExp"><a href="#通过调用RegExp" class="headerlink" title="通过调用RegExp()"></a>通过调用RegExp()</h3><p>例如<code>var regexp = new RegExp(/123/);</code> 要求必须输入123</p><h3 id="通过字面量"><a href="#通过字面量" class="headerlink" title="通过字面量"></a>通过字面量</h3><p>例如<code>var rg = /123/;</code></p><h3 id="通过test-检测字符串是否符合该规则，返回true或false"><a href="#通过test-检测字符串是否符合该规则，返回true或false" class="headerlink" title="通过test()检测字符串是否符合该规则，返回true或false"></a>通过test()检测字符串是否符合该规则，返回true或false</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/123/</span>;<br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-number">123</span>));<span class="hljs-comment">//匹配字符中是否出现123  出现结果为true</span><br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//匹配字符中是否出现123 未出现结果为false</span><br></code></pre></td></tr></table></figure><h2 id="正则表达式的特殊字符"><a href="#正则表达式的特殊字符" class="headerlink" title="正则表达式的特殊字符"></a>正则表达式的特殊字符</h2><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/abc/</span>; <span class="hljs-comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span><br><span class="hljs-comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span><br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;abc&#x27;</span>));<br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;abcd&#x27;</span>));<br><span class="hljs-built_in">console</span>.log(rg.test(<span class="hljs-string">&#x27;aabcd&#x27;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^abc/</span>;  <span class="hljs-comment">//必须adc开头</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abc&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;abcd&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;aabcd&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^abc$/</span>; <span class="hljs-comment">// 精确匹配 要求必须是 abc字符串才符合规范</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abc&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abcd&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;aabcd&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abcabc&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/[abc]/</span> 只要包含a或者包含b或者包含c都返回<span class="hljs-literal">true</span><br><span class="hljs-built_in">console</span>.log(rg.text(<span class="hljs-string">&#x27;andy&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(rg.text(<span class="hljs-string">&#x27;red&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-keyword">var</span> rg = <span class="hljs-regexp">/^[abc]$/</span>  <span class="hljs-comment">//a-true b-true c-false d-false aa-false</span><br><br><span class="hljs-keyword">var</span> rg =<span class="hljs-regexp">/^[a-z]$/</span>  <span class="hljs-comment">//只要输入的是26个英文字母之一都返回truej</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字符组合</span><br><span class="hljs-keyword">var</span> reg  =<span class="hljs-regexp">/^[a-zA-Z0-9]$/</span> <span class="hljs-comment">//可输入大小写英文字符，或者数字 </span><br><span class="hljs-keyword">var</span> reg  =<span class="hljs-regexp">/^[^a-zA-Z0-9]$/</span> <span class="hljs-comment">//可输入大小写英文字符，或者数字  [^]里面的^表示取反</span><br></code></pre></td></tr></table></figure><h3 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h3><p>量词符用来设定某个模式出现的次数。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span> <span class="hljs-comment">//表单验证模板，输入字符只能是[]范围里的，且字符个数为6-16位</span><br><br></code></pre></td></tr></table></figure><h3 id="括号总结"><a href="#括号总结" class="headerlink" title="括号总结"></a>括号总结</h3><p>中括号 匹配括号内的任意字符(或)</p><p>大括号 表示重复的次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^abc&#123;3&#125;$/</span> <span class="hljs-comment">//只是表示c重复3次 记abccc为true</span><br></code></pre></td></tr></table></figure><p>小括号：表示优先级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^(abc)&#123;3&#125;$/</span> <span class="hljs-comment">//只是表示c重复3次 记abccc为true  </span><br><span class="hljs-comment">//abcabcabc为true</span><br></code></pre></td></tr></table></figure><h2 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210108162916331.png" alt="image-20210108162916331"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//座机号码验证</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;  <span class="hljs-comment">// 正则里面的或(|)</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;<br></code></pre></td></tr></table></figure><h3 id="正则表达式中的替换"><a href="#正则表达式中的替换" class="headerlink" title="正则表达式中的替换"></a>正则表达式中的替换</h3><p><code>replace()方法</code></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript进阶</title>
    <link href="/2021/01/06/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/01/06/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>#jsES6中的类和对象</p><h2 id="创建类和对象"><a href="#创建类和对象" class="headerlink" title="创建类和对象"></a>创建类和对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uanme</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;Liudehua&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(ldh.uname);<br></code></pre></td></tr></table></figure><ol><li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li><li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li><li>多个函数方法之间不需要添加逗号分隔</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li></ol><p>##类中添加方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uanme</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">sing</span>(<span class="hljs-params">songName</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(songName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constuctor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">money</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br>son.money;<br></code></pre></td></tr></table></figure><p>子类使用super关键字访问父类的方法，这里调用父类的函数，可以是构造函数，可以是普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义了父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>&#125;<br> &#125;<br><span class="hljs-comment">//子元素继承父类</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(x, y); <span class="hljs-comment">//使用super调用了父类中的构造函数</span><br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    son.sum(); <span class="hljs-comment">//结果为3</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong> </p><ol><li>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</li><li>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</li><li>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</li></ol><p>super.父类方法名()可调用父类的普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 父类有加法方法</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>   &#125;<br> &#125;<br> <span class="hljs-comment">// 子类继承父类加法方法 同时 扩展减法方法</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-comment">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span><br>   <span class="hljs-built_in">super</span>(x, y);<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">subtract</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x - <span class="hljs-built_in">this</span>.y);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);<br>son.subtract(); <span class="hljs-comment">//2</span><br>son.sum();<span class="hljs-comment">//8</span><br></code></pre></td></tr></table></figure><h2 id="ES6中的注意点"><a href="#ES6中的注意点" class="headerlink" title="ES6中的注意点"></a>ES6中的注意点</h2><p>ES6必须先定义类，再才能实例化</p><p>类里面共有的属性和方法一定要加this</p><p>类里面的this指向问题：constructor里面的this指向创建的对象 方法中的this指向调用者</p><h2 id="TAB选项栏案例"><a href="#TAB选项栏案例" class="headerlink" title="TAB选项栏案例"></a>TAB选项栏案例</h2><h1 id="构造函数与原型（ES6之前）"><a href="#构造函数与原型（ES6之前）" class="headerlink" title="构造函数与原型（ES6之前）"></a>构造函数与原型（ES6之前）</h1><h2 id="对象的三种创建方式–复习"><a href="#对象的三种创建方式–复习" class="headerlink" title="对象的三种创建方式–复习"></a>对象的三种创建方式–复习</h2><ol><li><p>字面量方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br></code></pre></td></tr></table></figure></li><li><p>new关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure></li><li><p>构造函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure><h2 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h2></li></ol><h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(ldh.uname);<span class="hljs-comment">//实例成员只能通过实例化的对象来访问</span><br></code></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br>Star.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(Star.sex);<span class="hljs-comment">//静态成员只能通过构造函数来访问</span><br></code></pre></td></tr></table></figure><h2 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h2><p>存在浪费内存的问题：每创建一个对象都要单独开辟一个空间</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106141737235.png" alt="image-20210106141737235"></p><p>##构造函数原型prototype</p><p>每一个构造函数都有一个prototype属性，指向另一个对象。这个prototype本身都是一个对象，这个对象的所以属性和方法，都会被构造函数所拥有</p><p>把那些不变的方法，直接定义在prototype对象上，这样所有对象的实例可以共享这些方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>   <span class="hljs-comment">//  this.sing = function() &#123;</span><br>     <span class="hljs-comment">//console.log(&#x27;我会唱歌&#x27;);</span><br>    &#125;<br>&#125;<br>Star.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//在原型对象上添加一个共有的方法</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br>ldh.sing();<br></code></pre></td></tr></table></figure><p>公共属性定义在构造函数里，公共方法放在原型对象里面</p><h2 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型 _proto_"></a>对象原型 <code>_proto_</code></h2><p>对象有一个属性<code>_proto_</code>指向构造函数的prototype原型对象，之所以可以使用构造函数prototype原型对象的属性和方法 ，就是因为对象有<code>_proto</code>_存在</p><p>​    <img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106143345685.png" alt="image-20210106143345685"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106143416554.png" alt="image-20210106143416554"></p><p>方法的查找规则：首先看ldh对象身上是否有sing方法，如果有就执行这个对象上的sing</p><p>如果没有sing这个方法，应为_proto_的存在，就去构造函数原型对象prototype身上查找</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。<br>如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。<br>如果还没有就查找原型对象的原型（<span class="hljs-built_in">Object</span>的原型对象）。<br>依此类推一直找到 <span class="hljs-built_in">Object</span> 为止（<span class="hljs-literal">null</span>）。<br>__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。<br></code></pre></td></tr></table></figure><h2 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h2><p>对象原型(<em>proto</em>)和构造函数(<em>prototype</em>)原型对象里面都有一个属性constructor属性，constructor指向构造函数本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//如果我们这样写就有问题：</span><br>Star.prototype = &#123;<br>    <span class="hljs-comment">//如果我们修改了原来的原型对象，给原型对象赋值的是一个新的对象，则必须手动让construcor指向原来的构造函数</span><br>    <span class="hljs-title">constructor</span>:<span class="hljs-title">Star</span>,//重要<br>    <span class="hljs-title">sing</span>:<span class="hljs-title">function</span>(<span class="hljs-params"></span>)&#123;<br>&#125;,<br>    movie:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106145224927.png" alt="image-20210106145224927"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106150011894.png" alt="image-20210106150011894"></p><p>原型链的作用就在于一个对象可以一层接着一层向上查找</p><p>JavaScript 成员查找机制 按照原型链的方向进行查找</p><p>1、当访问一个对象的属性（或者方法时），先查找这个对象本身有无该属性</p><p>2、如果没有就查找它的原型(<code>_proto_</code>指向的<code>prototype</code>原型对象)</p><p>3、如果还没有就查找原型对象的原型（object原型对象）</p><p>4、还是查找不到则到了最顶层null</p><p>原型对象中的this指向问题</p><p>1、在构造函数中，this指向对象实例</p><p>2、在原型对象中，原型对象函数中this指向实例对象</p><h2 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h2><p>通过原型对象，对原来的内置对象进行扩展自定义方法，比如给数组增加自定义求偶数的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.prototype);<br><span class="hljs-built_in">Array</span>.prototype.sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt; <span class="hljs-built_in">this</span>.length;i++)&#123;<br>        sum+=<span class="hljs-built_in">this</span>[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr.sum();<br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="call-方法"><a href="#call-方法" class="headerlink" title="call()方法"></a>call()方法</h2><p>可以修改函数的this指向</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106214107229.png" alt="image-20210106214107229"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">x,y</span>)</span>&#123;<br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hahaha&quot;</span>);<br>         <span class="hljs-built_in">console</span>.log(x+y);<br>     &#125;<br>     <span class="hljs-keyword">var</span> o =&#123;<br>         name : <span class="hljs-string">&#x27;andy&#x27;</span><br>     &#125;<br>     <span class="hljs-comment">// fn.call(); 可以调用函数</span><br>     fn.call(o,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">//改变了函数的this指向 此时函数的this指向了o这个对象</span><br></code></pre></td></tr></table></figure><h2 id="ES5中的继承"><a href="#ES5中的继承" class="headerlink" title="ES5中的继承"></a>ES5中的继承</h2><h3 id="利用构造函数继承父类型的属性，利用原型对象继承父类型的方法"><a href="#利用构造函数继承父类型的属性，利用原型对象继承父类型的方法" class="headerlink" title="利用构造函数继承父类型的属性，利用原型对象继承父类型的方法"></a>利用构造函数继承父类型的属性，利用原型对象继承父类型的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname,age</span>)</span>&#123;<br>           <span class="hljs-built_in">this</span>.uname = uname;<br>           <span class="hljs-built_in">this</span>.age = age;<br>       &#125;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname,age</span>)</span>&#123;<br>           Father.call(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//此时this指向子构造函数</span><br>       &#125;<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="利用原型对象继承父类型方法"><a href="#利用原型对象继承父类型方法" class="headerlink" title="利用原型对象继承父类型方法"></a>利用原型对象继承父类型方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 父构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>  <span class="hljs-comment">// this 指向父构造函数的对象实例</span><br>  <span class="hljs-built_in">this</span>.uname = uname;<br>  <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br>Father.prototype.money = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100000</span>);<br> &#125;;<br> <span class="hljs-comment">// 2 .子构造函数 </span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname, age, score</span>) </span>&#123;<br>      <span class="hljs-comment">// this 指向子构造函数的对象实例</span><br>      Father.call(<span class="hljs-built_in">this</span>, uname, age);<br>      <span class="hljs-built_in">this</span>.score = score;<br>  &#125;<br><span class="hljs-comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span><br>  Son.prototype = <span class="hljs-keyword">new</span> Father();<br>  <span class="hljs-comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span><br>  Son.prototype.constructor = Son;<br>  <span class="hljs-comment">// 这个是子构造函数专门的方法</span><br>  Son.prototype.exam = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;孩子要考试&#x27;</span>);<br><br>  &#125;<br>  <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>);<br>  <span class="hljs-built_in">console</span>.log(son);<br></code></pre></td></tr></table></figure><h1 id="ES5新增方法"><a href="#ES5新增方法" class="headerlink" title="ES5新增方法"></a>ES5新增方法</h1><h2 id="数组中"><a href="#数组中" class="headerlink" title="数组中"></a>数组中</h2><p><code>forEach()</code>、<code>map()</code>、<code>some()</code>、<code>filter()</code>、<code>every()</code>;</p><h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>       arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,array</span>)</span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;每个数组元素&#x27;</span>+value);<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;每个数组元素索引号&#x27;</span>+index);  <br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数组本身&#x27;</span>,array);<br>       &#125;)<br><span class="hljs-comment">//参数一是:数组元素</span><br>      <span class="hljs-comment">//参数二是:数组元素的索引</span><br>      <span class="hljs-comment">//参数三是:当前的数组</span><br></code></pre></td></tr></table></figure><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter()方法"></a>filter()方法</h3><p>用来创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于筛选数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">66</span>, <span class="hljs-number">4</span>, <span class="hljs-number">88</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> newArr = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index,array</span>) </span>&#123;<br> <span class="hljs-comment">//参数一是:数组元素</span><br>   <span class="hljs-comment">//参数二是:数组元素的索引</span><br>   <span class="hljs-comment">//参数三是:当前的数组</span><br>   <span class="hljs-keyword">return</span> value &gt;= <span class="hljs-number">20</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(newArr);<span class="hljs-comment">//[66,88] //返回值是一个新数组</span><br></code></pre></td></tr></table></figure><h3 id="some-方法"><a href="#some-方法" class="headerlink" title="some()方法"></a>some()方法</h3><p>用于检测数组中的元素是否满足指定条件，</p><p>注意它的返回值是布尔值，如果查找到这个元素 ，就返回true，查不到就返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">some 查找数组中是否有满足条件的元素 <br> <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>];<br> <span class="hljs-keyword">var</span> flag = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,array</span>) </span>&#123;<br>    <span class="hljs-comment">//参数一是:数组元素</span><br>     <span class="hljs-comment">//参数二是:数组元素的索引</span><br>     <span class="hljs-comment">//参数三是:当前的数组</span><br>     <span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">3</span>;<br>  &#125;);<br><span class="hljs-built_in">console</span>.log(flag);<span class="hljs-comment">//false返回值是布尔值,只要查找到满足条件的一个元素就立马终止循环</span><br></code></pre></td></tr></table></figure><h2 id="案例：商品查询"><a href="#案例：商品查询" class="headerlink" title="案例：商品查询"></a>案例：商品查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs JS">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        table &#123;<br>            width: 400px;<br>            border: 1px solid #000;<br>            border-collapse: collapse;<br>            margin: <span class="hljs-number">0</span> auto;<br>        &#125;<br><br>        td,<br>        th &#123;<br>            border: 1px solid #000;<br>            text-align: center;<br>        &#125;<br><br>        input &#123;<br>            width: 50px;<br>        &#125;<br><br>        .search &#123;<br>            width: 600px;<br>            margin: 20px auto;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;search&quot;</span>&gt;<br>        按照价格查询: &lt;input type=&quot;text&quot; class=&quot;start&quot;&gt; - &lt;input type=&quot;text&quot; class=&quot;end&quot;&gt; &lt;button<br>            class=&quot;search-price&quot;&gt;搜索&lt;/button&gt; 按照商品名称查询: &lt;input type=&quot;text&quot; class=&quot;product&quot;&gt; &lt;button<br>            class=&quot;search-pname&quot;&gt;查询&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;table&gt;<br>        &lt;thead&gt;<br>            &lt;tr&gt;<br>                &lt;th&gt;id&lt;/th&gt;<br>                &lt;th&gt;产品名称&lt;/th&gt;<br>                &lt;th&gt;价格&lt;/th&gt;<br>            &lt;/tr&gt;<br>        &lt;/thead&gt;<br>        &lt;tbody&gt;<br><br><br>        &lt;/tbody&gt;<br>    &lt;/table&gt;<br>    &lt;script&gt;<br>        // 利用新增数组方法操作数据<br>        var data = [&#123;<br>            id: 1,<br>            pname: &#x27;小米&#x27;,<br>            price: 3999<br>        &#125;, &#123;<br>            id: 2,<br>            pname: &#x27;oppo&#x27;,<br>            price: 999<br>        &#125;, &#123;<br>            id: 3,<br>            pname: &#x27;荣耀&#x27;,<br>            price: 1299<br>        &#125;, &#123;<br>            id: 4,<br>            pname: &#x27;华为&#x27;,<br>            price: 1999<br>        &#125;, ];<br>        // 1. 获取相应的元素<br>        //获取响应元素<br>        var tbody = document.querySelector(&#x27;tbody&#x27;);<br>        var search_price = document.querySelector(&#x27;.search-price&#x27;);<br>        var start = document.querySelector(&#x27;.start&#x27;);<br>        var end = document.querySelector(&#x27;.end&#x27;);<br>        var search_pname = document.querySelector(&#x27;.search-pname&#x27;);<br>        var product = document.querySelector(&#x27;.product&#x27;)<br><br>        setData(data);<br>        function setData(mydata) &#123;<br>            mydata.forEach(function (value) &#123; //渲染数据<br>                var tr = document.createElement(&#x27;tr&#x27;);<br>                tr.innerHTML = &#x27;&lt;td&gt;&#x27; + value.id + &#x27;&lt;/td&gt;&lt;td&gt;&#x27; + value.pname + &#x27;&lt;/td&gt;&lt;td&gt;&#x27; + value.price +<br>                    &#x27;&lt;/td&gt;&#x27;;<br>                tbody.appendChild(tr)<br>            &#125;);<br>        &#125;<br>        search_price.addEventListener(&#x27;click&#x27;, function () &#123;<br>            // setData(null);<br>            tbody.innerHTML = &#x27;&#x27;;<br>            var serch_data = data.filter(function (value) &#123;<br>                return value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;<br>            &#125;)<br>            console.log(serch_data);<br>            setData(serch_data);<br>        &#125;)<br>        search_pname.addEventListener(&#x27;click&#x27;,function()&#123;<br>            tbody.innerHTML = &#x27;&#x27;;<br>            var serch_data = data.filter(function(value)&#123;<br>                return value.pname == product.value;<br>            &#125;)<br>            setData(serch_data);<br>        &#125;)<br>    &lt;/script&gt;<br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="字符串中新增方法"><a href="#字符串中新增方法" class="headerlink" title="字符串中新增方法"></a>字符串中新增方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str  = <span class="hljs-string">&#x27; andy &#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str);<br><span class="hljs-keyword">var</span> str1 = str.trim();<span class="hljs-comment">//去掉字符串两端的空格 注意只能取出两端的空格 返回一个新的字符串</span><br></code></pre></td></tr></table></figure><p>用这个方法可以解决输入框的空格小bug</p><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><p><code>Object.key(obj)</code> 用于返回对象自身的所有属性名</p><p>效果类似于for in</p><p><code>Object.defineProperty(obj,prop,discriptor)</code>定义对象中的新属性或修改原有属性</p><p>obj:必须 目标对象</p><p>prop：必须 需定义或修改的属性的名字</p><p>descriptor：必须 目标属性所拥有的特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//对其中第三个参数的说明</span><br><span class="hljs-built_in">Object</span>.defineProperty(对象，修改或新增的属性名，&#123;<br>value:修改或新增的属性的值,<br>writable:<span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>,<span class="hljs-comment">//如果值为false 不允许修改这个属性值</span><br>enumerable: <span class="hljs-literal">false</span>,<span class="hljs-comment">//enumerable 如果值为false 则不允许遍历</span><br>        configurable: <span class="hljs-literal">false</span>  <span class="hljs-comment">//configurable 如果为false 则不允许删除这个属性 属性是否可以被删除或是否可以再次修改特性</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210107124006608.png"></p><h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="函数的定义与调用"><a href="#函数的定义与调用" class="headerlink" title="函数的定义与调用"></a>函数的定义与调用</h2><h3 id="函数定义方式"><a href="#函数定义方式" class="headerlink" title="函数定义方式"></a>函数定义方式</h3><p><code>function fn()&#123;&#125;</code>  命名函数</p><p><code>var fn = function()&#123;&#125; </code>匿名函数</p><p><code>利用new Function(&#39;参数1&#39;，&#39;参数2&#39;,&#39;函数体&#39;)</code>了解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;console.log(a+b)&#x27;</span>);<br>f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//里面的参数必须要用字符串</span><br></code></pre></td></tr></table></figure><p>所有函数都是Function 的实例对象  即函数也是一个对象 有原型</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210107125029058.png" alt="image-20210107125029058"></p><h3 id="函数的调用函数"><a href="#函数的调用函数" class="headerlink" title="函数的调用函数"></a>函数的调用函数</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><p><code>fn()</code> <code>fn.call()</code></p><h4 id="对象方法-1"><a href="#对象方法-1" class="headerlink" title="对象方法"></a>对象方法</h4><p><code>对象.fn();</code></p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>在new对象是自动执行</p><h4 id="绑定事件函数"><a href="#绑定事件函数" class="headerlink" title="绑定事件函数"></a>绑定事件函数</h4><p>通过事件调用函数</p><h4 id="定时器函数"><a href="#定时器函数" class="headerlink" title="定时器函数"></a>定时器函数</h4><p>定时器自动调用</p><h4 id="理解执行函数"><a href="#理解执行函数" class="headerlink" title="理解执行函数"></a>理解执行函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;立即执行&#x27;</span>)<br>&#125;)()  <span class="hljs-comment">//立即执行函数自己调用</span><br></code></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h3><p>当函数调用方式不同时，函数this指向也不同，一般情况下，this指向调用者</p><h4 id="普通函数-1"><a href="#普通函数-1" class="headerlink" title="普通函数"></a>普通函数</h4><p>this指向window</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>this指向对象</p><h4 id="构造函数中"><a href="#构造函数中" class="headerlink" title="构造函数中"></a>构造函数中</h4><p>this指向实例对象，原型对象中的this也是指向实例对象</p><h4 id="绑定事件函数-1"><a href="#绑定事件函数-1" class="headerlink" title="绑定事件函数"></a>绑定事件函数</h4><p>this指向函数调用者</p><h4 id="定时器函数-1"><a href="#定时器函数-1" class="headerlink" title="定时器函数"></a>定时器函数</h4><p>this指向window</p><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>this指向window</p><h3 id="改变函数的this指向"><a href="#改变函数的this指向" class="headerlink" title="改变函数的this指向"></a>改变函数的this指向</h3><p><code>bind() call() apply()三种方法</code></p><h4 id="call-函数"><a href="#call-函数" class="headerlink" title="call()函数"></a>call()函数</h4><p><code>fn.call(对象名,参数1，参数2,.....)</code></p><h4 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h4><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p><p>应用场景:  经常跟数组有关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o = &#123;<br>name: <span class="hljs-string">&#x27;andy&#x27;</span><br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>      <span class="hljs-built_in">console</span>.log(a+b)<br>&#125;;<br>fn()<span class="hljs-comment">// 此时的this指向的是window 运行结果为3</span><br>fn.apply(o,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<span class="hljs-comment">//此时的this指向的是对象o,参数使用数组传递 运行结果为3</span><br><br><span class="hljs-comment">//可以调用函数，可以改变函数内部的this指向</span><br><span class="hljs-comment">//参数必须是数组(也可以是伪数组)</span><br><span class="hljs-comment">//主要应用 例如可以利用apply借助于数学内置对象求最大值  </span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">66</span>,<span class="hljs-number">3</span>,<span class="hljs-number">99</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">var</span> max = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-built_in">Math</span>,arr);<br><span class="hljs-comment">//原来数组中并没有求最大值这个方法</span><br><br></code></pre></td></tr></table></figure><h4 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h4><p>bind() 方法不会调用函数,但是能改变函数内部this 指向,返回的是原函数改变this之后产生的新函数</p><p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind</p><p>应用场景:不调用函数,但是还想改变this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o =&#123;<br>    <br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-keyword">var</span> f = fn.bind(o);<br>f();<br><br><span class="hljs-comment">//////////////////////////////////////////</span><br> <span class="hljs-keyword">var</span> o = &#123;<br> name: <span class="hljs-string">&#x27;andy&#x27;</span><br> &#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br><span class="hljs-built_in">console</span>.log(a + b);<br>&#125;;<br><span class="hljs-keyword">var</span> f = fn.bind(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//此处的f是bind返回的新函数</span><br>f();<span class="hljs-comment">//调用新函数  this指向的是对象o 参数使用逗号隔开</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>); <span class="hljs-comment">//定时禁用按钮</span><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">false</span>;<br>    &#125;.bind(<span class="hljs-built_in">this</span>),<span class="hljs-number">3000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三种方法的区别"><a href="#三种方法的区别" class="headerlink" title="三种方法的区别"></a>三种方法的区别</h4><ul><li>共同点 : 都可以改变this指向</li><li>不同点:<ul><li>call 和 apply  会调用函数, 并且改变函数内部this指向.</li><li>call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递</li><li>bind  不会调用函数, 可以改变函数内部this指向.</li></ul></li></ul><ul><li>应用场景<ol><li>call 经常做继承. </li><li>apply经常跟数组有关系.  比如借助于数学对象实现数组最大值最小值</li><li>bind  不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向. </li></ol></li></ul><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>消除了JavaScript语法的一些不合理、不严谨之处，减少了一些怪异行为</p><p>消除代码运行的一些不安全之处，保证代码安全</p><p>提高编译器速率</p><p>禁止在ECMAscript的未来版本中一些可能语法</p><p>###如何开启</p><h4 id="为整个脚本开启严格模式"><a href="#为整个脚本开启严格模式" class="headerlink" title="为整个脚本开启严格模式"></a>为整个脚本开启严格模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span><br><span class="hljs-meta">　　　　&quot;use strict&quot;</span>;<br>       <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>　　　　<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>&#125;)();<br><span class="hljs-comment">//或者 </span><br>&lt;script&gt;<br><span class="hljs-meta">  　&quot;use strict&quot;</span>; <span class="hljs-comment">//当前script标签开启了严格模式</span><br>&lt;/script&gt;<br>&lt;script&gt;<br>  <span class="hljs-comment">//当前script标签未开启严格模式</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="为某个函数开启严格模式"><a href="#为某个函数开启严格模式" class="headerlink" title="为某个函数开启严格模式"></a>为某个函数开启严格模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-meta">　　&quot;use strict&quot;</span>;<br>　　<span class="hljs-comment">//下面的代码按照严格模式执行</span><br>&#125; <br><span class="hljs-comment">//当前fn函数开启了严格模式</span><br></code></pre></td></tr></table></figure><h3 id="严格模式的变化"><a href="#严格模式的变化" class="headerlink" title="严格模式的变化"></a>严格模式的变化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-meta">  &quot;use strict&quot;</span>;<span class="hljs-comment">//当前script标签未开启严格模式</span><br>num = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(num); <span class="hljs-comment">//报错，未声明变量</span><br><span class="hljs-comment">//不能删除已经声明的变量</span><br><span class="hljs-keyword">delete</span> num;<span class="hljs-comment">//报错</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//严格模式的全局作用域中，this指向undefined</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br>&#125;<br>Star();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.sex); <span class="hljs-comment">//输出undefined</span><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br>num = <span class="hljs-number">10</span> <br><span class="hljs-built_in">console</span>.log(num)<span class="hljs-comment">//严格模式后使用未声明的变量</span><br>--------------------------------------------------------------------------------<br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">delete</span> num2;<span class="hljs-comment">//严格模式不允许删除变量</span><br>--------------------------------------------------------------------------------<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 严格模式下全局作用域中函数中的 this 是 undefined</span><br>&#125;<br>fn();  <br>---------------------------------------------------------------------------------<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-built_in">this</span>.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br>&#125;<br><span class="hljs-comment">// Star();严格模式下,如果 构造函数不加new调用, this 指向的是undefined ，此时把构造函数当做普通函数 如果给他赋值则 会报错.</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star();<br><span class="hljs-built_in">console</span>.log(ldh.sex);<br>----------------------------------------------------------------------------------<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//严格模式下，定时器 this 还是指向 window</span><br>&#125;, <span class="hljs-number">2000</span>);  <br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">更多严格模式要求参考MDN文档</a></p><p>函数不能有重名的参数</p><p>函数必须声明在顶层  新版本的JavaScript 会引入“块级作用域”  不允许在非函数的代码块声明函数</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="情况1-接收函数作为参数"><a href="#情况1-接收函数作为参数" class="headerlink" title="情况1  接收函数作为参数"></a>情况1  接收函数作为参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b ,callback</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a+b);<br>    callback &amp;&amp; callback();<br>&#125;<br>fn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加法执行完毕&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="情况2-将函数作为返回值输出"><a href="#情况2-将函数作为返回值输出" class="headerlink" title="情况2 将函数作为返回值输出"></a>情况2 将函数作为返回值输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;<br>fn();<br></code></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="闭包概述"><a href="#闭包概述" class="headerlink" title="闭包概述"></a>闭包概述</h3><p>指有权访问另一个函数作用域中的变量的<code>函数</code> 一个作用域可以访问另一个函数内部的局部变量</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210108124707473.png" alt="image-20210108124707473"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>         <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>         <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>             <span class="hljs-built_in">console</span>.log(num); <span class="hljs-comment">//访问到另一个函数内部的局部变量</span><br>         &#125;<br>         fun();<br>     &#125;<br>     fn();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> num  = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(num);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> f = fn();<br>    f();<br><br></code></pre></td></tr></table></figure><p>重要点：闭包的作用，延伸了变量的作用范围</p><h3 id="闭包应用"><a href="#闭包应用" class="headerlink" title="闭包应用"></a>闭包应用</h3><p>应用1：循环点击注册事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////动态添加属性获取点击li索引号</span><br>    <span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.nav&#x27;</span>).querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(lis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;lis.length;i++)&#123;<br>        lis[i].index = i;<br>        lis[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.index);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">///////////////////////////利用闭包</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;lis.length;i++)&#123;<br>        (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)</span>&#123; <span class="hljs-comment">//立即执行函数又称为小闭包，闭包函数内部所以函数都可访问到这个i</span><br>            lis[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//存在内存泄漏问题</span><br>            <span class="hljs-built_in">console</span>.log(i);<br>        &#125;<br>        &#125;)(i);<br>    &#125;<br></code></pre></td></tr></table></figure><p>应用2：循环中的<code>setTimeout()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>; i&lt;lis.length;i++)&#123;<br>           (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)</span>&#123;<br>               <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                   <span class="hljs-built_in">console</span>.log(lis[i].innerHTML)<br>               &#125;,<span class="hljs-number">3000</span>)<br>           &#125;)(i);<br>       &#125;<br></code></pre></td></tr></table></figure><p>应用3：打车价格计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">需求分析<br>打车起步价<span class="hljs-number">13</span>(<span class="hljs-number">3</span>公里内),  之后每多一公里增加 <span class="hljs-number">5</span>块钱.  用户输入公里数就可以计算打车价格<br>如果有拥堵情况,总价格多收取<span class="hljs-number">10</span>块钱拥堵费*/<br><br> <span class="hljs-keyword">var</span> car = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> start = <span class="hljs-number">13</span>; <span class="hljs-comment">// 起步价  局部变量</span><br>     <span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>; <span class="hljs-comment">// 总价  局部变量</span><br>     <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-comment">// 正常的总价</span><br>       price: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) </span>&#123;<br>         <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;<br>           total = start;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>           total = start + (n - <span class="hljs-number">3</span>) * <span class="hljs-number">5</span><br>         &#125;<br>         <span class="hljs-keyword">return</span> total;<br>       &#125;,<br>       <span class="hljs-comment">// 拥堵之后的费用</span><br>       yd: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">flag</span>) </span>&#123;<br>         <span class="hljs-keyword">return</span> flag ? total + <span class="hljs-number">10</span> : total;<br>       &#125;<br>&#125;<br> &#125;)();<br><span class="hljs-built_in">console</span>.log(car.price(<span class="hljs-number">5</span>)); <span class="hljs-comment">// 23</span><br><span class="hljs-built_in">console</span>.log(car.yd(<span class="hljs-literal">true</span>)); <span class="hljs-comment">// 33</span><br><br><br></code></pre></td></tr></table></figure><p>闭包是一个函数（一个作用域可以访问另一个函数的局部变量）</p><p>闭包的作用：衍生了变量的作用范围</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>函数的内部自己调用自己</p><p>很容易发生栈溢出，一定要给定条件下return返回</p><p>应用：根据id返回数据对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 我们想要做输入id号,就可以返回的数据对象</span><br> <span class="hljs-keyword">var</span> data = [&#123;<br>   id: <span class="hljs-number">1</span>,<br>   name: <span class="hljs-string">&#x27;家电&#x27;</span>,<br>   goods: [&#123;<br>     id: <span class="hljs-number">11</span>,<br>     gname: <span class="hljs-string">&#x27;冰箱&#x27;</span>,<br>     goods: [&#123;<br>       id: <span class="hljs-number">111</span>,<br>       gname: <span class="hljs-string">&#x27;海尔&#x27;</span><br>     &#125;, &#123;<br>       id: <span class="hljs-number">112</span>,<br>       gname: <span class="hljs-string">&#x27;美的&#x27;</span><br>     &#125;,<br><br>            ]<br><br>   &#125;, &#123;<br>     id: <span class="hljs-number">12</span>,<br>     gname: <span class="hljs-string">&#x27;洗衣机&#x27;</span><br>   &#125;]<br> &#125;, &#123;<br>   id: <span class="hljs-number">2</span>,<br>   name: <span class="hljs-string">&#x27;服饰&#x27;</span><br>&#125;];<br><span class="hljs-comment">//1.利用 forEach 去遍历里面的每一个对象</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getID</span>(<span class="hljs-params">json, id</span>) </span>&#123;<br>   <span class="hljs-keyword">var</span> o = &#123;&#125;;<br>   json.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>     <span class="hljs-comment">// console.log(item); // 2个数组元素</span><br>     <span class="hljs-keyword">if</span> (item.id == id) &#123;<br>       <span class="hljs-comment">// console.log(item);</span><br>       o = item;<br>       <span class="hljs-keyword">return</span> o;<br>       <span class="hljs-comment">// 2. 我们想要得里层的数据 11 12 可以利用递归函数</span><br>       <span class="hljs-comment">// 里面应该有goods这个数组并且数组的长度不为 0 </span><br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.goods &amp;&amp; item.goods.length &gt; <span class="hljs-number">0</span>) &#123;<br>       o = getID(item.goods, id);<br>     &#125;<br>   &#125;);<br>   <span class="hljs-keyword">return</span> o;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝只拷贝一层，更深层次对象级别的只拷贝引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//浅拷贝方法</span><br>      <span class="hljs-keyword">var</span> obj = &#123;<br>            id :<span class="hljs-number">1</span>,<br>            name:<span class="hljs-string">&#x27;andy&#x27;</span>,<br>            msg:&#123;<br>                age:<span class="hljs-number">18</span><br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">var</span> o = &#123;&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> obj)&#123; <span class="hljs-comment">//浅拷贝拷贝的是地址 指向的是同一个数据 ，通过o进行修改也会影响原来的对象</span><br>            o[k] = obj[k];<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(o); <br>        <span class="hljs-comment">//ES6浅拷贝语法糖</span><br>        <span class="hljs-built_in">Object</span>.assign(o,obj);<br>        <span class="hljs-built_in">console</span>.log(o)<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210108144601138.png" alt="image-20210108144601138"></p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝拷贝多层，每一层的数据都会拷贝</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210108144607010.png" alt="image-20210108144607010">j’s</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;深拷贝****************************&#x27;</span>);<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepCopy</span>(<span class="hljs-params">newObj,oldObj</span>)</span>&#123;<br>            <span class="hljs-comment">//1、判断数据类型</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> oldObj)&#123;<br>                <span class="hljs-keyword">var</span> item = oldObj[k];<br>                <span class="hljs-keyword">if</span>(item <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>)&#123;<br>                    newObj[k] = [];<br>                    deepCopy(newObj[k],item)<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>)&#123;<br>                    newObj[k] = &#123;&#125;;<br>                    deepCopy(newObj[k],item)<br>                &#125;<br>                <span class="hljs-keyword">else</span> newObj[k] = item;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> o =&#123;&#125;;<br>        deepCopy(o,obj);<br>        <span class="hljs-built_in">console</span>.log(o);<br>    o.msg.age = <span class="hljs-number">20</span>; <span class="hljs-comment">//o的age为20，obj的age还是18</span><br><span class="hljs-comment">//修改两个对象的属性互相不影响</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jquery学习</title>
    <link href="/2021/01/05/jquery%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/05/jquery%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p>JavaScript库，通过JavaScript封装</p><h2 id="等着页面加载完在调用JQuery的方法"><a href="#等着页面加载完在调用JQuery的方法" class="headerlink" title="等着页面加载完在调用JQuery的方法"></a>等着页面加载完在调用JQuery的方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$document.ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;div&#x27;</span>).hide;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;div&#x27;</span>).hide<br>&#125;)<br></code></pre></td></tr></table></figure><p>两种方法效果一样，效果相当于js中的DOMContentLoaded</p><h2 id="顶级对象"><a href="#顶级对象" class="headerlink" title="顶级对象"></a>顶级对象</h2><p>$是JQuery的别称</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105143109748.png" alt="image-20210105143109748"></p><p>$也是JQuery中的顶级对象</p><h2 id="JQuery对象与DOM对象"><a href="#JQuery对象与DOM对象" class="headerlink" title="JQuery对象与DOM对象"></a>JQuery对象与DOM对象</h2><p>1、用元素JS获取到的对象</p><p>2、用JQuery获取来的对象</p><p>3、JQuery对象的本质：利用$对DOM对象包装后产生的对象(伪数组方式存储)，JQuery对象只能使用JQuery方法，DOM对象使用原生的JavaScript属性和方法</p><h2 id="DOM与JQuery对象相互转换"><a href="#DOM与JQuery对象相互转换" class="headerlink" title="DOM与JQuery对象相互转换"></a>DOM与JQuery对象相互转换</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105145331450.png" alt="image-20210105145331450"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.DOM对象转换成jQuery对象，方法只有一种</span><br><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;box&#x27;</span>);  <span class="hljs-comment">// 获取DOM对象</span><br><span class="hljs-keyword">var</span> jQueryObject = $(box);  <span class="hljs-comment">// 把DOM对象转换为 jQuery 对象</span><br><br><span class="hljs-comment">// 2.jQuery 对象转换为 DOM 对象有两种方法：</span><br><span class="hljs-comment">//   2.1 jQuery对象[索引值]</span><br><span class="hljs-keyword">var</span> domObject1 = $(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment">//   2.2 jQuery对象.get(索引值)</span><br><span class="hljs-keyword">var</span> domObject2 = $(<span class="hljs-string">&#x27;div&#x27;</span>).get(<span class="hljs-number">0</span>)<br> <br></code></pre></td></tr></table></figure><h2 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h2><p>$(“选择器”)</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150020660.png" alt="image-20210105150020660"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150143537.png" alt="image-20210105150143537"></p><h2 id="JQuery隐式迭代"><a href="#JQuery隐式迭代" class="headerlink" title="JQuery隐式迭代"></a>JQuery隐式迭代</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>,<span class="hljs-string">&quot;pink&quot;</span>) <span class="hljs-comment">//给div设置背景颜色</span><br><span class="hljs-comment">//隐式迭代把匹配到的元素内部进行遍历循环，给每一个元素添加CSS方法</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150904150.png" alt="image-20210105150904150"></p><h2 id="JQuery筛选选择器"><a href="#JQuery筛选选择器" class="headerlink" title="JQuery筛选选择器"></a>JQuery筛选选择器</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150947467.png" alt="image-20210105150947467"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105153200716.png" alt="image-20210105153200716"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM学习</title>
    <link href="/2021/01/02/DOM/"/>
    <url>/2021/01/02/DOM/</url>
    
    <content type="html"><![CDATA[<h1 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h1><p>WEB API是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>1、获取页面元素</li><li>2、给元素注册事件</li><li>3、操作DOM元素的属性</li><li>4、创建元素</li><li>5、操作DOM节点</li></ul><p>##DOM树</p><p><img src="https://img-blog.csdn.net/20151110111104365" alt="这里写图片描述"></p><p>文档：一个页面就是一个文档</p><p>元素：页面中所用标签都是元素，DOM中使用element表示</p><p>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM中使用node表示</p><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><h3 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h3><p>由于文档页面从上往下加载，所以先得有标签，scipt要写到标签下</p><p><code>document.getElementById(&quot;id&quot;)</code></p><p>注意id是大小写敏感的字符串</p><p>返回的是一个元素对象,里面包含很多方法</p><p><code>console.dir</code> 打印我们返回的元素对象 更好的查看里面的属性和方法</p><h3 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h3><p>返回的是获取过来元素对象的集合 ，都是以伪数组的形式返回</p><p><code>var tag = document.getElementsByTagName(&#39;li&#39;);</code></p><p>还可以获取父元素内部所有指定标签名的子元素，父元素必须是指明的单个元素，上述两种方法一起使用</p><p><code>document.getElementsByTagName(&#39;标签名&#39;)</code></p><h3 id="通过类名"><a href="#通过类名" class="headerlink" title="通过类名"></a>通过类名</h3><p><code>document.getElementsByClassName(&#39;类名&#39;)</code></p><h3 id="通过HTML5新增的方法获取"><a href="#通过HTML5新增的方法获取" class="headerlink" title="通过HTML5新增的方法获取"></a>通过<code>HTML5</code>新增的方法获取</h3><p><code>document.querySelector(&#39;.box&#39;)</code> （可以选择id，class，标签等）功能更强大 .box #nav</p><p>返回的是第一个元素的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>)<span class="hljs-comment">//返回的是所有元素的对象</span><br><span class="hljs-built_in">console</span>.log(x);<br></code></pre></td></tr></table></figure><p>###获取特殊元素</p><p>获取body元素</p><p>``document.body`</p><p>获取html元素</p><p><code>document.documentElement</code></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>触发–响应机制</p><p>事件有三部分组成 事件源 事件类型 事件处理程序 事件三要素</p><p>事件源：事件被触发的对象</p><p>事件类型：什么事件 例如鼠标点击（<code>onclick</code>）</p><p>事件处理程序：触发后要执行的程序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">     <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>);</span><br><span class="javascript">     btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">         alert(<span class="hljs-string">&#x27;哈哈哈&#x27;</span>);</span><br>     &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>##DOM操作元素</p><h3 id="修改元素内容"><a href="#修改元素内容" class="headerlink" title="修改元素内容"></a>修改元素内容</h3><p><code>innerHTML</code> 识别html标签  保留空格和换行 标准</p><p><code>innerText</code>  不识别html标签   去掉空格和换行 非标准</p><p>不仅可以操作元素 还可以获取元素内容</p><h3 id="修改元素属性"><a href="#修改元素属性" class="headerlink" title="修改元素属性"></a>修改元素属性</h3><p>例子：切换图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ldh&quot;</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;zxy&quot;</span>&gt;</span>张学友<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./ldh.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> ldh = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ldh&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> zxy = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;zxy&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(zxy);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="javascript">        zxy.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            img.src = <span class="hljs-string">&#x27;./zxy.jpg&#x27;</span>;</span><br>        &#125;<br><span class="javascript">        ldh.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            img.src = <span class="hljs-string">&#x27;./ldh.jpg&#x27;</span>;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表单元素属性操作"><a href="#表单元素属性操作" class="headerlink" title="表单元素属性操作"></a>表单元素属性操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;输入内容&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="javascript">        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            input.value = <span class="hljs-string">&#x27;被点击了&#x27;</span>;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>;<span class="hljs-comment">//this指向的是事件函数的调用者</span></span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例 密码显示与隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-class">.box</span> &#123;</span><br>            position: relative;<br>            width: 400px;<br><span class="css">            <span class="hljs-selector-tag">border-bottom</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#ccc</span>;</span><br>            margin: 100px auto;<br>        &#125;<br><br><span class="css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">input</span> &#123;</span><br>            width: 370px;<br>            height: 30px;<br>            border: 0;<br>            outline: none;<br>        &#125;<br><br><span class="css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">img</span> &#123;</span><br>            position: absolute;<br>            width: 24px;<br>            top: 2px;<br>            right: 10px;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./闭眼.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;eye&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-comment">//1、获取元素</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;eye&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> pwd = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;pwd&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">        img.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (!flag) &#123;</span><br><span class="javascript">                pwd.type = <span class="hljs-string">&#x27;text&#x27;</span>;</span><br><span class="javascript">                flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">                img.src = <span class="hljs-string">&#x27;./睁眼.png&#x27;</span></span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                pwd.type = <span class="hljs-string">&#x27;password&#x27;</span>;</span><br><span class="javascript">                flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                img.src = <span class="hljs-string">&#x27;./闭眼.png&#x27;</span></span><br>            &#125;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修改样式属性"><a href="#修改样式属性" class="headerlink" title="修改样式属性"></a>修改样式属性</h3><p>JS修改style样式操作，产生行内属性，CSS权重较高</p><h4 id="元素隐藏和显示"><a href="#元素隐藏和显示" class="headerlink" title="元素隐藏和显示"></a>元素隐藏和显示</h4><p><code>display:none</code>隐藏元素 <code>display:block</code>显示元素</p><h3 id="类名样式操作"><a href="#类名样式操作" class="headerlink" title="类名样式操作"></a>类名样式操作</h3><p><code>element.className</code></p><p>直接声明一个新类，覆盖原先的样式类，适合于样式较多或者功能复杂的情况</p><p>小技巧 ：多类名原则器 直接在原先类名基础上加上空格以及新增类名，这样即可保留原来的样式，也有新增的样式</p><p>###总结</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201231161229698.png" alt="image-20201231161229698"></p><p>###排他思想</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201231162512427.png" alt="image-20201231162512427"></p><h3 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h3><p>1、<code>element.属性</code>  只可以获取html自带属性(如id的值 class的值等)</p><p>2、<code>element.getAttribute(&#39;属性&#39;)</code> 可以获取一个div等自定义属性(如自定义一个属性index)</p><p>3、通过<code>element.setAttribute(&#39;属性&#39;,&#39;值&#39;)</code>更改一个自定义属性 </p><p>4、<code>element.属性 = &#39;值&#39;</code>设置自带属性值</p><p>5、<code>div.removeAttribute(&#39;index&#39;)</code>移除属性</p><p>###设置H5自定义属性</p><p>H5约束自定义属性要用data-开头 例如<code>&lt;div data-index = &quot;1&quot;&gt;    &lt;/div&gt;</code></p><p>H5新增获取自定义属性的方法 <code>console.log(div.dataset.index)</code>dataset是个集合，存放了所以与data-开头自定义属性的集合,只能获取data-开头的自定义属性</p><p>如果自定义属性里面含多个-链接的单词，我们获取的时候采样驼峰命名法</p><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div data-list-name = <span class="hljs-string">&quot;andy&quot;</span>&gt; &lt;/div&gt;<br>div.dataset.listName<br></code></pre></td></tr></table></figure><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>利用节点的层次关系获取元素</p><p>HTML DOM树中的所有节点均可通过JavaScript进行访问，所有HTML元素均可被修改，也可以被创建和删除</p><p>节点至少拥有nodeType(节点类型)、nodeName(节点名称)和nodeValue(节点值)这三个基本属性</p><p>元素节点 nodeType 为1</p><p>属性节点 nodeType 为2</p><p>元素节点 nodeType 为3（文字、空格、换行等）</p><p>实际开发 主要操作元素节点</p><h3 id="节点操作父亲节点"><a href="#节点操作父亲节点" class="headerlink" title="节点操作父亲节点"></a>节点操作父亲节点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;erweima&quot;</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> erweima = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.erweima&quot;</span>); <span class="hljs-comment">//得到的是离它最近的父亲节点 如果找不到则返回为空</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(erweima.parentNode);</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="子节点操作父节点"><a href="#子节点操作父节点" class="headerlink" title="子节点操作父节点"></a>子节点操作父节点</h3><p><code>元素名.childNodes</code></p><p><code>元素名.children</code>(非标准) 只获得元素节点，实际开发更常用</p><p><code>元素名.firstElementChiled</code> 返回第一个子元素节点</p><p><code>元素名.lastElementChiled</code> 返回最后一个子元素节点`</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210102113856905.png" alt="image-20210102113856905"></p><h3 id="案例-：下拉菜单"><a href="#案例-：下拉菜单" class="headerlink" title="案例 ：下拉菜单"></a>案例 ：下拉菜单</h3><h3 id="兄弟节点操作"><a href="#兄弟节点操作" class="headerlink" title="兄弟节点操作"></a>兄弟节点操作</h3><p><code>node.nextElementSibling</code>  得到下一个兄弟元素节点</p><p><code>node.perviousElementSiling</code> 得到上一个兄弟元素节点</p><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p><code>document.creatElement(&#39;tagNmae&#39;)</code>  动态创建节点</p><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><p><code>node.appendChild(child)</code> node是父级，child是子集</p><p>添加元素到指定位置</p><p><code>ul.insertBefore(child,指定元素)</code> 添加到指定元素前面</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><code>node.removeChild(child)</code> node是父级，child是子集</p><h3 id="案例：删除留言"><a href="#案例：删除留言" class="headerlink" title="案例：删除留言"></a>案例：删除留言</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>       <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>       <span class="hljs-keyword">var</span> test = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>       <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>       btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">if</span> (test.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>               alert(<span class="hljs-string">&#x27;未输入内容&#x27;</span>);<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>               li.innerHTML = test.value + <span class="hljs-string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<br>               ul.insertBefore(li, ul.children[<span class="hljs-number">0</span>]);<br>           &#125;<br>           <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a&#x27;</span>);<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">as</span>);<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.length; i++) &#123;<br>               <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                   ul.removeChild(<span class="hljs-built_in">this</span>.parentNode);<br>                   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除&#x27;</span>);<br>               &#125;<br>           &#125;<br><br>       &#125;<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><p><code>node.cloneNode</code> 括号为空或者里面是false 浅拷贝 只赋值标签不赋值里面的内容 </p><p><code>node.cloneNode(true)</code> 为深拷贝，会复制内容</p><h3 id="案例-动态生成表格"><a href="#案例-动态生成表格" class="headerlink" title="案例 动态生成表格"></a>案例 动态生成表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        table &#123;<br>            width: 500px;<br>            margin: 100px auto;<br>            border-collapse: collapse;<br>            text-align: center;<br>        &#125;<br>        <br>        td,<br>        th &#123;<br><span class="css">            <span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#333</span>;</span><br>        &#125;<br>        <br>        thead tr &#123;<br>            height: 40px;<br><span class="css">            <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#ccc</span>;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>科目<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-comment">// 1.先去准备好学生的数据</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> datas = [&#123;</span><br><span class="javascript">            name: <span class="hljs-string">&#x27;魏璎珞&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 100<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;弘历&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 98<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;傅恒&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 99<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;明玉&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 88<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;大猪蹄子&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 0<br>        &#125;];<br><br>        <br><span class="javascript">        <span class="hljs-comment">// 2. 往tbody 里面创建行： 有几个人（通过数组的长度）我们就创建几行</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> tbody = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;tbody&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;datas.length;i++)&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;tr&#x27;</span>);</span><br>            tbody.appendChild(tr);<br><span class="javascript">            <span class="hljs-comment">//行里面创建单元格，单元格数量取决于每个对象里面的属性个数</span></span><br><span class="javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> datas[i])&#123;</span><br><span class="javascript">                <span class="hljs-comment">//创建单元格</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> td  = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;td&#x27;</span>)</span><br>                tr.appendChild(td);<br><span class="javascript">                td.textContent = datas[i][k];<span class="hljs-comment">//获得属性值            </span></span><br>            &#125;<br><span class="javascript">            <span class="hljs-comment">//创建删除单元格</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> td = <span class="hljs-built_in">document</span>. createElement(<span class="hljs-string">&#x27;td&#x27;</span>);</span><br><span class="handlebars"><span class="xml">            td.innerHTML = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>删除 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;;</span></span><br>            tr.appendChild(td);<br>        &#125;<br><span class="javascript">        <span class="hljs-comment">//删除操作</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">as</span>.length; i++)&#123;</span><br><span class="javascript">            <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                tbody.removeChild(<span class="hljs-built_in">this</span>.parentNode.parentNode);</span><br>            &#125;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：</p><p>表格格式：</p><ul><li>分为<thead>(表头)和<tbody>（表内容）</li><li>每一行为一个tr，一个tr里面每一个td为一个单元格</li></ul><p><code>creatElement</code>比<code>innerHtml</code>效率更高</p><p>消耗主要来与拼接字符串开创空间的消耗</p><p>#事件高级</p><p>##注册事件</p><p>###传统注册方式</p><p>注册事件的唯一性</p><p>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面的处理函数</p><p>###方法监听注册方式</p><p><code>addEventListener</code>它是一个方法，同一个元素同一个事件可以注册多个监听器，按照注册事件一次执行</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210102140137110.png" alt="image-20210102140137110"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//注册多个事件，都依次执行</span><br>    alert(<span class="hljs-number">22</span>);<br>&#125;)<br>btn[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-number">33</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>##解绑事件</p><p>###传统解绑方式</p><p><code>eventTarget.onclick = null</code></p><h3 id="方法监听解绑"><a href="#方法监听解绑" class="headerlink" title="方法监听解绑"></a>方法监听解绑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, fn)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-number">22</span>);<br>    div.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,fn);<span class="hljs-comment">//解绑</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>事件流描述的是从页面中接收事件的顺序</p><p>事件发送时会在元素节点之间按照特点的顺序传播，这个传播过程即为DOM事件流</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210102144410921.png" alt="image-20210102144410921"></p><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e.target)  <span class="hljs-comment">//e.target返回的是触发事件的对象 点击了谁就返回谁</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>) <span class="hljs-comment">//this是绑定事件的对象 绑定了谁就返回谁</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>和<code>this</code>具有相似的对象是<code>currentTarget</code></p><p><code>e.type</code>返回事件类型 click mouseover等</p><h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.queryselector(<span class="hljs-string">&#x27;a&#x27;</span>);<br>a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    e.preventDefault(); <span class="hljs-comment">//阻止默认行为</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><p><code>stopPropagation()</code> 方法</p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>不是每个子节点单独设置事件监听器，而是将事件监听器放在父节点上，然后运用冒泡原理影响设置每个子节点</p><p>只操作一次DOM，提高程序的性能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span><br>        <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>        ul.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// alert(&#x27;知否知否，点我应有弹框在手！&#x27;);</span><br>            <span class="hljs-comment">// e.target 这个可以得到我们点击的对象</span><br>            e.target.style.backgroundColor = <span class="hljs-string">&#x27;pink&#x27;</span>;<br>        &#125;)<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="鼠标事件补充"><a href="#鼠标事件补充" class="headerlink" title="鼠标事件补充"></a>鼠标事件补充</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-comment">// 1. contextmenu 我们可以禁用右键菜单</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;contextmenu&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>                e.preventDefault();<br>            &#125;)<br>            <span class="hljs-comment">// 2. 禁止选中文字 selectstart</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;selectstart&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            e.preventDefault();<br><br>        &#125;)<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">script&gt;<br>        <span class="hljs-comment">// 鼠标事件对象 MouseEvent</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// 1. client 鼠标在可视区的x和y坐标</span><br>            <span class="hljs-built_in">console</span>.log(e.clientX);<br>            <span class="hljs-built_in">console</span>.log(e.clientY);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------&#x27;</span>);<br><br>            <span class="hljs-comment">// 2. page 鼠标在页面文档的x和y坐标</span><br>            <span class="hljs-built_in">console</span>.log(e.pageX);<br>            <span class="hljs-built_in">console</span>.log(e.pageY);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------&#x27;</span>);<br><br>            <span class="hljs-comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span><br>            <span class="hljs-built_in">console</span>.log(e.screenX);<br>            <span class="hljs-built_in">console</span>.log(e.screenY);<br><br>        &#125;)<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 常用的键盘事件</span><br>        <span class="hljs-comment">//1. keyup 按键弹起的时候触发 </span><br>        <span class="hljs-comment">// document.onkeyup = function() &#123;</span><br>        <span class="hljs-comment">//         console.log(&#x27;我弹起了&#x27;);</span><br><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我弹起了&#x27;</span>);<br>        &#125;)<br><br>        <span class="hljs-comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我按下了press&#x27;</span>);<br>            &#125;)<br>            <span class="hljs-comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我按下了down&#x27;</span>);<br>            &#125;)<br>            <span class="hljs-comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span><br></code></pre></td></tr></table></figure><p>###键盘事件对象</p><p>keyup和keydown事件不区分字母大小写 </p><p>keypress区分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span><br>        <span class="hljs-comment">// 1. 我们的keyup 和keydown事件不区分字母大小写  a 和 A 得到的都是65</span><br>        <span class="hljs-comment">// 2. 我们的keypress 事件 区分字母大小写  a  97 和 A 得到的是65</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(e);</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;up:&#x27;</span> + e.keyCode);<br>            <span class="hljs-comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span><br>            <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">65</span>) &#123;<br>                alert(<span class="hljs-string">&#x27;您按下的a键&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                alert(<span class="hljs-string">&#x27;您没有按下a键&#x27;</span>)<br>            &#125;<br><br>        &#125;)<br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(e);</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;press:&#x27;</span> + e.keyCode);<br><br>        &#125;)<br></code></pre></td></tr></table></figure><h3 id="案例-：快递单号查询"><a href="#案例-：快递单号查询" class="headerlink" title="案例 ：快递单号查询"></a>案例 ：快递单号查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;search&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;con&quot;</span>&gt;&lt;/div&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;请输入您的快递单号&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;jd&quot;</span>&gt;<br>    &lt;/div&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> con = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.con&#x27;</span>);<br>        <span class="hljs-keyword">var</span> jd_input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.jd&#x27;</span>);<br>        jd_input.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">//只能用`keyup`,不能用`keydown`和`keypress`，因为这两个在文本框里面的特点：他们两个事件触发的时候，文字还没有落入文本框中</span><br>            <span class="hljs-comment">//keyup事件因为是键盘弹起来才触发事件，文字以及落入文本框中</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                con.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                con.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>                con.innerText = <span class="hljs-built_in">this</span>.value;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECMAScript学习</title>
    <link href="/2021/01/01/ECMAScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/01/01/ECMAScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1、</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<span class="hljs-comment">//创建空数组</span><br><span class="hljs-comment">//利用数组自变量创建数组（更常用）</span><br><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-keyword">var</span> user_Name = [<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-string">&#x27;大黄&#x27;</span>, <span class="hljs-string">&#x27;瑞奇&#x27;</span>];<br><span class="hljs-keyword">var</span> arry1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;pink&#x27;</span> ,<span class="hljs-literal">true</span>];<span class="hljs-comment">//可以存储任何类型的数组元素</span><br></code></pre></td></tr></table></figure><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><h3 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h3><p>索引号从0开始</p><p>没有这个数组元素是，返回undefined</p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>用for循环；</p><p>数组名长度获取：<code>arr.length</code>,获取到的是元素的个数，而不是索引号的最后一位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 案例，将数组转换成字符串</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;pink&#x27;</span>];<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;arr.length; i++)<br>    &#123;<br>        str +=arr[i];<br>    &#125;<br><span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></table></figure><h2 id="新增数组"><a href="#新增数组" class="headerlink" title="新增数组"></a>新增数组</h2><p><code>arr.length = 5</code>可以直接修改数组长度，没给的值为<code>undefined</code></p><p>新增数组元素 修改索引号 追加数组元素，或替换原来的元素</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230120757636.png" alt="image-20201230120757636"></p><h3 id="例子：筛选数组"><a href="#例子：筛选数组" class="headerlink" title="例子：筛选数组"></a>例子：筛选数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 删选大于等于10的数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;arr.length;i++)&#123;<br>    <span class="hljs-keyword">if</span> (arr[i]&gt;=<span class="hljs-number">10</span>)&#123;<br>        newArr = newArr[newArr.length] = arr[i]; <span class="hljs-comment">//javasript数组特性，数组自动增长</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例子：实现冒泡排序"><a href="#例子：实现冒泡排序" class="headerlink" title="例子：实现冒泡排序"></a>例子：实现冒泡排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">50</span>, <span class="hljs-number">532</span>, <span class="hljs-number">7</span>, <span class="hljs-number">678</span>,<span class="hljs-number">532</span>,<span class="hljs-number">811545</span>,<span class="hljs-number">5412</span>,<span class="hljs-number">5</span>];<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span> ; j&lt;arr.length-<span class="hljs-number">1</span>; j++) &#123;<span class="hljs-comment">//外层循环次数</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>-j;  i++) &#123;<span class="hljs-comment">// 内层循环次数，注意循环次数</span><br>               <span class="hljs-keyword">if</span>(arr[i]&gt;arr[i+<span class="hljs-number">1</span>])<br>               &#123;<br>                   temp = arr[i];<br>                   arr[i] = arr[i+<span class="hljs-number">1</span>];<br>                   arr[i+<span class="hljs-number">1</span>] = temp;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><h1 id="JavaScript作用域"><a href="#JavaScript作用域" class="headerlink" title="JavaScript作用域"></a>JavaScript作用域</h1><p>提高程序的可靠性，减少命名冲突</p><h2 id="全局和局部作用域"><a href="#全局和局部作用域" class="headerlink" title="全局和局部作用域"></a>全局和局部作用域</h2><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><p>整个script标签或整个js文件</p><p>全局变量；特殊情况，如果一个变量在函数内部没有声明直接赋值也是全局变量</p><p>全局变量在浏览器关闭才会销毁，比较占内存</p><h3 id="局部（函数作用域）"><a href="#局部（函数作用域）" class="headerlink" title="局部（函数作用域）"></a>局部（函数作用域）</h3><p>在函数内部起作用</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>内部函数访问访问外部函数的变量采用的链式查找（就近原则）</p><h2 id="JavaScript预解析"><a href="#JavaScript预解析" class="headerlink" title="JavaScript预解析"></a>JavaScript预解析</h2><p>JavaScript先将代码进行预解析，然后再执行</p><p>预解析：预解析即时将所以var和function提升到当前作用域的最前面，然后从上到下执行</p><h3 id="变量预解析"><a href="#变量预解析" class="headerlink" title="变量预解析"></a>变量预解析</h3><p>把所有变量的<code>声明</code>提升到当前作用域的最前面，而不是将其赋值提升到。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//例如</span><br><span class="hljs-built_in">console</span>.log(num)<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//相当于</span><br><span class="hljs-keyword">var</span> num;<br><span class="hljs-built_in">console</span>.log(num);<br>num = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//所以代码输出的undefined</span><br></code></pre></td></tr></table></figure><h3 id="函数预解析"><a href="#函数预解析" class="headerlink" title="函数预解析"></a>函数预解析</h3><p>将函数声明提升到当前作用域最前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fun();<br><span class="hljs-keyword">var</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;22&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//报错，fun为undefined</span><br><span class="hljs-comment">//执行步骤为</span><br><span class="hljs-keyword">var</span> fun;<br>fun();<br>fun =<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;22&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//经典案例</span><br>f1();<br><span class="hljs-built_in">console</span>.log(c);<br><span class="hljs-built_in">console</span>.log(b);<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = b = c = <span class="hljs-number">9</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(c);<br>&#125;<br><span class="hljs-comment">//--这里就相当于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a ;<span class="hljs-comment">//而这里的a就相当于局部变量， 而b，c为全局变量</span><br>    b = c =<span class="hljs-number">9</span>;<br>    a = <span class="hljs-number">9</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(c);<br>&#125;<br>f1();<br><span class="hljs-built_in">console</span>.log(c);<br><span class="hljs-built_in">console</span>.log(b);<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-comment">/*所以打印结果为：9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">undefined</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="JavaScript面向对象"><a href="#JavaScript面向对象" class="headerlink" title="JavaScript面向对象"></a>JavaScript面向对象</h1><p>在JavaScript中，对象是一组无序的相关属性的方法和方法的集合，所有事物都是对象，例如字符串，数值，数组，函数等</p><p>JavaScript一切皆对象</p><p>例如保存一个人的完整信息</p><h2 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h2><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p><code>var obj=&#123;&#125;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    username:<span class="hljs-string">&#x27;张三丰&#x27;</span>,<br>    age:<span class="hljs-number">18</span>,<br>    sex:<span class="hljs-string">&#x27;man&#x27;</span>,<br>    <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hi&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用对象属性</span><br>方法<span class="hljs-number">1</span>：<span class="hljs-built_in">console</span>.log(obj.username);<br>方法<span class="hljs-number">2</span>：对象名[<span class="hljs-string">&#x27;属性名&#x27;</span>]<br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-string">&#x27;age&#x27;</span>]);<br><span class="hljs-comment">//调用对象方法</span><br>obj.sayHi();<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230143848150.png" alt="image-20201230143848150"></p><h3 id="new创建对象"><a href="#new创建对象" class="headerlink" title="new创建对象"></a>new创建对象</h3><p><code>var obj = new Object();</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>obj.uname = <span class="hljs-string">&#x27;张三丰&#x27;</span>;<br>obj.age = <span class="hljs-number">18</span>;<br>obj.sex = <span class="hljs-string">&#x27;man&#x27;</span>;<br>obj.sayHi()&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hi~&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><p>为什么要使用构造函数创建对象？</p><p>前两种方式只能一次创建一个对象</p><p>构造函数就是把我们对象里面一些相同的属性和方法抽象出来封装到函数里面                                                                                                                </p><p>例子：创建四大天王对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> 构造函数名(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.属性 = 值;<br>    <span class="hljs-built_in">this</span>.方法 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">new</span> 构造函数名();<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname,age,sex</span>)</span>&#123;   <span class="hljs-comment">//构造函数首字母需大写（规范）</span><br>    <span class="hljs-built_in">this</span>.name = uname;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>    <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sing_Name</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(sing_Name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;规范&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;男&#x27;</span>);<br>ldh.sing(<span class="hljs-string">&quot;冰雨&quot;</span>);<br> <span class="hljs-comment">//构造函数首字母需大写（规范）</span><br><span class="hljs-comment">//构造函数不需要return 就可以返回结果</span><br><span class="hljs-comment">//调用构造函数必须使用new</span><br><span class="hljs-comment">//我们只要new Star()就创建了一个对象</span><br><span class="hljs-comment">//属性和方法前面必须添加this</span><br></code></pre></td></tr></table></figure><h2 id="构造函数与对象的相互联系"><a href="#构造函数与对象的相互联系" class="headerlink" title="构造函数与对象的相互联系"></a>构造函数与对象的相互联系</h2><p>构造函数抽象了某些事物的公共部分，封装在函数里面，泛指某一大类  类似于C++中的类</p><p>对象：特指某一个具体事物，利用构造函数创建对象的方法也称为对象实例化</p><h2 id="new关键词在其中起的作用"><a href="#new关键词在其中起的作用" class="headerlink" title="new关键词在其中起的作用"></a>new关键词在其中起的作用</h2><p>1、new 构造函数可以在内存中创建一个空的对象，</p><p>2、this 就会指向刚才所创建的空的对象</p><p>3、执行够着函数里面的代码，给这个空对象添加属性和方法</p><p>4、返回这个对象</p><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><p>通过for in循环对对象进行遍历</p><p>for(变量 in 对象){</p><p>}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hero</span>(<span class="hljs-params">hero_Name,hero_Blood,hero_Attack</span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name = hero_Name;<br>            <span class="hljs-built_in">this</span>.blood = hero_Blood;<br>            <span class="hljs-built_in">this</span>.attack = hero_Attack;<br>            <span class="hljs-built_in">this</span>.sayWord = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">word</span>)</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(word);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> vn = <span class="hljs-keyword">new</span> Hero(<span class="hljs-string">&#x27;薇恩&#x27;</span>, <span class="hljs-number">900</span>,<span class="hljs-number">80</span>);<br>        <span class="hljs-keyword">var</span> Galen = <span class="hljs-keyword">new</span> Hero(<span class="hljs-string">&#x27;盖伦&#x27;</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">70</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> vn)&#123;  <br>            <span class="hljs-built_in">console</span>.log(k);<span class="hljs-comment">//得到属性名</span><br>            <span class="hljs-built_in">console</span>.log(vn[k]);<span class="hljs-comment">//得到属性值</span><br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="JavaScript内置对象"><a href="#JavaScript内置对象" class="headerlink" title="JavaScript内置对象"></a>JavaScript内置对象</h2><p>JavaScript中对象分为：自定义对象，内置对象，浏览器对象</p><p>内置对象最常用的有：Math、Data、Array、String</p><h3 id="查阅MDN文档"><a href="#查阅MDN文档" class="headerlink" title="查阅MDN文档"></a>查阅MDN文档</h3><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 利用对象封装自己的数学对象  里面有PI的最大值和最小值</span><br><span class="hljs-keyword">var</span> myMath = &#123;<br>    PI:<span class="hljs-number">3.141592653</span>,<br>    max:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> max = aruguments[<span class="hljs-number">0</span>];<span class="hljs-comment">//arguments数组表示函数的形参</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; aruguments.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(aruguments[i]&gt;max)<br>                max = <span class="hljs-built_in">arguments</span>[i];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="random-函数"><a href="#random-函数" class="headerlink" title="random())函数"></a>random())函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.random());<span class="hljs-comment">//获取0到1之间的随机浮点数</span><br><span class="hljs-comment">//得到一个两数之间的随机数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomArbitrary</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() * (max - min) + min;<br>&#125;<br><span class="hljs-comment">//得到一个两数之间的随机整数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomInt</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  min = <span class="hljs-built_in">Math</span>.ceil(min);<br>  max = <span class="hljs-built_in">Math</span>.floor(max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min)) + min; <span class="hljs-comment">//不含最大值，含最小值</span><br>&#125;<br><span class="hljs-comment">//得到一个两数之间的随机整数，包括两个数在内</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomIntInclusive</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  min = <span class="hljs-built_in">Math</span>.ceil(min);<br>  max = <span class="hljs-built_in">Math</span>.floor(max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min + <span class="hljs-number">1</span>)) + min; <span class="hljs-comment">//含最大值，含最小值 </span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p>Date()日期对象是一个构造函数 必须使用new来调用创建我们的日期对象</p><p><code>var date = new Date();</code></p><p>1、没有参数时，返回当前时间</p><p>2、参数的常用写法</p><p><code>var date = new Date(2019,10,1);</code></p><p><code>var date = new Date(&#39;2019-10-1 8:8:8&#39;);</code>2019年10月1日 08:08:08</p><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//返回当前年</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.log(date.getFullYear());<span class="hljs-comment">//返回当前时间年份</span><br><span class="hljs-built_in">console</span>.log(date.getMonth()+<span class="hljs-number">1</span>);<span class="hljs-comment">//比实际要少一个月</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230174936965.png" alt="image-20201230174936965"></p><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><h4 id="检测是否为数组的两种方式"><a href="#检测是否为数组的两种方式" class="headerlink" title="检测是否为数组的两种方式"></a>检测是否为数组的两种方式</h4><p><code>arr instanceof Array;</code></p><p><code>Arr.isArray(arr);</code></p><h4 id="添加数组元素"><a href="#添加数组元素" class="headerlink" title="添加数组元素"></a>添加数组元素</h4><p>1、push()方法，在数组的末尾添加一个或多个数组元素</p><p>push完毕后，返回的结果时数组的长度</p><p>2、unshift(),在数组的最前面的添加元素</p><h4 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h4><p>1、pop()方法 可以删除数组的最后一个元素</p><p>一次只能删除一个元素</p><p>返回的时删除的那个元素</p><p>2、shift()方法 可以删除数组的第一个元素</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230184102813.png" alt="image-20201230184102813"></p><h4 id="数组翻转和排序"><a href="#数组翻转和排序" class="headerlink" title="数组翻转和排序"></a>数组翻转和排序</h4><p>1、数组反转</p><p><code>array.reverse();</code></p><p>2、数组排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">77</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123; <span class="hljs-comment">//要用sort实现排序 必须这样写，否则有问题</span><br>    <span class="hljs-keyword">return</span> a-b;<span class="hljs-comment">//按照升序排序</span><br>&#125;)<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">77</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123; <span class="hljs-comment">//要用sort实现排序 必须这样写，否则有问题</span><br>    <span class="hljs-keyword">return</span> a-b;<span class="hljs-comment">//按照降序排序</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="数组索引-1"><a href="#数组索引-1" class="headerlink" title="数组索引"></a>数组索引</h4><p>1、<code>arr.indexOf(&#39;blue&#39;)</code> 返回该数组元素第一个匹配的数组索引号，没找到则返回-1</p><p>2、<code>arr.lastIndexOf(&#39;blue&#39;)</code> 返回该数组元素最后一个匹配的数组索引号，没找到则返回-1</p><p>案例：数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>];<br>       <span class="hljs-keyword">var</span> arr1 = [];<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>           <span class="hljs-keyword">if</span> (arr1.indexOf(arr[i]) == -<span class="hljs-number">1</span>) &#123;<br>               arr1.push(arr[i]);<br>           &#125;<br>       &#125;<br>       <span class="hljs-built_in">console</span>.log(arr1);<br></code></pre></td></tr></table></figure><h4 id="数组转换成字符串"><a href="#数组转换成字符串" class="headerlink" title="数组转换成字符串"></a>数组转换成字符串</h4><p><code>arr.toString();</code> 将数组转化成字符串</p><p><code>arr1.join(&#39;-&#39;);</code>可以用指定符号进行分割</p><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p><code>var str = &#39;andy&#39;;</code>简单数据类型为什么会有属性和方法？？？</p><p>所用的就是基本包装类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//把简单类型包装成复杂数据类型</span><br><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;andy&#x27;</span>);<br><span class="hljs-comment">//把临时变量的值赋给str</span><br>str = temp;<br><span class="hljs-comment">//销毁这个临时变量</span><br>temp = <span class="hljs-literal">null</span>;<br><br></code></pre></td></tr></table></figure><p>字符串三种基本包装类型<code>String</code>,<code>Number</code>和<code>Bollean</code></p><p>字符串的不可变性，比如每次字符串拼接都是要占用新的一块地址空间，只是地址变了，原来只还是存在的</p><p>字符串所有的方法 都不会修改字符串本身所有操作都是返回新的字符串</p><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><p><code>str.indexOf();</code></p><p><code>str.lastIndexOf</code></p><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230195951927.png" alt="image-20201230195951927"></p><h4 id="拼接-截取字符串"><a href="#拼接-截取字符串" class="headerlink" title="拼接 截取字符串"></a>拼接 截取字符串</h4><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230201018644.png" alt="image-20201230201018644"></p><h4 id="替换以及转换字符串"><a href="#替换以及转换字符串" class="headerlink" title="替换以及转换字符串"></a>替换以及转换字符串</h4><p><code>replace(&#39;被替换字符&#39;,&#39;替换为的字符&#39;)</code></p><h1 id="js简单数据类型和复杂数据类型"><a href="#js简单数据类型和复杂数据类型" class="headerlink" title="js简单数据类型和复杂数据类型"></a>js简单数据类型和复杂数据类型</h1><p>简单数据类型又叫做值类型，复杂数据类型叫做引用类型</p><p>例如<code>string</code>、<code>number、</code>boolean<code>、undefinded、·null</code></p><p>简单数据类型：在存储中存储的是数据本身</p><p>特殊情况：null返回的是一个空的对象，当有个变量要存储变量，但没想好要存啥，先可以赋个<code>null</code></p><p>简单数据类型存储在栈里面</p><p>复杂数据类型，用<code>new</code>关键字声明的变量</p><p>堆里面存储的是复杂数据类型的地址，而数据是存储在堆里面的，这个地址指向堆里面的数据</p><p>复杂数据类型传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(x.name);<span class="hljs-comment">//刘德华</span><br>    x.name = <span class="hljs-string">&quot;张学友&quot;</span>;  <br>    <span class="hljs-built_in">console</span>.log(x.name);<span class="hljs-comment">//张学友</span><br>&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;刘德华&quot;</span>);<br><span class="hljs-built_in">console</span>.log(p.name);<span class="hljs-comment">//刘德华</span><br>f1(p);<span class="hljs-comment">// 执行f1()这个函数，改变了原来这个对象中的内容 ，要与简单数据传参相区别</span><br><span class="hljs-built_in">console</span>.log(p.name);<span class="hljs-comment">//张学友</span><br></code></pre></td></tr></table></figure><p>函数的形参可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给形参，形参和实参保存的是同一个堆地址，所以操作的是同一个对象</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础ECMA语法篇(2)</title>
    <link href="/2020/12/30/2/"/>
    <url>/2020/12/30/2/</url>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-语法2"><a href="#ECMAScript-语法2" class="headerlink" title="ECMAScript 语法2"></a>ECMAScript 语法2</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><h3 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h3><ul><li>操作符是一个对象，返回<code>false</code> </li><li>操作符是一个空字符串，返回 <code>true</code></li><li>操作符是非空字符串，返回<code>false</code></li><li>操作符是数值0，返回<code>true</code></li><li>操作符是任意非0的数值，返回<code>false</code></li><li>操作数是<code>null</code>，返回<code>true</code></li><li>操作数是<code>NaN</code>，返回<code>true</code>； </li><li>操作数是<code>undefined</code>，返回<code>true</code></li></ul><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h3><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><h3 id="求模"><a href="#求模" class="headerlink" title="求模"></a>求模</h3><h3 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h3><ul><li>如果两个操作数都是字符串，则将第二个操作数与第一个操作数拼接起来；</li><li>如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接起来</li></ul><h3 id="减法运算符"><a href="#减法运算符" class="headerlink" title="减法运算符"></a>减法运算符</h3><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><h3 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h3><p>​    相等和不相等——先转换再比较；</p><p>​    全等和不全等——仅比较而不转换</p><p>除了在比较之前不转换操作数之外，全等和不全等操作符与相等和不相等操作符没有什么区别。全等操作符由3个等于号（===）表示，它只在两个操作数未经转换就相等的情况下返回true，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reslut1 = (<span class="hljs-string">&quot;55&quot;</span> == <span class="hljs-number">55</span>); <span class="hljs-comment">//true 转换后相等</span><br><span class="hljs-keyword">var</span> reslut2 = (<span class="hljs-string">&quot;55&quot;</span> ===<span class="hljs-number">55</span>); <span class="hljs-comment">//false ,不同类型值不想等</span><br></code></pre></td></tr></table></figure><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p><code>variable = boolean_expression?true_value:false_value</code>;</p><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p><code>var num1 =1, num2 =2 ,num3 = 3</code></p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p><code>while</code>,<code>do while</code>, <code>for</code>这些都大概相同</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>比较不同的就是<code>for in</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (property <span class="hljs-keyword">in</span> expression) startment<br><span class="hljs-comment">//例如</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> propname <span class="hljs-keyword">in</span> <span class="hljs-built_in">window</span>)&#123;<br>    <span class="hljs-built_in">document</span>.write(propname);<br>&#125;<br><span class="hljs-comment">//我们使用for-in循环来显示了BOM中window对象的所有属性。每次执行循环时，都会将window对象中存在的一个属性名赋值给变量propName。这个过程会一直持续到对象中的所有属性都被枚举一遍为止。与for语句类似，这里控制语句中的var操作符也不是必需的</span><br></code></pre></td></tr></table></figure><h3 id="label语句"><a href="#label语句" class="headerlink" title="label语句"></a>label语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">start:<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;count; i++)&#123;<br>    alert(i);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//例如函数本身定义时参数只有一个，而我们可以在调用是有多个参数</span><br><span class="hljs-comment">//本身函数有多个参数，但调用时可以只有一个参数，没传递参数赋值为undefined</span><br><span class="hljs-comment">//默认参数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">power</span>(<span class="hljs-params">base, exponent = <span class="hljs-number">2</span></span>)</span>&#123;<br>    ....<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(power(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><p><code>return</code>后面没有表达式将返回<code>undinfine</code>,没有<code>retuen</code>语句也返回<code>undefined</code></p><h3 id="理解参数"><a href="#理解参数" class="headerlink" title="理解参数"></a>理解参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//通过访问argument对象的length属性可以获知有多少个参数传给了函数，如下面事例</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">howManyArgs</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-built_in">arguments</span>.length);<br>&#125;<br>howManArgs(<span class="hljs-string">&quot;string&quot;</span>,<span class="hljs-number">45</span>);<span class="hljs-comment">//2</span><br>howManyArgs(<span class="hljs-string">&quot;4&quot;</span>);<span class="hljs-comment">//0</span><br>howManyArgs(<span class="hljs-number">12</span>);<span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><h3 id="Javascript函数没有重载"><a href="#Javascript函数没有重载" class="headerlink" title="Javascript函数没有重载"></a>Javascript函数没有重载</h3><h2 id="基本类型与引用类型的值"><a href="#基本类型与引用类型的值" class="headerlink" title="基本类型与引用类型的值"></a>基本类型与引用类型的值</h2><p>ECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。</p><p>在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。第3章讨论了5种基本数据类型：Undefined、Null、Boolean、Number和String。这5种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。</p><p>引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的。</p><p>对于引用类型的值，我们可以为其添加属性和方法，也可以改变和删除其属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>person.name = <span class="hljs-string">&quot;Niki&quot;</span>;<br>alert(person.name);<br><span class="hljs-comment">/*以上代码创建了一个对象并将其保存在了变量person中。然后，我们为该对象添加了一个名为name的属性，并将字符串值&quot;Nicholas&quot;赋给了这个属性。</span><br><span class="hljs-comment">如果对象不被销毁或者这个属性不被删除，则这个属性将一直存在。*/</span><br><br><br><span class="hljs-comment">//然而，我们不能给基本类型的值添加属性</span><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Niko&quot;</span>;<br>name.age = <span class="hljs-number">27</span>;<br>alert(name.age); <span class="hljs-comment">//undefine</span><br></code></pre></td></tr></table></figure><h2 id="复制变量值（按值和按引用）"><a href="#复制变量值（按值和按引用）" class="headerlink" title="复制变量值（按值和按引用）"></a>复制变量值（按值和按引用）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> num2 = name1;<br><span class="hljs-comment">//只是用num2初始化num1,以后这两个变量相互独立</span><br><br></code></pre></td></tr></table></figure><p>然而当一个变量复制引用类型的值时，同样也会将存储在变量对象的值复制一份到为新变量分配的空间中。不同的是，这个值复制一份放到为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另一个变量，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-keyword">var</span> obj2 = obj1;<br>obj1.name = <span class="hljs-string">&quot;Niko&quot;</span>;<br>alert(obj2.name); <span class="hljs-comment">//Niko </span><br><span class="hljs-comment">//obj1与obj2指向同一个对象</span><br></code></pre></td></tr></table></figure><h2 id="参数传递-所有的参数都是按值传递的"><a href="#参数传递-所有的参数都是按值传递的" class="headerlink" title="参数传递(所有的参数都是按值传递的)"></a>参数传递(所有的参数都是按值传递的)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTen</span>(<span class="hljs-params">num</span>)</span>&#123;<br>    num += <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">const</span> = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> result = addTen(count);<br>alert(<span class="hljs-keyword">const</span>) <span class="hljs-comment">//20 值不改变</span><br>alert(reslut) <span class="hljs-comment">//值为30 </span><br><span class="hljs-comment">//ECMAScript中所有函数的参数都是按值传递的。也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样</span><br></code></pre></td></tr></table></figure><h2 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof操作符是确定一个变量是字符串、数值、布尔值，还是undefined的最佳工具。如果变量的值是一个对象或null，则typeof操作符会像下面例子中所示的那样返回”object”</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>如果变量是给定引用类型（根据它的原型链来识别；第6章将介绍原型链）的实例，那么instanceof操作符就会返回true。请看下面的例子：</p><h2 id="执行环境和作用域"><a href="#执行环境和作用域" class="headerlink" title="执行环境和作用域"></a>执行环境和作用域</h2><p>每个执行环境都有一个与之相关联的对象，环境中定义的所以变量和函数都保存在这个对象中</p><h3 id="全局执行环境"><a href="#全局执行环境" class="headerlink" title="全局执行环境"></a>全局执行环境</h3><p>全局执行环境是最外围的一个执行环境。根据ECMAScript实现所在的宿主环境不同，表示执行环境的对象也不一样。在Web浏览器中，全局执行环境被认为是window对象（第7章将详细讨论），因此所有全局变量和函数都是作为window对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出——例如关闭网页或浏览器——时才会被销毁）。</p><p>请看下例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> color = <span class="hljs-string">&quot;blue&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeColor</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> anotherColor = <span class="hljs-string">&quot;red&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swapColor</span></span>&#123;<br>        <span class="hljs-keyword">var</span> tempColor = anotherColor;<br>        anotherColor = color;<br>        color = tempColor;<br>        <span class="hljs-comment">//可以访问到color,anotherColor和tempColor</span><br>    &#125;<br>    <span class="hljs-comment">// 可以访问color和anotherColor</span><br>&#125;<br><span class="hljs-comment">// 这里只能访问到color</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h2><ul><li>try-catch的catch块</li><li>with语句</li></ul><p>待补充。。。</p><h2 id="没有块级作用域"><a href="#没有块级作用域" class="headerlink" title="没有块级作用域"></a>没有块级作用域</h2><p>–es6 新增了let块级作用域</p><h3 id="绑定和作用域"><a href="#绑定和作用域" class="headerlink" title="绑定和作用域"></a>绑定和作用域</h3><ul><li>在整个函数或块之外定义的绑定，作用域是整个程序，意味着你在任何地方都可以使用此绑定，这称为全局<code>绑定</code></li><li>在函数参数创建的绑定或在函数内声明的绑定只能在函数内引用，这称为<code>局部绑定</code></li><li><code>let</code>和<code>const</code>声明他们的块中局部可见，即时在一个该{ }局部可见，而<code>关键字</code>创建的是旧式绑定没有这个概念</li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>可以按照你的预想工作–仍然可以访问绑定的两个实例，这种能够引用封装作用域中的局部变量的特定实例的功能叫做闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wrapValue</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> locol = n;<br>    <span class="hljs-keyword">return</span><span class="hljs-function">() =&gt;</span> locol;<br>&#125;<br><span class="hljs-keyword">let</span> wrap1 = wrapValue(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">let</span> wrap2 = wrapValue(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(wrap1());<br><span class="hljs-comment">//-&gt; 1</span><br><span class="hljs-built_in">console</span>.log(wrap2());<br><span class="hljs-comment">//-&gt; 2 </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础ECMA语法篇(1)</title>
    <link href="/2020/12/29/1/"/>
    <url>/2020/12/29/1/</url>
    
    <content type="html"><![CDATA[<h1 id="ECMAJavaScript语法1"><a href="#ECMAJavaScript语法1" class="headerlink" title="ECMAJavaScript语法1"></a>ECMAJavaScript语法1</h1><h2 id="1、区分大小写"><a href="#1、区分大小写" class="headerlink" title="1、区分大小写"></a>1、区分大小写</h2><h2 id="2、标识符（即变量、函数属性的名字，函数的参数等）"><a href="#2、标识符（即变量、函数属性的名字，函数的参数等）" class="headerlink" title="2、标识符（即变量、函数属性的名字，函数的参数等）"></a>2、标识符（即变量、函数属性的名字，函数的参数等）</h2><p>—-第一个字符是是字母，下划线或$，其他字符可以是字母，下划线，美元符号或数字</p><p>命名最好使用驼峰式</p><blockquote><p>例如firstSecond、myCar、doSomethingImportant</p></blockquote><h2 id="3、注释和C一样"><a href="#3、注释和C一样" class="headerlink" title="3、注释和C一样"></a>3、注释和C一样</h2><h2 id="4、语句"><a href="#4、语句" class="headerlink" title="4、语句"></a>4、语句</h2><p>ECMAJavaScript中的语句以一个分号结尾；如果省略分号，则由解析器确定语句的结尾，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sun = a+b  <span class="hljs-comment">//可以没有分号，但推荐最好使用分号</span><br><br></code></pre></td></tr></table></figure><h2 id="4、变量"><a href="#4、变量" class="headerlink" title="4、变量"></a>4、变量</h2><p>变量为松散类型，即可以保存任意类型的变量如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> message;<br><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>;<br><span class="hljs-comment">//还可以直接赋值更改变量类型，如：</span><br>message = <span class="hljs-number">100</span>;  <span class="hljs-comment">//可以这样用，但不推荐</span><br><br></code></pre></td></tr></table></figure><p>但是，var所定义的是局部变量，只能在函数体内部才能使用如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>;<br>&#125;<br>test();<br>alert(message); <span class="hljs-comment">//错误，提示message未定义</span><br></code></pre></td></tr></table></figure><p>但是如果省略var操作符，定义的就是全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    message = <span class="hljs-string">&quot;hi&quot;</span>;<br>&#125;<br>test();<br>alert(message); <span class="hljs-comment">//正确，提示message未定义</span><br></code></pre></td></tr></table></figure><p>使用一条语句定义多个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>,<br>    found = <span class="hljs-literal">false</span>,<br>    age = <span class="hljs-number">29</span>;<br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><code>Undefined</code> 表示变量只声明了，没有定义，或者都没声明的变量</p><p><code>Null</code>,  </p><p><code>Boolean</code>,</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201228124142675.png" alt="image-20201228124142675"></p><p>其他类型的变量可以调用Boolean进行类型转换，转化规则如上表所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 运行这里的代码会报警告</span><br><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-keyword">if</span> (message)&#123;  <span class="hljs-comment">//这里的message被转换成boolean类型</span><br>        alert(<span class="hljs-string">&quot;value is true&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>Number</code>,</p><p>浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数。例如，0.1加0.2的结果不是0.3，而是0.30000000000000004。这个小小的舍入误差会导致无法测试特定的浮点数值。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(a+b==<span class="hljs-number">0.3</span>)&#123;<br>    alert(<span class="hljs-string">&quot;结果是0.3！&quot;</span>);  <span class="hljs-comment">//其实并得不到0.3</span><br>&#125;<br><span class="hljs-comment">//在这个例子中，我们测试的是两个数的和是不是等于0.3。如果这两个数是0.05和0.25，或者是0.15和0.15都不会有问题。而如前所述，如果这两个数是0.1和0.2，那么测试将无法通过。因此，永远不要测试某个特定的浮点数值。关于浮点数值计算会产生舍入误差的问题，有一点需要明确：这是使用基于IEEE754数值的浮点计算的通病，ECMAScript并非独此一家；其他使用相同数值格式的语言也存在这个问题。</span><br></code></pre></td></tr></table></figure><p>NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）。例如，在其他编程语言中，任何数值除以非数值都会导致错误，从而停止代码执行。但在ECMAScript中，任何数值除以非数值会返回NaN，因此不会影响其他代码的执行。</p><p>针对NaN的这两个特点，ECMAScript定义了isNaN()函数。这个函数接受一个参数，该参数可以是任何类型，而函数会帮我们确定这个参数是否“不是数值”。isNaN()在接收到一个值之后，会尝试将这个值转换为数值。某些不是数值的值会直接转换为数值，例如字符串”10”或Boolean值。而任何不能被转换为数值的值都会导致这个函数返回true。</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201228125525947.png" alt="image-20201228125525947"></p><h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><p>有3个函数可以把非数值转换为数值：Number()、parseInt()和parseFloat()。第一个函数，即转型函数Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。</p><ul><li><ul><li><pre><code>Number()`函数的转换规则- 如果是`Boolean`值，`true`和`false`将分别被转换为1和0。- 如果是`null`值，返回0。- 如果是`undefined`，返回`NaN`。- 如果是对象，则调用对象的`valueOf()`方法，然后依照前面的规则转换返回的值。如果转换的结果是`NaN`，则调用对象的`toString()`方法，然后再次依照前面的规则转换返回的字符串值- 如果是字符串，遵循下列规则：   - 如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即&quot;1&quot;会变成1, &quot;123&quot;会变成123，而&quot;011&quot;会变成11（注意：前导的零被忽略了）；  - 如果字符串中包含有效的浮点格式，如&quot;1.1&quot;，则将其转换为对应的浮点数值（同样，也会忽略前导零）；  - 如果字符串中包含有效的十六进制格式，例如&quot;0xf&quot;，则将其转换为相同大小的十进制整数值；  - 如果字符串是空的（不包含任何字符），则将其转换为0；  - 如果字符串中包含除上述格式之外的字符，则将其转换为NaN。<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>    <br><br>`parseInt()`函数的转换规则<br><br>使用`parseInt()`函数时，更多看其是否符合数值模式。忽略字符串前的空格，知道找到第一个非空格字符。如果第一个字符不是数字字符或者负号，`parseInt()`就会返回NaN；也就是说，用`parseInt()`转换空字符串会返回`NaN`（Number()对空字符返回<span class="hljs-number">0</span>）<br><br>如果第一个字符是数字字符，`parseInt()`会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。例如，`&quot;<span class="hljs-number">1234</span>blue<span class="hljs-string">&quot;`会被转换为`1234`，因为&quot;</span>blue<span class="hljs-string">&quot;会被完全忽略。类似地，`&quot;22.5&quot;</span>`会被转换为`22`，因为小数点并不是有效的数字字符。<br><br>`String`<br><br>`ECMAScript`中的字符串是`不可变`的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量<br><br>`Object`(对象)<br><br>ECMAScript中的对象其实就是一组数据和功能的集合。对象可以通过执行<span class="hljs-keyword">new</span>操作符后跟要创建的对象类型的名称来创建。而创建Object类型的实例并为其添加属性和（或）方法，就可以创建自定义对象，如下所示：<br><br>`var o = <span class="hljs-keyword">new</span> Object`<br><br>- ```<br>  Object的每个实例都具有下列属性和方法。<br>  <br>  - `constructor`：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是`Object()`<br>  - `hasOwnProperty(propertyName)`：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名`（propertyName）`必须以字符串形式指定（例如：`o.hasOwnProperty(<span class="hljs-string">&quot;name&quot;</span>)`。<br>  - `isPrototypeOf(object)：`用于检查传入的对象是否是当前对象的原型<br>  - `propertyIsEnumerable(propertyName)：`用于检查给定的属性是否能够使用for-in语句（本章后面将会讨论）来枚举。与`hasOwnProperty()`方法一样，作为参数的属性名必须以字符串形式指定。<br>  toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。❏ toString()：返回对象的字符串表示。❏ valueOf()：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
