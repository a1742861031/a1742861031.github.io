<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ES6的一些新特性(持续更新)</title>
    <link href="/2021/01/07/ES6/"/>
    <url>/2021/01/07/ES6/</url>
    
    <content type="html"><![CDATA[<h1 id="let与var的区别"><a href="#let与var的区别" class="headerlink" title="let与var的区别"></a>let与var的区别</h1><ul><li><code>var</code>可以重复声明，同一作用域下<code>let</code> 不可以重复声明</li><li><code>var</code>全局作用域和函数作用域，<code>let</code>全局作用域和块级作用域，块，就是指一个<code>&#123;&#125;</code></li><li><code>var</code>进行与解析 ，<code>let</code>不可以预解析</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS进阶学习笔记</title>
    <link href="/2021/01/07/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/01/07/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h1><p>1、数据存储在本地浏览器中</p><p>2、设置、读取方便、页面刷新不会丢失数据</p><p>3、容量较大，sessionStorage约为5M、localStorage约为20M</p><p>4、只能存储字符串</p><h2 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h2><p>1、生命周期为关闭浏览器窗口</p><p>2、在同一个窗口数据共享</p><p>3、以键值对的方式存储</p><p>键与值一一对应</p><p>存储数据<code>sessionStorage.setItem(&#39;键&#39;，&#39;值&#39;)</code></p><p>获取数据<code>sessionStorage.getItem(&#39;键&#39;)</code></p><p>删除数据<code>sessionStorage.removeItem(&#39;键&#39;)</code></p><p>删除所以数据<code>sessionStorage.clear()</code></p><h2 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h2><p>1、生命周期永久生效，除非手动删除，否者关闭页面也会存在</p><p>2、可以多窗口共享(同一个浏览器共享)</p><p>方法与sessionStorage一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> username = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#username&#x27;</span>);<br>      <span class="hljs-keyword">var</span> remember = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#remember&#x27;</span>);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;username&#x27;</span>)) &#123;<br>          username.value = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;username&#x27;</span>);<br>          remember.checked = <span class="hljs-literal">true</span>;<br>      &#125;<br>      remember.addEventListener(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.checked) &#123;<br>              <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;username&#x27;</span>, username.value)<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;username&#x27;</span>);<br>          &#125;<br>      &#125;)<br></code></pre></td></tr></table></figure><h1 id="jsES6中的类和对象"><a href="#jsES6中的类和对象" class="headerlink" title="jsES6中的类和对象"></a>jsES6中的类和对象</h1><h2 id="创建类和对象"><a href="#创建类和对象" class="headerlink" title="创建类和对象"></a>创建类和对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uanme</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;Liudehua&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(ldh.uname);<br></code></pre></td></tr></table></figure><ol><li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li><li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li><li>多个函数方法之间不需要添加逗号分隔</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li></ol><h2 id="类中添加方法"><a href="#类中添加方法" class="headerlink" title="类中添加方法"></a>类中添加方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">uanme</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">sing</span>(<span class="hljs-params">songName</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(songName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constuctor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">money</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son();<br>son.money;<br></code></pre></td></tr></table></figure><p>子类使用super关键字访问父类的方法，这里调用父类的函数，可以是构造函数，可以是普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义了父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>&#125;<br> &#125;<br><span class="hljs-comment">//子元素继承父类</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(x, y); <span class="hljs-comment">//使用super调用了父类中的构造函数</span><br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    son.sum(); <span class="hljs-comment">//结果为3</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong> </p><ol><li>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</li><li>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</li><li>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</li></ol><p>super.父类方法名()可调用父类的普通函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 父类有加法方法</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);<br>   &#125;<br> &#125;<br> <span class="hljs-comment">// 子类继承父类加法方法 同时 扩展减法方法</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>   <span class="hljs-comment">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span><br>   <span class="hljs-built_in">super</span>(x, y);<br>   <span class="hljs-built_in">this</span>.x = x;<br>   <span class="hljs-built_in">this</span>.y = y;<br><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">subtract</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x - <span class="hljs-built_in">this</span>.y);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>);<br>son.subtract(); <span class="hljs-comment">//2</span><br>son.sum();<span class="hljs-comment">//8</span><br></code></pre></td></tr></table></figure><h2 id="ES6中的注意点"><a href="#ES6中的注意点" class="headerlink" title="ES6中的注意点"></a>ES6中的注意点</h2><p>ES6必须先定义类，再才能实例化</p><p>类里面共有的属性和方法一定要加this</p><p>类里面的this指向问题：constructor里面的this指向创建的对象 方法中的this指向调用者</p><h2 id="TAB选项栏案例"><a href="#TAB选项栏案例" class="headerlink" title="TAB选项栏案例"></a>TAB选项栏案例</h2><h1 id="构造函数与原型（ES6之前）"><a href="#构造函数与原型（ES6之前）" class="headerlink" title="构造函数与原型（ES6之前）"></a>构造函数与原型（ES6之前）</h1><h2 id="对象的三种创建方式–复习"><a href="#对象的三种创建方式–复习" class="headerlink" title="对象的三种创建方式–复习"></a>对象的三种创建方式–复习</h2><ol><li><p>字面量方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br></code></pre></td></tr></table></figure></li><li><p>new关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure></li><li><p>构造函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure><h2 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h2></li></ol><h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><p>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(ldh.uname);<span class="hljs-comment">//实例成员只能通过实例化的对象来访问</span><br></code></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>     <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>    &#125;<br>&#125;<br>Star.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(Star.sex);<span class="hljs-comment">//静态成员只能通过构造函数来访问</span><br></code></pre></td></tr></table></figure><h2 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h2><p>存在浪费内存的问题：每创建一个对象都要单独开辟一个空间</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106141737235.png" alt="image-20210106141737235"></p><h2 id="构造函数原型prototype"><a href="#构造函数原型prototype" class="headerlink" title="构造函数原型prototype"></a>构造函数原型prototype</h2><p>每一个构造函数都有一个prototype属性，指向另一个对象。这个prototype本身都是一个对象，这个对象的所以属性和方法，都会被构造函数所拥有</p><p>把那些不变的方法，直接定义在prototype对象上，这样所有对象的实例可以共享这些方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br>   <span class="hljs-comment">//  this.sing = function() &#123;</span><br>     <span class="hljs-comment">//console.log(&#x27;我会唱歌&#x27;);</span><br>    &#125;<br>&#125;<br>Star.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//在原型对象上添加一个共有的方法</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br>ldh.sing();<br></code></pre></td></tr></table></figure><p>公共属性定义在构造函数里，公共方法放在原型对象里面</p><h2 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型 _proto_"></a>对象原型 <code>_proto_</code></h2><p>对象有一个属性<code>_proto_</code>指向构造函数的prototype原型对象，之所以可以使用构造函数prototype原型对象的属性和方法 ，就是因为对象有<code>_proto</code>_存在</p><p>​    <img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106143345685.png" alt="image-20210106143345685"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106143416554.png" alt="image-20210106143416554"></p><p>方法的查找规则：首先看ldh对象身上是否有sing方法，如果有就执行这个对象上的sing</p><p>如果没有sing这个方法，应为_proto_的存在，就去构造函数原型对象prototype身上查找</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。<br>如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。<br>如果还没有就查找原型对象的原型（<span class="hljs-built_in">Object</span>的原型对象）。<br>依此类推一直找到 <span class="hljs-built_in">Object</span> 为止（<span class="hljs-literal">null</span>）。<br>__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。<br></code></pre></td></tr></table></figure><h2 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a>constructor构造函数</h2><p>对象原型(<em>proto</em>)和构造函数(<em>prototype</em>)原型对象里面都有一个属性constructor属性，constructor指向构造函数本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//如果我们这样写就有问题：</span><br>Star.prototype = &#123;<br>    <span class="hljs-comment">//如果我们修改了原来的原型对象，给原型对象赋值的是一个新的对象，则必须手动让construcor指向原来的构造函数</span><br>    <span class="hljs-title">constructor</span>:<span class="hljs-title">Star</span>,//重要<br>    <span class="hljs-title">sing</span>:<span class="hljs-title">function</span>(<span class="hljs-params"></span>)&#123;<br>&#125;,<br>    movie:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106145224927.png" alt="image-20210106145224927"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106150011894.png" alt="image-20210106150011894"></p><p>原型链的作用就在于一个对象可以一层接着一层向上查找</p><p>JavaScript 成员查找机制 按照原型链的方向进行查找</p><p>1、当访问一个对象的属性（或者方法时），先查找这个对象本身有无该属性</p><p>2、如果没有就查找它的原型(<code>_proto_</code>指向的<code>prototype</code>原型对象)</p><p>3、如果还没有就查找原型对象的原型（object原型对象）</p><p>4、还是查找不到则到了最顶层null</p><p>原型对象中的this指向问题</p><p>1、在构造函数中，this指向对象实例</p><p>2、在原型对象中，原型对象函数中this指向实例对象</p><h2 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h2><p>通过原型对象，对原来的内置对象进行扩展自定义方法，比如给数组增加自定义求偶数的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.prototype);<br><span class="hljs-built_in">Array</span>.prototype.sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt; <span class="hljs-built_in">this</span>.length;i++)&#123;<br>        sum+=<span class="hljs-built_in">this</span>[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr.sum();<br></code></pre></td></tr></table></figure><p>#继承</p><h2 id="call-方法"><a href="#call-方法" class="headerlink" title="call()方法"></a>call()方法</h2><p>可以修改函数的this指向</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210106214107229.png" alt="image-20210106214107229"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">x,y</span>)</span>&#123;<br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hahaha&quot;</span>);<br>         <span class="hljs-built_in">console</span>.log(x+y);<br>     &#125;<br>     <span class="hljs-keyword">var</span> o =&#123;<br>         name : <span class="hljs-string">&#x27;andy&#x27;</span><br>     &#125;<br>     <span class="hljs-comment">// fn.call(); 可以调用函数</span><br>     fn.call(o,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">//改变了函数的this指向 此时函数的this指向了o这个对象</span><br></code></pre></td></tr></table></figure><h2 id="ES5中的继承"><a href="#ES5中的继承" class="headerlink" title="ES5中的继承"></a>ES5中的继承</h2><h3 id="利用构造函数继承父类型的属性，利用原型对象继承父类型的方法"><a href="#利用构造函数继承父类型的属性，利用原型对象继承父类型的方法" class="headerlink" title="利用构造函数继承父类型的属性，利用原型对象继承父类型的方法"></a>利用构造函数继承父类型的属性，利用原型对象继承父类型的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname,age</span>)</span>&#123;<br>           <span class="hljs-built_in">this</span>.uname = uname;<br>           <span class="hljs-built_in">this</span>.age = age;<br>       &#125;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname,age</span>)</span>&#123;<br>           Father.call(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//此时this指向子构造函数</span><br>       &#125;<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="利用原型对象继承父类型方法"><a href="#利用原型对象继承父类型方法" class="headerlink" title="利用原型对象继承父类型方法"></a>利用原型对象继承父类型方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 父构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>  <span class="hljs-comment">// this 指向父构造函数的对象实例</span><br>  <span class="hljs-built_in">this</span>.uname = uname;<br>  <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br>Father.prototype.money = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">100000</span>);<br> &#125;;<br> <span class="hljs-comment">// 2 .子构造函数 </span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">uname, age, score</span>) </span>&#123;<br>      <span class="hljs-comment">// this 指向子构造函数的对象实例</span><br>      Father.call(<span class="hljs-built_in">this</span>, uname, age);<br>      <span class="hljs-built_in">this</span>.score = score;<br>  &#125;<br><span class="hljs-comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span><br>  Son.prototype = <span class="hljs-keyword">new</span> Father();<br>  <span class="hljs-comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span><br>  Son.prototype.constructor = Son;<br>  <span class="hljs-comment">// 这个是子构造函数专门的方法</span><br>  Son.prototype.exam = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;孩子要考试&#x27;</span>);<br><br>  &#125;<br>  <span class="hljs-keyword">var</span> son = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>);<br>  <span class="hljs-built_in">console</span>.log(son);<br></code></pre></td></tr></table></figure><h1 id="ES5新增方法"><a href="#ES5新增方法" class="headerlink" title="ES5新增方法"></a>ES5新增方法</h1><h2 id="数组中"><a href="#数组中" class="headerlink" title="数组中"></a>数组中</h2><p><code>forEach()</code>、<code>map()</code>、<code>some()</code>、<code>filter()</code>、<code>every()</code>;</p><h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>       arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,array</span>)</span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;每个数组元素&#x27;</span>+value);<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;每个数组元素索引号&#x27;</span>+index);  <br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数组本身&#x27;</span>,array);<br>       &#125;)<br><span class="hljs-comment">//参数一是:数组元素</span><br>      <span class="hljs-comment">//参数二是:数组元素的索引</span><br>      <span class="hljs-comment">//参数三是:当前的数组</span><br></code></pre></td></tr></table></figure><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter()方法"></a>filter()方法</h3><p>用来创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于筛选数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">66</span>, <span class="hljs-number">4</span>, <span class="hljs-number">88</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> newArr = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index,array</span>) </span>&#123;<br> <span class="hljs-comment">//参数一是:数组元素</span><br>   <span class="hljs-comment">//参数二是:数组元素的索引</span><br>   <span class="hljs-comment">//参数三是:当前的数组</span><br>   <span class="hljs-keyword">return</span> value &gt;= <span class="hljs-number">20</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(newArr);<span class="hljs-comment">//[66,88] //返回值是一个新数组</span><br></code></pre></td></tr></table></figure><p>###some()方法</p><p>用于检测数组中的元素是否满足指定条件，</p><p>注意它的返回值是布尔值，如果查找到这个元素 ，就返回true，查不到就返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">some 查找数组中是否有满足条件的元素 <br> <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>];<br> <span class="hljs-keyword">var</span> flag = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,array</span>) </span>&#123;<br>    <span class="hljs-comment">//参数一是:数组元素</span><br>     <span class="hljs-comment">//参数二是:数组元素的索引</span><br>     <span class="hljs-comment">//参数三是:当前的数组</span><br>     <span class="hljs-keyword">return</span> value &lt; <span class="hljs-number">3</span>;<br>  &#125;);<br><span class="hljs-built_in">console</span>.log(flag);<span class="hljs-comment">//false返回值是布尔值,只要查找到满足条件的一个元素就立马终止循环</span><br></code></pre></td></tr></table></figure><h2 id="案例：商品查询"><a href="#案例：商品查询" class="headerlink" title="案例：商品查询"></a>案例：商品查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs JS">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        table &#123;<br>            width: 400px;<br>            border: 1px solid #000;<br>            border-collapse: collapse;<br>            margin: <span class="hljs-number">0</span> auto;<br>        &#125;<br><br>        td,<br>        th &#123;<br>            border: 1px solid #000;<br>            text-align: center;<br>        &#125;<br><br>        input &#123;<br>            width: 50px;<br>        &#125;<br><br>        .search &#123;<br>            width: 600px;<br>            margin: 20px auto;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;search&quot;</span>&gt;<br>        按照价格查询: &lt;input type=&quot;text&quot; class=&quot;start&quot;&gt; - &lt;input type=&quot;text&quot; class=&quot;end&quot;&gt; &lt;button<br>            class=&quot;search-price&quot;&gt;搜索&lt;/button&gt; 按照商品名称查询: &lt;input type=&quot;text&quot; class=&quot;product&quot;&gt; &lt;button<br>            class=&quot;search-pname&quot;&gt;查询&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;table&gt;<br>        &lt;thead&gt;<br>            &lt;tr&gt;<br>                &lt;th&gt;id&lt;/th&gt;<br>                &lt;th&gt;产品名称&lt;/th&gt;<br>                &lt;th&gt;价格&lt;/th&gt;<br>            &lt;/tr&gt;<br>        &lt;/thead&gt;<br>        &lt;tbody&gt;<br><br><br>        &lt;/tbody&gt;<br>    &lt;/table&gt;<br>    &lt;script&gt;<br>        // 利用新增数组方法操作数据<br>        var data = [&#123;<br>            id: 1,<br>            pname: &#x27;小米&#x27;,<br>            price: 3999<br>        &#125;, &#123;<br>            id: 2,<br>            pname: &#x27;oppo&#x27;,<br>            price: 999<br>        &#125;, &#123;<br>            id: 3,<br>            pname: &#x27;荣耀&#x27;,<br>            price: 1299<br>        &#125;, &#123;<br>            id: 4,<br>            pname: &#x27;华为&#x27;,<br>            price: 1999<br>        &#125;, ];<br>        // 1. 获取相应的元素<br>        //获取响应元素<br>        var tbody = document.querySelector(&#x27;tbody&#x27;);<br>        var search_price = document.querySelector(&#x27;.search-price&#x27;);<br>        var start = document.querySelector(&#x27;.start&#x27;);<br>        var end = document.querySelector(&#x27;.end&#x27;);<br>        var search_pname = document.querySelector(&#x27;.search-pname&#x27;);<br>        var product = document.querySelector(&#x27;.product&#x27;)<br><br>        setData(data);<br>        function setData(mydata) &#123;<br>            mydata.forEach(function (value) &#123; //渲染数据<br>                var tr = document.createElement(&#x27;tr&#x27;);<br>                tr.innerHTML = &#x27;&lt;td&gt;&#x27; + value.id + &#x27;&lt;/td&gt;&lt;td&gt;&#x27; + value.pname + &#x27;&lt;/td&gt;&lt;td&gt;&#x27; + value.price +<br>                    &#x27;&lt;/td&gt;&#x27;;<br>                tbody.appendChild(tr)<br>            &#125;);<br>        &#125;<br>        search_price.addEventListener(&#x27;click&#x27;, function () &#123;<br>            // setData(null);<br>            tbody.innerHTML = &#x27;&#x27;;<br>            var serch_data = data.filter(function (value) &#123;<br>                return value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;<br>            &#125;)<br>            console.log(serch_data);<br>            setData(serch_data);<br>        &#125;)<br>        search_pname.addEventListener(&#x27;click&#x27;,function()&#123;<br>            tbody.innerHTML = &#x27;&#x27;;<br>            var serch_data = data.filter(function(value)&#123;<br>                return value.pname == product.value;<br>            &#125;)<br>            setData(serch_data);<br>        &#125;)<br>    &lt;/script&gt;<br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="字符串中新增方法"><a href="#字符串中新增方法" class="headerlink" title="字符串中新增方法"></a>字符串中新增方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str  = <span class="hljs-string">&#x27; andy &#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str);<br><span class="hljs-keyword">var</span> str1 = str.trim();<span class="hljs-comment">//去掉字符串两端的空格 注意只能取出两端的空格 返回一个新的字符串</span><br></code></pre></td></tr></table></figure><p>用这个方法可以解决输入框的空格小bug</p><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><p><code>Object.key(obj)</code> 用于返回对象自身的所有属性名</p><p>效果类似于for in</p><p><code>Object.defineProperty(obj,prop,discriptor)</code>定义对象中的新属性或修改原有属性</p><p>obj:必须 目标对象</p><p>prop：必须 需定义或修改的属性的名字</p><p>descriptor：必须 目标属性所拥有的特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//对其中第三个参数的说明</span><br><span class="hljs-built_in">Object</span>.defineProperty(对象，修改或新增的属性名，&#123;<br>value:修改或新增的属性的值,<br>writable:<span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>,<span class="hljs-comment">//如果值为false 不允许修改这个属性值</span><br>enumerable: <span class="hljs-literal">false</span>,<span class="hljs-comment">//enumerable 如果值为false 则不允许遍历</span><br>        configurable: <span class="hljs-literal">false</span>  <span class="hljs-comment">//configurable 如果为false 则不允许删除这个属性 属性是否可以被删除或是否可以再次修改特性</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210107124006608.png"></p><h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="函数的定义与调用"><a href="#函数的定义与调用" class="headerlink" title="函数的定义与调用"></a>函数的定义与调用</h2><h3 id="函数定义方式"><a href="#函数定义方式" class="headerlink" title="函数定义方式"></a>函数定义方式</h3><p><code>function fn()&#123;&#125;</code>  命名函数</p><p><code>var fn = function()&#123;&#125; </code>匿名函数</p><p><code>利用new Function(&#39;参数1&#39;，&#39;参数2&#39;,&#39;函数体&#39;)</code>了解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;console.log(a+b)&#x27;</span>);<br>f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//里面的参数必须要用字符串</span><br></code></pre></td></tr></table></figure><p>所有函数都是Function 的实例对象  即函数也是一个对象 有原型</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210107125029058.png" alt="image-20210107125029058"></p><h3 id="函数的调用函数"><a href="#函数的调用函数" class="headerlink" title="函数的调用函数"></a>函数的调用函数</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><p><code>fn()</code> <code>fn.call()</code></p><p>####对象方法</p><p><code>对象.fn();</code></p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>在new对象是自动执行</p><h4 id="绑定事件函数"><a href="#绑定事件函数" class="headerlink" title="绑定事件函数"></a>绑定事件函数</h4><p>通过事件调用函数</p><h4 id="定时器函数"><a href="#定时器函数" class="headerlink" title="定时器函数"></a>定时器函数</h4><p>定时器自动调用</p><h4 id="理解执行函数"><a href="#理解执行函数" class="headerlink" title="理解执行函数"></a>理解执行函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;立即执行&#x27;</span>)<br>&#125;)()  <span class="hljs-comment">//立即执行函数自己调用</span><br></code></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h3><p>当函数调用方式不同时，函数this指向也不同，一般情况下，this指向调用者</p><h4 id="普通函数-1"><a href="#普通函数-1" class="headerlink" title="普通函数"></a>普通函数</h4><p>this指向window</p><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><p>this指向对象</p><h4 id="构造函数中"><a href="#构造函数中" class="headerlink" title="构造函数中"></a>构造函数中</h4><p>this指向实例对象，原型对象中的this也是指向实例对象</p><h4 id="绑定事件函数-1"><a href="#绑定事件函数-1" class="headerlink" title="绑定事件函数"></a>绑定事件函数</h4><p>this指向函数调用者</p><h4 id="定时器函数-1"><a href="#定时器函数-1" class="headerlink" title="定时器函数"></a>定时器函数</h4><p>this指向window</p><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>this指向window</p><h3 id="改变函数的this指向"><a href="#改变函数的this指向" class="headerlink" title="改变函数的this指向"></a>改变函数的this指向</h3><p><code>bind() call() apply()三种方法</code></p><h4 id="call-函数"><a href="#call-函数" class="headerlink" title="call()函数"></a>call()函数</h4><p><code>fn.call(对象名,参数1，参数2,.....)</code></p><h4 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h4><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p><p>应用场景:  经常跟数组有关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o = &#123;<br>name: <span class="hljs-string">&#x27;andy&#x27;</span><br>&#125;<br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>      <span class="hljs-built_in">console</span>.log(a+b)<br>&#125;;<br>fn()<span class="hljs-comment">// 此时的this指向的是window 运行结果为3</span><br>fn.apply(o,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<span class="hljs-comment">//此时的this指向的是对象o,参数使用数组传递 运行结果为3</span><br><br><span class="hljs-comment">//可以调用函数，可以改变函数内部的this指向</span><br><span class="hljs-comment">//参数必须是数组(也可以是伪数组)</span><br><span class="hljs-comment">//主要应用 例如可以利用apply借助于数学内置对象求最大值  </span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">66</span>,<span class="hljs-number">3</span>,<span class="hljs-number">99</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">var</span> max = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-built_in">Math</span>,arr);<br><span class="hljs-comment">//原来数组中并没有求最大值这个方法</span><br><br></code></pre></td></tr></table></figure><h4 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h4><p>bind() 方法不会调用函数,但是能改变函数内部this 指向,返回的是原函数改变this之后产生的新函数</p><p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind</p><p>应用场景:不调用函数,但是还想改变this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o =&#123;<br>    <br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-keyword">var</span> f = fn.bind(o);<br>f();<br><br><span class="hljs-comment">//////////////////////////////////////////</span><br> <span class="hljs-keyword">var</span> o = &#123;<br> name: <span class="hljs-string">&#x27;andy&#x27;</span><br> &#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br><span class="hljs-built_in">console</span>.log(a + b);<br>&#125;;<br><span class="hljs-keyword">var</span> f = fn.bind(o, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//此处的f是bind返回的新函数</span><br>f();<span class="hljs-comment">//调用新函数  this指向的是对象o 参数使用逗号隔开</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>); <span class="hljs-comment">//定时禁用按钮</span><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">false</span>;<br>    &#125;.bind(<span class="hljs-built_in">this</span>),<span class="hljs-number">3000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三种方法的区别"><a href="#三种方法的区别" class="headerlink" title="三种方法的区别"></a>三种方法的区别</h4><ul><li>共同点 : 都可以改变this指向</li><li>不同点:<ul><li>call 和 apply  会调用函数, 并且改变函数内部this指向.</li><li>call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递</li><li>bind  不会调用函数, 可以改变函数内部this指向.</li></ul></li></ul><ul><li>应用场景<ol><li>call 经常做继承. </li><li>apply经常跟数组有关系.  比如借助于数学对象实现数组最大值最小值</li><li>bind  不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向. </li></ol></li></ul><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>消除了JavaScript语法的一些不合理、不严谨之处，减少了一些怪异行为</p><p>消除代码运行的一些不安全之处，保证代码安全</p><p>提高编译器速率</p><p>禁止在ECMAscript的未来版本中一些可能语法</p><h3 id="如何开启"><a href="#如何开启" class="headerlink" title="如何开启"></a>如何开启</h3><h4 id="为整个脚本开启严格模式"><a href="#为整个脚本开启严格模式" class="headerlink" title="为整个脚本开启严格模式"></a>为整个脚本开启严格模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span><br><span class="hljs-meta">　　　　&quot;use strict&quot;</span>;<br>       <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>　　　　<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>&#125;)();<br><span class="hljs-comment">//或者 </span><br>&lt;script&gt;<br><span class="hljs-meta">  　&quot;use strict&quot;</span>; <span class="hljs-comment">//当前script标签开启了严格模式</span><br>&lt;/script&gt;<br>&lt;script&gt;<br>  <span class="hljs-comment">//当前script标签未开启严格模式</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="为某个函数开启严格模式"><a href="#为某个函数开启严格模式" class="headerlink" title="为某个函数开启严格模式"></a>为某个函数开启严格模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-meta">　　&quot;use strict&quot;</span>;<br>　　<span class="hljs-comment">//下面的代码按照严格模式执行</span><br>&#125; <br><span class="hljs-comment">//当前fn函数开启了严格模式</span><br></code></pre></td></tr></table></figure><h3 id="严格模式的变化"><a href="#严格模式的变化" class="headerlink" title="严格模式的变化"></a>严格模式的变化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-meta">   &quot;use strict&quot;</span>;<span class="hljs-comment">//当前script标签未开启严格模式</span><br>num = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(num); <span class="hljs-comment">//报错，未声明变量</span><br><span class="hljs-comment">//不能删除已经声明的变量</span><br><span class="hljs-keyword">delete</span> num;<span class="hljs-comment">//报错</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//严格模式的全局作用域中，this指向undefined</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br>&#125;<br>Star();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.sex); <span class="hljs-comment">//输出undefined</span><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br>num = <span class="hljs-number">10</span> <br><span class="hljs-built_in">console</span>.log(num)<span class="hljs-comment">//严格模式后使用未声明的变量</span><br>--------------------------------------------------------------------------------<br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">delete</span> num2;<span class="hljs-comment">//严格模式不允许删除变量</span><br>--------------------------------------------------------------------------------<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 严格模式下全局作用域中函数中的 this 是 undefined</span><br>&#125;<br>fn();  <br>---------------------------------------------------------------------------------<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-built_in">this</span>.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br>&#125;<br><span class="hljs-comment">// Star();严格模式下,如果 构造函数不加new调用, this 指向的是undefined ，此时把构造函数当做普通函数 如果给他赋值则 会报错.</span><br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star();<br><span class="hljs-built_in">console</span>.log(ldh.sex);<br>----------------------------------------------------------------------------------<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//严格模式下，定时器 this 还是指向 window</span><br>&#125;, <span class="hljs-number">2000</span>);  <br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">更多严格模式要求参考MDN文档</a></p><p>函数不能有重名的参数</p><p>函数必须声明在顶层  新版本的JavaScript 会引入“块级作用域”  不允许在非函数的代码块声明函数</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="情况1-接收函数作为参数"><a href="#情况1-接收函数作为参数" class="headerlink" title="情况1  接收函数作为参数"></a>情况1  接收函数作为参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b ,callback</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a+b);<br>    callback &amp;&amp; callback();<br>&#125;<br>fn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加法执行完毕&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="情况2-将函数作为返回值输出"><a href="#情况2-将函数作为返回值输出" class="headerlink" title="情况2 将函数作为返回值输出"></a>情况2 将函数作为返回值输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;<br>fn();<br></code></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2>]]></content>
    
    
    <categories>
      
      <category>JavaScript学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jquery学习</title>
    <link href="/2021/01/05/jquery%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/05/jquery%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p>JavaScript库，通过JavaScript封装</p><h2 id="等着页面加载完在调用JQuery的方法"><a href="#等着页面加载完在调用JQuery的方法" class="headerlink" title="等着页面加载完在调用JQuery的方法"></a>等着页面加载完在调用JQuery的方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$document.ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;div&#x27;</span>).hide;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;div&#x27;</span>).hide<br>&#125;)<br></code></pre></td></tr></table></figure><p>两种方法效果一样，效果相当于js中的DOMContentLoaded</p><h2 id="顶级对象"><a href="#顶级对象" class="headerlink" title="顶级对象"></a>顶级对象</h2><p>$是JQuery的别称</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105143109748.png" alt="image-20210105143109748"></p><p>$也是JQuery中的顶级对象</p><h2 id="JQuery对象与DOM对象"><a href="#JQuery对象与DOM对象" class="headerlink" title="JQuery对象与DOM对象"></a>JQuery对象与DOM对象</h2><p>1、用元素JS获取到的对象</p><p>2、用JQuery获取来的对象</p><p>3、JQuery对象的本质：利用$对DOM对象包装后产生的对象(伪数组方式存储)，JQuery对象只能使用JQuery方法，DOM对象使用原生的JavaScript属性和方法</p><h2 id="DOM与JQuery对象相互转换"><a href="#DOM与JQuery对象相互转换" class="headerlink" title="DOM与JQuery对象相互转换"></a>DOM与JQuery对象相互转换</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105145331450.png" alt="image-20210105145331450"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.DOM对象转换成jQuery对象，方法只有一种</span><br><span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;box&#x27;</span>);  <span class="hljs-comment">// 获取DOM对象</span><br><span class="hljs-keyword">var</span> jQueryObject = $(box);  <span class="hljs-comment">// 把DOM对象转换为 jQuery 对象</span><br><br><span class="hljs-comment">// 2.jQuery 对象转换为 DOM 对象有两种方法：</span><br><span class="hljs-comment">//   2.1 jQuery对象[索引值]</span><br><span class="hljs-keyword">var</span> domObject1 = $(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment">//   2.2 jQuery对象.get(索引值)</span><br><span class="hljs-keyword">var</span> domObject2 = $(<span class="hljs-string">&#x27;div&#x27;</span>).get(<span class="hljs-number">0</span>)<br> <br></code></pre></td></tr></table></figure><h2 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h2><p>$(“选择器”)</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150020660.png" alt="image-20210105150020660"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150143537.png" alt="image-20210105150143537"></p><h2 id="JQuery隐式迭代"><a href="#JQuery隐式迭代" class="headerlink" title="JQuery隐式迭代"></a>JQuery隐式迭代</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>,<span class="hljs-string">&quot;pink&quot;</span>) <span class="hljs-comment">//给div设置背景颜色</span><br><span class="hljs-comment">//隐式迭代把匹配到的元素内部进行遍历循环，给每一个元素添加CSS方法</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150904150.png" alt="image-20210105150904150"></p><h2 id="JQuery筛选选择器"><a href="#JQuery筛选选择器" class="headerlink" title="JQuery筛选选择器"></a>JQuery筛选选择器</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105150947467.png" alt="image-20210105150947467"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105153200716.png" alt="image-20210105153200716"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BOM学习</title>
    <link href="/2021/01/03/BOM/"/>
    <url>/2021/01/03/BOM/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>什么是BOM</li><li>知道浏览器的顶级对象window</li><li>能够写出页面加载事件</li><li>写出两种定时器函数</li><li>说出js执行机制</li><li>使用location对象是实现页面跳转</li><li>能够知晓navigator对象涉及的属性</li><li>能够使用history提供的方案实现页面刷新</li></ul><h1 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h1><p>浏览器对象模型，他提供独立于内容而与浏览器窗口进行交互的对象，其核心对象是window，许多对象提供了很多方法与属性</p><h2 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>       <span class="hljs-comment">// window.onload = function() &#123;</span><br>       <span class="hljs-comment">//     var btn = document.querySelector(&#x27;button&#x27;);</span><br>       <span class="hljs-comment">//     btn.addEventListener(&#x27;click&#x27;, function() &#123;</span><br>       <span class="hljs-comment">//         alert(&#x27;点击我&#x27;);</span><br>       <span class="hljs-comment">//     &#125;)</span><br>       <span class="hljs-comment">// &#125;</span><br>       <span class="hljs-comment">// window.onload = function() &#123;</span><br>       <span class="hljs-comment">//     alert(22);</span><br>       <span class="hljs-comment">// &#125;</span><br>       <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>           btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               alert(<span class="hljs-string">&#x27;点击我&#x27;</span>);<br>           &#125;)<br>       &#125;)<br>       <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>           alert(<span class="hljs-number">22</span>);<br>       &#125;)<br>       <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               alert(<span class="hljs-number">33</span>);<br>           &#125;)<br>           <span class="hljs-comment">// load 等页面内容全部加载完毕，包含页面dom元素 图片 flash  css 等等</span><br>           <span class="hljs-comment">// DOMContentLoaded 是DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load更快一些</span><br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h2><p>浏览器窗口大小发送变化时，触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onresize = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; &#125;);<br><br></code></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="设置定时器setTimeout"><a href="#设置定时器setTimeout" class="headerlink" title="设置定时器setTimeout()"></a>设置定时器setTimeout()</h3><p>window.setTimeout(调用函数,延迟时间)  //window在调用是可省略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-comment">// 1. setTimeout </span><br>        <span class="hljs-comment">// 语法规范：  window.setTimeout(调用函数, 延时时间);</span><br>        <span class="hljs-comment">// 1. 这个window在调用的时候可以省略</span><br>        <span class="hljs-comment">// 2. 这个延时时间单位是毫秒 但是可以省略，如果省略默认的是0</span><br>        <span class="hljs-comment">// 3. 这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 &#x27;函数名()&#x27;</span><br>        <span class="hljs-comment">// 4. 页面中可能有很多的定时器，我们经常给定时器加标识符 （名字)</span><br>        <span class="hljs-comment">// setTimeout(function() &#123;</span><br>        <span class="hljs-comment">//     console.log(&#x27;时间到了&#x27;);</span><br><br>        <span class="hljs-comment">// &#125;, 2000);</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;爆炸了&#x27;</span>);<br><br>        &#125;<br>        <span class="hljs-keyword">var</span> timer1 = <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">3000</span>);<br>        <span class="hljs-keyword">var</span> timer2 = <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">5000</span>);<br>        <span class="hljs-comment">// setTimeout(&#x27;callback()&#x27;, 3000); // 我们不提倡这个写法</span><br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>定时器里面调用的函数是回调函数</p><h3 id="停止setTimeout-定时器"><a href="#停止setTimeout-定时器" class="headerlink" title="停止setTimeout()定时器"></a>停止setTimeout()定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;button&gt;点击停止定时器&lt;/button&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;爆炸了&#x27;</span>);<br><br>        &#125;, <span class="hljs-number">5000</span>);<br>        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer);<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval()定时器"></a>setInterval()定时器</h3><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210103151920110.png" alt="image-20210103151920110"></p><h3 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a>clearInterval()</h3><p>清除定时器</p><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><p>this一般指向它的<code>调用者</code></p><p>1、全局作用域下普通函数中的this指向全局对象window(注意定时器this指向window)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span><br><br>        <span class="hljs-comment">// 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br><br>        &#125;<br>        <span class="hljs-built_in">window</span>.fn();<br>        <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br><br>        &#125;, <span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 2. 方法调用中谁调用this指向谁</span><br>        <span class="hljs-keyword">var</span> o = &#123;<br>            sayHi: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// this指向的是 o 这个对象</span><br><br>            &#125;<br>        &#125;<br>        o.sayHi();<br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        <span class="hljs-comment">// btn.onclick = function() &#123;</span><br>        <span class="hljs-comment">//     console.log(this); // this指向的是btn这个按钮对象</span><br><br>        <span class="hljs-comment">// &#125;</span><br>        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// this指向的是btn这个按钮对象</span><br><br>            &#125;)<br>            <span class="hljs-comment">// 3. 构造函数中this指向构造函数的实例</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fun</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// this 指向的是fun 实例对象</span><br><br>        &#125;<br>        <span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">new</span> Fun();<br></code></pre></td></tr></table></figure><h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><p>JS是单线程，所有代码排队一次执行</p><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>同步：前一个任务结束后执行后一个任务</p><p>异步：同时执行多个任务</p><p>同步任务：主线程上执行的任务</p><p>异步任务：JS的异步是通过回调函数实现的，异步任务在任务队列中，有以下三类</p><p>普通事件 资源加载 定时器 </p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210104100700916.png" alt="image-20210104100700916"></p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210104101206187.png![image-20210104101255090](C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210104101255090.png" alt="image-20210104101206187"></p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210104101639015.png" alt="image-20210104101639015"></p><h3 id="数据在不同页面的传递"><a href="#数据在不同页面的传递" class="headerlink" title="数据在不同页面的传递"></a>数据在不同页面的传递</h3><p>使用的是location.search获取参数</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105131923487.png" alt="image-20210105131923487"></p><h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><p>navigator对象包含浏览器相关信息，</p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210105132454027.png" alt="image-20210105132454027"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM学习</title>
    <link href="/2021/01/02/DOM/"/>
    <url>/2021/01/02/DOM/</url>
    
    <content type="html"><![CDATA[<h1 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h1><p>WEB API是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>1、获取页面元素</li><li>2、给元素注册事件</li><li>3、操作DOM元素的属性</li><li>4、创建元素</li><li>5、操作DOM节点</li></ul><p>##DOM树</p><p><img src="https://img-blog.csdn.net/20151110111104365" alt="这里写图片描述"></p><p>文档：一个页面就是一个文档</p><p>元素：页面中所用标签都是元素，DOM中使用element表示</p><p>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM中使用node表示</p><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><h3 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h3><p>由于文档页面从上往下加载，所以先得有标签，scipt要写到标签下</p><p><code>document.getElementById(&quot;id&quot;)</code></p><p>注意id是大小写敏感的字符串</p><p>返回的是一个元素对象,里面包含很多方法</p><p><code>console.dir</code> 打印我们返回的元素对象 更好的查看里面的属性和方法</p><h3 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h3><p>返回的是获取过来元素对象的集合 ，都是以伪数组的形式返回</p><p><code>var tag = document.getElementsByTagName(&#39;li&#39;);</code></p><p>还可以获取父元素内部所有指定标签名的子元素，父元素必须是指明的单个元素，上述两种方法一起使用</p><p><code>document.getElementsByTagName(&#39;标签名&#39;)</code></p><h3 id="通过类名"><a href="#通过类名" class="headerlink" title="通过类名"></a>通过类名</h3><p><code>document.getElementsByClassName(&#39;类名&#39;)</code></p><h3 id="通过HTML5新增的方法获取"><a href="#通过HTML5新增的方法获取" class="headerlink" title="通过HTML5新增的方法获取"></a>通过<code>HTML5</code>新增的方法获取</h3><p><code>document.querySelector(&#39;.box&#39;)</code> （可以选择id，class，标签等）功能更强大 .box #nav</p><p>返回的是第一个元素的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>)<span class="hljs-comment">//返回的是所有元素的对象</span><br><span class="hljs-built_in">console</span>.log(x);<br></code></pre></td></tr></table></figure><p>###获取特殊元素</p><p>获取body元素</p><p>``document.body`</p><p>获取html元素</p><p><code>document.documentElement</code></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>触发–响应机制</p><p>事件有三部分组成 事件源 事件类型 事件处理程序 事件三要素</p><p>事件源：事件被触发的对象</p><p>事件类型：什么事件 例如鼠标点击（<code>onclick</code>）</p><p>事件处理程序：触发后要执行的程序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">     <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>);</span><br><span class="javascript">     btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">         alert(<span class="hljs-string">&#x27;哈哈哈&#x27;</span>);</span><br>     &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>##DOM操作元素</p><h3 id="修改元素内容"><a href="#修改元素内容" class="headerlink" title="修改元素内容"></a>修改元素内容</h3><p><code>innerHTML</code> 识别html标签  保留空格和换行 标准</p><p><code>innerText</code>  不识别html标签   去掉空格和换行 非标准</p><p>不仅可以操作元素 还可以获取元素内容</p><h3 id="修改元素属性"><a href="#修改元素属性" class="headerlink" title="修改元素属性"></a>修改元素属性</h3><p>例子：切换图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ldh&quot;</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;zxy&quot;</span>&gt;</span>张学友<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./ldh.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> ldh = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ldh&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> zxy = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;zxy&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(zxy);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="javascript">        zxy.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            img.src = <span class="hljs-string">&#x27;./zxy.jpg&#x27;</span>;</span><br>        &#125;<br><span class="javascript">        ldh.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            img.src = <span class="hljs-string">&#x27;./ldh.jpg&#x27;</span>;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表单元素属性操作"><a href="#表单元素属性操作" class="headerlink" title="表单元素属性操作"></a>表单元素属性操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;输入内容&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="javascript">        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            input.value = <span class="hljs-string">&#x27;被点击了&#x27;</span>;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span>;<span class="hljs-comment">//this指向的是事件函数的调用者</span></span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例 密码显示与隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-class">.box</span> &#123;</span><br>            position: relative;<br>            width: 400px;<br><span class="css">            <span class="hljs-selector-tag">border-bottom</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#ccc</span>;</span><br>            margin: 100px auto;<br>        &#125;<br><br><span class="css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">input</span> &#123;</span><br>            width: 370px;<br>            height: 30px;<br>            border: 0;<br>            outline: none;<br>        &#125;<br><br><span class="css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">img</span> &#123;</span><br>            position: absolute;<br>            width: 24px;<br>            top: 2px;<br>            right: 10px;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./闭眼.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;eye&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-comment">//1、获取元素</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;eye&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> pwd = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;pwd&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">        img.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (!flag) &#123;</span><br><span class="javascript">                pwd.type = <span class="hljs-string">&#x27;text&#x27;</span>;</span><br><span class="javascript">                flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">                img.src = <span class="hljs-string">&#x27;./睁眼.png&#x27;</span></span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                pwd.type = <span class="hljs-string">&#x27;password&#x27;</span>;</span><br><span class="javascript">                flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                img.src = <span class="hljs-string">&#x27;./闭眼.png&#x27;</span></span><br>            &#125;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修改样式属性"><a href="#修改样式属性" class="headerlink" title="修改样式属性"></a>修改样式属性</h3><p>JS修改style样式操作，产生行内属性，CSS权重较高</p><h4 id="元素隐藏和显示"><a href="#元素隐藏和显示" class="headerlink" title="元素隐藏和显示"></a>元素隐藏和显示</h4><p><code>display:none</code>隐藏元素 <code>display:block</code>显示元素</p><h3 id="类名样式操作"><a href="#类名样式操作" class="headerlink" title="类名样式操作"></a>类名样式操作</h3><p><code>element.className</code></p><p>直接声明一个新类，覆盖原先的样式类，适合于样式较多或者功能复杂的情况</p><p>小技巧 ：多类名原则器 直接在原先类名基础上加上空格以及新增类名，这样即可保留原来的样式，也有新增的样式</p><p>###总结</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201231161229698.png" alt="image-20201231161229698"></p><p>###排他思想</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201231162512427.png" alt="image-20201231162512427"></p><h3 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h3><p>1、<code>element.属性</code>  只可以获取html自带属性(如id的值 class的值等)</p><p>2、<code>element.getAttribute(&#39;属性&#39;)</code> 可以获取一个div等自定义属性(如自定义一个属性index)</p><p>3、通过<code>element.setAttribute(&#39;属性&#39;,&#39;值&#39;)</code>更改一个自定义属性 </p><p>4、<code>element.属性 = &#39;值&#39;</code>设置自带属性值</p><p>5、<code>div.removeAttribute(&#39;index&#39;)</code>移除属性</p><p>###设置H5自定义属性</p><p>H5约束自定义属性要用data-开头 例如<code>&lt;div data-index = &quot;1&quot;&gt;    &lt;/div&gt;</code></p><p>H5新增获取自定义属性的方法 <code>console.log(div.dataset.index)</code>dataset是个集合，存放了所以与data-开头自定义属性的集合,只能获取data-开头的自定义属性</p><p>如果自定义属性里面含多个-链接的单词，我们获取的时候采样驼峰命名法</p><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div data-list-name = <span class="hljs-string">&quot;andy&quot;</span>&gt; &lt;/div&gt;<br>div.dataset.listName<br></code></pre></td></tr></table></figure><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>利用节点的层次关系获取元素</p><p>HTML DOM树中的所有节点均可通过JavaScript进行访问，所有HTML元素均可被修改，也可以被创建和删除</p><p>节点至少拥有nodeType(节点类型)、nodeName(节点名称)和nodeValue(节点值)这三个基本属性</p><p>元素节点 nodeType 为1</p><p>属性节点 nodeType 为2</p><p>元素节点 nodeType 为3（文字、空格、换行等）</p><p>实际开发 主要操作元素节点</p><h3 id="节点操作父亲节点"><a href="#节点操作父亲节点" class="headerlink" title="节点操作父亲节点"></a>节点操作父亲节点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;erweima&quot;</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> erweima = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.erweima&quot;</span>); <span class="hljs-comment">//得到的是离它最近的父亲节点 如果找不到则返回为空</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(erweima.parentNode);</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="子节点操作父节点"><a href="#子节点操作父节点" class="headerlink" title="子节点操作父节点"></a>子节点操作父节点</h3><p><code>元素名.childNodes</code></p><p><code>元素名.children</code>(非标准) 只获得元素节点，实际开发更常用</p><p><code>元素名.firstElementChiled</code> 返回第一个子元素节点</p><p><code>元素名.lastElementChiled</code> 返回最后一个子元素节点`</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210102113856905.png" alt="image-20210102113856905"></p><h3 id="案例-：下拉菜单"><a href="#案例-：下拉菜单" class="headerlink" title="案例 ：下拉菜单"></a>案例 ：下拉菜单</h3><h3 id="兄弟节点操作"><a href="#兄弟节点操作" class="headerlink" title="兄弟节点操作"></a>兄弟节点操作</h3><p><code>node.nextElementSibling</code>  得到下一个兄弟元素节点</p><p><code>node.perviousElementSiling</code> 得到上一个兄弟元素节点</p><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p><code>document.creatElement(&#39;tagNmae&#39;)</code>  动态创建节点</p><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><p><code>node.appendChild(child)</code> node是父级，child是子集</p><p>添加元素到指定位置</p><p><code>ul.insertBefore(child,指定元素)</code> 添加到指定元素前面</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><code>node.removeChild(child)</code> node是父级，child是子集</p><h3 id="案例：删除留言"><a href="#案例：删除留言" class="headerlink" title="案例：删除留言"></a>案例：删除留言</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>       <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>       <span class="hljs-keyword">var</span> test = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>       <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>       btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">if</span> (test.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>               alert(<span class="hljs-string">&#x27;未输入内容&#x27;</span>);<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">var</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>);<br>               li.innerHTML = test.value + <span class="hljs-string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<br>               ul.insertBefore(li, ul.children[<span class="hljs-number">0</span>]);<br>           &#125;<br>           <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a&#x27;</span>);<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">as</span>);<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.length; i++) &#123;<br>               <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                   ul.removeChild(<span class="hljs-built_in">this</span>.parentNode);<br>                   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除&#x27;</span>);<br>               &#125;<br>           &#125;<br><br>       &#125;<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><p><code>node.cloneNode</code> 括号为空或者里面是false 浅拷贝 只赋值标签不赋值里面的内容 </p><p><code>node.cloneNode(true)</code> 为深拷贝，会复制内容</p><h3 id="案例-动态生成表格"><a href="#案例-动态生成表格" class="headerlink" title="案例 动态生成表格"></a>案例 动态生成表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        table &#123;<br>            width: 500px;<br>            margin: 100px auto;<br>            border-collapse: collapse;<br>            text-align: center;<br>        &#125;<br>        <br>        td,<br>        th &#123;<br><span class="css">            <span class="hljs-selector-tag">border</span>: 1<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#333</span>;</span><br>        &#125;<br>        <br>        thead tr &#123;<br>            height: 40px;<br><span class="css">            <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#ccc</span>;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>科目<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-comment">// 1.先去准备好学生的数据</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> datas = [&#123;</span><br><span class="javascript">            name: <span class="hljs-string">&#x27;魏璎珞&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 100<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;弘历&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 98<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;傅恒&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 99<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;明玉&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 88<br>        &#125;, &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;大猪蹄子&#x27;</span>,</span><br><span class="javascript">            subject: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,</span><br>            score: 0<br>        &#125;];<br><br>        <br><span class="javascript">        <span class="hljs-comment">// 2. 往tbody 里面创建行： 有几个人（通过数组的长度）我们就创建几行</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> tbody = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;tbody&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;datas.length;i++)&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> tr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;tr&#x27;</span>);</span><br>            tbody.appendChild(tr);<br><span class="javascript">            <span class="hljs-comment">//行里面创建单元格，单元格数量取决于每个对象里面的属性个数</span></span><br><span class="javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> datas[i])&#123;</span><br><span class="javascript">                <span class="hljs-comment">//创建单元格</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> td  = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;td&#x27;</span>)</span><br>                tr.appendChild(td);<br><span class="javascript">                td.textContent = datas[i][k];<span class="hljs-comment">//获得属性值            </span></span><br>            &#125;<br><span class="javascript">            <span class="hljs-comment">//创建删除单元格</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> td = <span class="hljs-built_in">document</span>. createElement(<span class="hljs-string">&#x27;td&#x27;</span>);</span><br><span class="handlebars"><span class="xml">            td.innerHTML = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>删除 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;;</span></span><br>            tr.appendChild(td);<br>        &#125;<br><span class="javascript">        <span class="hljs-comment">//删除操作</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">as</span>.length; i++)&#123;</span><br><span class="javascript">            <span class="hljs-keyword">as</span>[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                tbody.removeChild(<span class="hljs-built_in">this</span>.parentNode.parentNode);</span><br>            &#125;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：</p><p>表格格式：</p><ul><li>分为<thead>(表头)和<tbody>（表内容）</li><li>每一行为一个tr，一个tr里面每一个td为一个单元格</li></ul><p><code>creatElement</code>比<code>innerHtml</code>效率更高</p><p>消耗主要来与拼接字符串开创空间的消耗</p><p>#事件高级</p><p>##注册事件</p><p>###传统注册方式</p><p>注册事件的唯一性</p><p>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面的处理函数</p><p>###方法监听注册方式</p><p><code>addEventListener</code>它是一个方法，同一个元素同一个事件可以注册多个监听器，按照注册事件一次执行</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210102140137110.png" alt="image-20210102140137110"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//注册多个事件，都依次执行</span><br>    alert(<span class="hljs-number">22</span>);<br>&#125;)<br>btn[<span class="hljs-number">1</span>].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-number">33</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>##解绑事件</p><p>###传统解绑方式</p><p><code>eventTarget.onclick = null</code></p><h3 id="方法监听解绑"><a href="#方法监听解绑" class="headerlink" title="方法监听解绑"></a>方法监听解绑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, fn)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-number">22</span>);<br>    div.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,fn);<span class="hljs-comment">//解绑</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>事件流描述的是从页面中接收事件的顺序</p><p>事件发送时会在元素节点之间按照特点的顺序传播，这个传播过程即为DOM事件流</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20210102144410921.png" alt="image-20210102144410921"></p><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(e.target)  <span class="hljs-comment">//e.target返回的是触发事件的对象 点击了谁就返回谁</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>) <span class="hljs-comment">//this是绑定事件的对象 绑定了谁就返回谁</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>和<code>this</code>具有相似的对象是<code>currentTarget</code></p><p><code>e.type</code>返回事件类型 click mouseover等</p><h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.queryselector(<span class="hljs-string">&#x27;a&#x27;</span>);<br>a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    e.preventDefault(); <span class="hljs-comment">//阻止默认行为</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><p><code>stopPropagation()</code> 方法</p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>不是每个子节点单独设置事件监听器，而是将事件监听器放在父节点上，然后运用冒泡原理影响设置每个子节点</p><p>只操作一次DOM，提高程序的性能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span><br>        <span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>        ul.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// alert(&#x27;知否知否，点我应有弹框在手！&#x27;);</span><br>            <span class="hljs-comment">// e.target 这个可以得到我们点击的对象</span><br>            e.target.style.backgroundColor = <span class="hljs-string">&#x27;pink&#x27;</span>;<br>        &#125;)<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="鼠标事件补充"><a href="#鼠标事件补充" class="headerlink" title="鼠标事件补充"></a>鼠标事件补充</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-comment">// 1. contextmenu 我们可以禁用右键菜单</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;contextmenu&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>                e.preventDefault();<br>            &#125;)<br>            <span class="hljs-comment">// 2. 禁止选中文字 selectstart</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;selectstart&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            e.preventDefault();<br><br>        &#125;)<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">script&gt;<br>        <span class="hljs-comment">// 鼠标事件对象 MouseEvent</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// 1. client 鼠标在可视区的x和y坐标</span><br>            <span class="hljs-built_in">console</span>.log(e.clientX);<br>            <span class="hljs-built_in">console</span>.log(e.clientY);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------&#x27;</span>);<br><br>            <span class="hljs-comment">// 2. page 鼠标在页面文档的x和y坐标</span><br>            <span class="hljs-built_in">console</span>.log(e.pageX);<br>            <span class="hljs-built_in">console</span>.log(e.pageY);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;---------------------&#x27;</span>);<br><br>            <span class="hljs-comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span><br>            <span class="hljs-built_in">console</span>.log(e.screenX);<br>            <span class="hljs-built_in">console</span>.log(e.screenY);<br><br>        &#125;)<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 常用的键盘事件</span><br>        <span class="hljs-comment">//1. keyup 按键弹起的时候触发 </span><br>        <span class="hljs-comment">// document.onkeyup = function() &#123;</span><br>        <span class="hljs-comment">//         console.log(&#x27;我弹起了&#x27;);</span><br><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我弹起了&#x27;</span>);<br>        &#125;)<br><br>        <span class="hljs-comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我按下了press&#x27;</span>);<br>            &#125;)<br>            <span class="hljs-comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我按下了down&#x27;</span>);<br>            &#125;)<br>            <span class="hljs-comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span><br></code></pre></td></tr></table></figure><p>###键盘事件对象</p><p>keyup和keydown事件不区分字母大小写 </p><p>keypress区分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span><br>        <span class="hljs-comment">// 1. 我们的keyup 和keydown事件不区分字母大小写  a 和 A 得到的都是65</span><br>        <span class="hljs-comment">// 2. 我们的keypress 事件 区分字母大小写  a  97 和 A 得到的是65</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(e);</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;up:&#x27;</span> + e.keyCode);<br>            <span class="hljs-comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span><br>            <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">65</span>) &#123;<br>                alert(<span class="hljs-string">&#x27;您按下的a键&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                alert(<span class="hljs-string">&#x27;您没有按下a键&#x27;</span>)<br>            &#125;<br><br>        &#125;)<br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(e);</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;press:&#x27;</span> + e.keyCode);<br><br>        &#125;)<br></code></pre></td></tr></table></figure><h3 id="案例-：快递单号查询"><a href="#案例-：快递单号查询" class="headerlink" title="案例 ：快递单号查询"></a>案例 ：快递单号查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;search&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;con&quot;</span>&gt;&lt;/div&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;请输入您的快递单号&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;jd&quot;</span>&gt;<br>    &lt;/div&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> con = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.con&#x27;</span>);<br>        <span class="hljs-keyword">var</span> jd_input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.jd&#x27;</span>);<br>        jd_input.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-comment">//只能用`keyup`,不能用`keydown`和`keypress`，因为这两个在文本框里面的特点：他们两个事件触发的时候，文字还没有落入文本框中</span><br>            <span class="hljs-comment">//keyup事件因为是键盘弹起来才触发事件，文字以及落入文本框中</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                con.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                con.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;<br>                con.innerText = <span class="hljs-built_in">this</span>.value;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECMAScript学习</title>
    <link href="/2021/01/01/ECMAScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/01/01/ECMAScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1、</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<span class="hljs-comment">//创建空数组</span><br><span class="hljs-comment">//利用数组自变量创建数组（更常用）</span><br><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-keyword">var</span> user_Name = [<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-string">&#x27;大黄&#x27;</span>, <span class="hljs-string">&#x27;瑞奇&#x27;</span>];<br><span class="hljs-keyword">var</span> arry1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;pink&#x27;</span> ,<span class="hljs-literal">true</span>];<span class="hljs-comment">//可以存储任何类型的数组元素</span><br></code></pre></td></tr></table></figure><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><h3 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h3><p>索引号从0开始</p><p>没有这个数组元素是，返回undefined</p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>用for循环；</p><p>数组名长度获取：<code>arr.length</code>,获取到的是元素的个数，而不是索引号的最后一位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 案例，将数组转换成字符串</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;pink&#x27;</span>];<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;arr.length; i++)<br>    &#123;<br>        str +=arr[i];<br>    &#125;<br><span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></table></figure><h2 id="新增数组"><a href="#新增数组" class="headerlink" title="新增数组"></a>新增数组</h2><p><code>arr.length = 5</code>可以直接修改数组长度，没给的值为<code>undefined</code></p><p>新增数组元素 修改索引号 追加数组元素，或替换原来的元素</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230120757636.png" alt="image-20201230120757636"></p><h3 id="例子：筛选数组"><a href="#例子：筛选数组" class="headerlink" title="例子：筛选数组"></a>例子：筛选数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 删选大于等于10的数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;arr.length;i++)&#123;<br>    <span class="hljs-keyword">if</span> (arr[i]&gt;=<span class="hljs-number">10</span>)&#123;<br>        newArr = newArr[newArr.length] = arr[i]; <span class="hljs-comment">//javasript数组特性，数组自动增长</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例子：实现冒泡排序"><a href="#例子：实现冒泡排序" class="headerlink" title="例子：实现冒泡排序"></a>例子：实现冒泡排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">50</span>, <span class="hljs-number">532</span>, <span class="hljs-number">7</span>, <span class="hljs-number">678</span>,<span class="hljs-number">532</span>,<span class="hljs-number">811545</span>,<span class="hljs-number">5412</span>,<span class="hljs-number">5</span>];<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span> ; j&lt;arr.length-<span class="hljs-number">1</span>; j++) &#123;<span class="hljs-comment">//外层循环次数</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>-j;  i++) &#123;<span class="hljs-comment">// 内层循环次数，注意循环次数</span><br>               <span class="hljs-keyword">if</span>(arr[i]&gt;arr[i+<span class="hljs-number">1</span>])<br>               &#123;<br>                   temp = arr[i];<br>                   arr[i] = arr[i+<span class="hljs-number">1</span>];<br>                   arr[i+<span class="hljs-number">1</span>] = temp;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><h1 id="JavaScript作用域"><a href="#JavaScript作用域" class="headerlink" title="JavaScript作用域"></a>JavaScript作用域</h1><p>提高程序的可靠性，减少命名冲突</p><h2 id="全局和局部作用域"><a href="#全局和局部作用域" class="headerlink" title="全局和局部作用域"></a>全局和局部作用域</h2><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><p>整个script标签或整个js文件</p><p>全局变量；特殊情况，如果一个变量在函数内部没有声明直接赋值也是全局变量</p><p>全局变量在浏览器关闭才会销毁，比较占内存</p><h3 id="局部（函数作用域）"><a href="#局部（函数作用域）" class="headerlink" title="局部（函数作用域）"></a>局部（函数作用域）</h3><p>在函数内部起作用</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>内部函数访问访问外部函数的变量采用的链式查找（就近原则）</p><h2 id="JavaScript预解析"><a href="#JavaScript预解析" class="headerlink" title="JavaScript预解析"></a>JavaScript预解析</h2><p>JavaScript先将代码进行预解析，然后再执行</p><p>预解析：预解析即时将所以var和function提升到当前作用域的最前面，然后从上到下执行</p><h3 id="变量预解析"><a href="#变量预解析" class="headerlink" title="变量预解析"></a>变量预解析</h3><p>把所有变量的<code>声明</code>提升到当前作用域的最前面，而不是将其赋值提升到。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//例如</span><br><span class="hljs-built_in">console</span>.log(num)<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//相当于</span><br><span class="hljs-keyword">var</span> num;<br><span class="hljs-built_in">console</span>.log(num);<br>num = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//所以代码输出的undefined</span><br></code></pre></td></tr></table></figure><h3 id="函数预解析"><a href="#函数预解析" class="headerlink" title="函数预解析"></a>函数预解析</h3><p>将函数声明提升到当前作用域最前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fun();<br><span class="hljs-keyword">var</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;22&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//报错，fun为undefined</span><br><span class="hljs-comment">//执行步骤为</span><br><span class="hljs-keyword">var</span> fun;<br>fun();<br>fun =<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;22&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//经典案例</span><br>f1();<br><span class="hljs-built_in">console</span>.log(c);<br><span class="hljs-built_in">console</span>.log(b);<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = b = c = <span class="hljs-number">9</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(c);<br>&#125;<br><span class="hljs-comment">//--这里就相当于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a ;<span class="hljs-comment">//而这里的a就相当于局部变量， 而b，c为全局变量</span><br>    b = c =<span class="hljs-number">9</span>;<br>    a = <span class="hljs-number">9</span>;<br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-built_in">console</span>.log(c);<br>&#125;<br>f1();<br><span class="hljs-built_in">console</span>.log(c);<br><span class="hljs-built_in">console</span>.log(b);<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-comment">/*所以打印结果为：9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">undefined</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="JavaScript面向对象"><a href="#JavaScript面向对象" class="headerlink" title="JavaScript面向对象"></a>JavaScript面向对象</h1><p>在JavaScript中，对象是一组无序的相关属性的方法和方法的集合，所有事物都是对象，例如字符串，数值，数组，函数等</p><p>JavaScript一切皆对象</p><p>例如保存一个人的完整信息</p><h2 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h2><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p><code>var obj=&#123;&#125;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    username:<span class="hljs-string">&#x27;张三丰&#x27;</span>,<br>    age:<span class="hljs-number">18</span>,<br>    sex:<span class="hljs-string">&#x27;man&#x27;</span>,<br>    <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hi&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用对象属性</span><br>方法<span class="hljs-number">1</span>：<span class="hljs-built_in">console</span>.log(obj.username);<br>方法<span class="hljs-number">2</span>：对象名[<span class="hljs-string">&#x27;属性名&#x27;</span>]<br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-string">&#x27;age&#x27;</span>]);<br><span class="hljs-comment">//调用对象方法</span><br>obj.sayHi();<br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230143848150.png" alt="image-20201230143848150"></p><h3 id="new创建对象"><a href="#new创建对象" class="headerlink" title="new创建对象"></a>new创建对象</h3><p><code>var obj = new Object();</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>obj.uname = <span class="hljs-string">&#x27;张三丰&#x27;</span>;<br>obj.age = <span class="hljs-number">18</span>;<br>obj.sex = <span class="hljs-string">&#x27;man&#x27;</span>;<br>obj.sayHi()&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hi~&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><p>为什么要使用构造函数创建对象？</p><p>前两种方式只能一次创建一个对象</p><p>构造函数就是把我们对象里面一些相同的属性和方法抽象出来封装到函数里面                                                                                                                </p><p>例子：创建四大天王对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> 构造函数名(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.属性 = 值;<br>    <span class="hljs-built_in">this</span>.方法 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">new</span> 构造函数名();<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname,age,sex</span>)</span>&#123;   <span class="hljs-comment">//构造函数首字母需大写（规范）</span><br>    <span class="hljs-built_in">this</span>.name = uname;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>    <span class="hljs-built_in">this</span>.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sing_Name</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(sing_Name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;规范&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;男&#x27;</span>);<br>ldh.sing(<span class="hljs-string">&quot;冰雨&quot;</span>);<br> <span class="hljs-comment">//构造函数首字母需大写（规范）</span><br><span class="hljs-comment">//构造函数不需要return 就可以返回结果</span><br><span class="hljs-comment">//调用构造函数必须使用new</span><br><span class="hljs-comment">//我们只要new Star()就创建了一个对象</span><br><span class="hljs-comment">//属性和方法前面必须添加this</span><br></code></pre></td></tr></table></figure><h2 id="构造函数与对象的相互联系"><a href="#构造函数与对象的相互联系" class="headerlink" title="构造函数与对象的相互联系"></a>构造函数与对象的相互联系</h2><p>构造函数抽象了某些事物的公共部分，封装在函数里面，泛指某一大类  类似于C++中的类</p><p>对象：特指某一个具体事物，利用构造函数创建对象的方法也称为对象实例化</p><h2 id="new关键词在其中起的作用"><a href="#new关键词在其中起的作用" class="headerlink" title="new关键词在其中起的作用"></a>new关键词在其中起的作用</h2><p>1、new 构造函数可以在内存中创建一个空的对象，</p><p>2、this 就会指向刚才所创建的空的对象</p><p>3、执行够着函数里面的代码，给这个空对象添加属性和方法</p><p>4、返回这个对象</p><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><p>通过for in循环对对象进行遍历</p><p>for(变量 in 对象){</p><p>}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hero</span>(<span class="hljs-params">hero_Name,hero_Blood,hero_Attack</span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name = hero_Name;<br>            <span class="hljs-built_in">this</span>.blood = hero_Blood;<br>            <span class="hljs-built_in">this</span>.attack = hero_Attack;<br>            <span class="hljs-built_in">this</span>.sayWord = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">word</span>)</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(word);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> vn = <span class="hljs-keyword">new</span> Hero(<span class="hljs-string">&#x27;薇恩&#x27;</span>, <span class="hljs-number">900</span>,<span class="hljs-number">80</span>);<br>        <span class="hljs-keyword">var</span> Galen = <span class="hljs-keyword">new</span> Hero(<span class="hljs-string">&#x27;盖伦&#x27;</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">70</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> vn)&#123;  <br>            <span class="hljs-built_in">console</span>.log(k);<span class="hljs-comment">//得到属性名</span><br>            <span class="hljs-built_in">console</span>.log(vn[k]);<span class="hljs-comment">//得到属性值</span><br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="JavaScript内置对象"><a href="#JavaScript内置对象" class="headerlink" title="JavaScript内置对象"></a>JavaScript内置对象</h2><p>JavaScript中对象分为：自定义对象，内置对象，浏览器对象</p><p>内置对象最常用的有：Math、Data、Array、String</p><h3 id="查阅MDN文档"><a href="#查阅MDN文档" class="headerlink" title="查阅MDN文档"></a>查阅MDN文档</h3><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 利用对象封装自己的数学对象  里面有PI的最大值和最小值</span><br><span class="hljs-keyword">var</span> myMath = &#123;<br>    PI:<span class="hljs-number">3.141592653</span>,<br>    max:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> max = aruguments[<span class="hljs-number">0</span>];<span class="hljs-comment">//arguments数组表示函数的形参</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; aruguments.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(aruguments[i]&gt;max)<br>                max = <span class="hljs-built_in">arguments</span>[i];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="random-函数"><a href="#random-函数" class="headerlink" title="random())函数"></a>random())函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.random());<span class="hljs-comment">//获取0到1之间的随机浮点数</span><br><span class="hljs-comment">//得到一个两数之间的随机数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomArbitrary</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() * (max - min) + min;<br>&#125;<br><span class="hljs-comment">//得到一个两数之间的随机整数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomInt</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  min = <span class="hljs-built_in">Math</span>.ceil(min);<br>  max = <span class="hljs-built_in">Math</span>.floor(max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min)) + min; <span class="hljs-comment">//不含最大值，含最小值</span><br>&#125;<br><span class="hljs-comment">//得到一个两数之间的随机整数，包括两个数在内</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomIntInclusive</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  min = <span class="hljs-built_in">Math</span>.ceil(min);<br>  max = <span class="hljs-built_in">Math</span>.floor(max);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min + <span class="hljs-number">1</span>)) + min; <span class="hljs-comment">//含最大值，含最小值 </span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p>Date()日期对象是一个构造函数 必须使用new来调用创建我们的日期对象</p><p><code>var date = new Date();</code></p><p>1、没有参数时，返回当前时间</p><p>2、参数的常用写法</p><p><code>var date = new Date(2019,10,1);</code></p><p><code>var date = new Date(&#39;2019-10-1 8:8:8&#39;);</code>2019年10月1日 08:08:08</p><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//返回当前年</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.log(date.getFullYear());<span class="hljs-comment">//返回当前时间年份</span><br><span class="hljs-built_in">console</span>.log(date.getMonth()+<span class="hljs-number">1</span>);<span class="hljs-comment">//比实际要少一个月</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230174936965.png" alt="image-20201230174936965"></p><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><h4 id="检测是否为数组的两种方式"><a href="#检测是否为数组的两种方式" class="headerlink" title="检测是否为数组的两种方式"></a>检测是否为数组的两种方式</h4><p><code>arr instanceof Array;</code></p><p><code>Arr.isArray(arr);</code></p><h4 id="添加数组元素"><a href="#添加数组元素" class="headerlink" title="添加数组元素"></a>添加数组元素</h4><p>1、push()方法，在数组的末尾添加一个或多个数组元素</p><p>push完毕后，返回的结果时数组的长度</p><p>2、unshift(),在数组的最前面的添加元素</p><h4 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h4><p>1、pop()方法 可以删除数组的最后一个元素</p><p>一次只能删除一个元素</p><p>返回的时删除的那个元素</p><p>2、shift()方法 可以删除数组的第一个元素</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230184102813.png" alt="image-20201230184102813"></p><h4 id="数组翻转和排序"><a href="#数组翻转和排序" class="headerlink" title="数组翻转和排序"></a>数组翻转和排序</h4><p>1、数组反转</p><p><code>array.reverse();</code></p><p>2、数组排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">77</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123; <span class="hljs-comment">//要用sort实现排序 必须这样写，否则有问题</span><br>    <span class="hljs-keyword">return</span> a-b;<span class="hljs-comment">//按照升序排序</span><br>&#125;)<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">77</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>];<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123; <span class="hljs-comment">//要用sort实现排序 必须这样写，否则有问题</span><br>    <span class="hljs-keyword">return</span> a-b;<span class="hljs-comment">//按照降序排序</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="数组索引-1"><a href="#数组索引-1" class="headerlink" title="数组索引"></a>数组索引</h4><p>1、<code>arr.indexOf(&#39;blue&#39;)</code> 返回该数组元素第一个匹配的数组索引号，没找到则返回-1</p><p>2、<code>arr.lastIndexOf(&#39;blue&#39;)</code> 返回该数组元素最后一个匹配的数组索引号，没找到则返回-1</p><p>案例：数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>];<br>       <span class="hljs-keyword">var</span> arr1 = [];<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>           <span class="hljs-keyword">if</span> (arr1.indexOf(arr[i]) == -<span class="hljs-number">1</span>) &#123;<br>               arr1.push(arr[i]);<br>           &#125;<br>       &#125;<br>       <span class="hljs-built_in">console</span>.log(arr1);<br></code></pre></td></tr></table></figure><h4 id="数组转换成字符串"><a href="#数组转换成字符串" class="headerlink" title="数组转换成字符串"></a>数组转换成字符串</h4><p><code>arr.toString();</code> 将数组转化成字符串</p><p><code>arr1.join(&#39;-&#39;);</code>可以用指定符号进行分割</p><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p><code>var str = &#39;andy&#39;;</code>简单数据类型为什么会有属性和方法？？？</p><p>所用的就是基本包装类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//把简单类型包装成复杂数据类型</span><br><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;andy&#x27;</span>);<br><span class="hljs-comment">//把临时变量的值赋给str</span><br>str = temp;<br><span class="hljs-comment">//销毁这个临时变量</span><br>temp = <span class="hljs-literal">null</span>;<br><br></code></pre></td></tr></table></figure><p>字符串三种基本包装类型<code>String</code>,<code>Number</code>和<code>Bollean</code></p><p>字符串的不可变性，比如每次字符串拼接都是要占用新的一块地址空间，只是地址变了，原来只还是存在的</p><p>字符串所有的方法 都不会修改字符串本身所有操作都是返回新的字符串</p><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><p><code>str.indexOf();</code></p><p><code>str.lastIndexOf</code></p><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230195951927.png" alt="image-20201230195951927"></p><h4 id="拼接-截取字符串"><a href="#拼接-截取字符串" class="headerlink" title="拼接 截取字符串"></a>拼接 截取字符串</h4><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201230201018644.png" alt="image-20201230201018644"></p><h4 id="替换以及转换字符串"><a href="#替换以及转换字符串" class="headerlink" title="替换以及转换字符串"></a>替换以及转换字符串</h4><p><code>replace(&#39;被替换字符&#39;,&#39;替换为的字符&#39;)</code></p><h1 id="js简单数据类型和复杂数据类型"><a href="#js简单数据类型和复杂数据类型" class="headerlink" title="js简单数据类型和复杂数据类型"></a>js简单数据类型和复杂数据类型</h1><p>简单数据类型又叫做值类型，复杂数据类型叫做引用类型</p><p>例如<code>string</code>、<code>number、</code>boolean<code>、undefinded、·null</code></p><p>简单数据类型：在存储中存储的是数据本身</p><p>特殊情况：null返回的是一个空的对象，当有个变量要存储变量，但没想好要存啥，先可以赋个<code>null</code></p><p>简单数据类型存储在栈里面</p><p>复杂数据类型，用<code>new</code>关键字声明的变量</p><p>堆里面存储的是复杂数据类型的地址，而数据是存储在堆里面的，这个地址指向堆里面的数据</p><p>复杂数据类型传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(x.name);<span class="hljs-comment">//刘德华</span><br>    x.name = <span class="hljs-string">&quot;张学友&quot;</span>;  <br>    <span class="hljs-built_in">console</span>.log(x.name);<span class="hljs-comment">//张学友</span><br>&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;刘德华&quot;</span>);<br><span class="hljs-built_in">console</span>.log(p.name);<span class="hljs-comment">//刘德华</span><br>f1(p);<span class="hljs-comment">// 执行f1()这个函数，改变了原来这个对象中的内容 ，要与简单数据传参相区别</span><br><span class="hljs-built_in">console</span>.log(p.name);<span class="hljs-comment">//张学友</span><br></code></pre></td></tr></table></figure><p>函数的形参可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给形参，形参和实参保存的是同一个堆地址，所以操作的是同一个对象</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础ECMA语法篇(2)</title>
    <link href="/2020/12/30/2/"/>
    <url>/2020/12/30/2/</url>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-语法2"><a href="#ECMAScript-语法2" class="headerlink" title="ECMAScript 语法2"></a>ECMAScript 语法2</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><h3 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h3><ul><li>操作符是一个对象，返回<code>false</code> </li><li>操作符是一个空字符串，返回 <code>true</code></li><li>操作符是非空字符串，返回<code>false</code></li><li>操作符是数值0，返回<code>true</code></li><li>操作符是任意非0的数值，返回<code>false</code></li><li>操作数是<code>null</code>，返回<code>true</code></li><li>操作数是<code>NaN</code>，返回<code>true</code>； </li><li>操作数是<code>undefined</code>，返回<code>true</code></li></ul><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h3><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><h3 id="求模"><a href="#求模" class="headerlink" title="求模"></a>求模</h3><h3 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h3><ul><li>如果两个操作数都是字符串，则将第二个操作数与第一个操作数拼接起来；</li><li>如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接起来</li></ul><h3 id="减法运算符"><a href="#减法运算符" class="headerlink" title="减法运算符"></a>减法运算符</h3><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><h3 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h3><p>​    相等和不相等——先转换再比较；</p><p>​    全等和不全等——仅比较而不转换</p><p>除了在比较之前不转换操作数之外，全等和不全等操作符与相等和不相等操作符没有什么区别。全等操作符由3个等于号（===）表示，它只在两个操作数未经转换就相等的情况下返回true，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reslut1 = (<span class="hljs-string">&quot;55&quot;</span> == <span class="hljs-number">55</span>); <span class="hljs-comment">//true 转换后相等</span><br><span class="hljs-keyword">var</span> reslut2 = (<span class="hljs-string">&quot;55&quot;</span> ===<span class="hljs-number">55</span>); <span class="hljs-comment">//false ,不同类型值不想等</span><br></code></pre></td></tr></table></figure><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p><code>variable = boolean_expression?true_value:false_value</code>;</p><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p><code>var num1 =1, num2 =2 ,num3 = 3</code></p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p><code>while</code>,<code>do while</code>, <code>for</code>这些都大概相同</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>比较不同的就是<code>for in</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (property <span class="hljs-keyword">in</span> expression) startment<br><span class="hljs-comment">//例如</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> propname <span class="hljs-keyword">in</span> <span class="hljs-built_in">window</span>)&#123;<br>    <span class="hljs-built_in">document</span>.write(propname);<br>&#125;<br><span class="hljs-comment">//我们使用for-in循环来显示了BOM中window对象的所有属性。每次执行循环时，都会将window对象中存在的一个属性名赋值给变量propName。这个过程会一直持续到对象中的所有属性都被枚举一遍为止。与for语句类似，这里控制语句中的var操作符也不是必需的</span><br></code></pre></td></tr></table></figure><h3 id="label语句"><a href="#label语句" class="headerlink" title="label语句"></a>label语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">start:<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;count; i++)&#123;<br>    alert(i);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//例如函数本身定义时参数只有一个，而我们可以在调用是有多个参数</span><br><span class="hljs-comment">//本身函数有多个参数，但调用时可以只有一个参数，没传递参数赋值为undefined</span><br><span class="hljs-comment">//默认参数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">power</span>(<span class="hljs-params">base, exponent = <span class="hljs-number">2</span></span>)</span>&#123;<br>    ....<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(power(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><p><code>return</code>后面没有表达式将返回<code>undinfine</code>,没有<code>retuen</code>语句也返回<code>undefined</code></p><h3 id="理解参数"><a href="#理解参数" class="headerlink" title="理解参数"></a>理解参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//通过访问argument对象的length属性可以获知有多少个参数传给了函数，如下面事例</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">howManyArgs</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-built_in">arguments</span>.length);<br>&#125;<br>howManArgs(<span class="hljs-string">&quot;string&quot;</span>,<span class="hljs-number">45</span>);<span class="hljs-comment">//2</span><br>howManyArgs(<span class="hljs-string">&quot;4&quot;</span>);<span class="hljs-comment">//0</span><br>howManyArgs(<span class="hljs-number">12</span>);<span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><h3 id="Javascript函数没有重载"><a href="#Javascript函数没有重载" class="headerlink" title="Javascript函数没有重载"></a>Javascript函数没有重载</h3><h2 id="基本类型与引用类型的值"><a href="#基本类型与引用类型的值" class="headerlink" title="基本类型与引用类型的值"></a>基本类型与引用类型的值</h2><p>ECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。</p><p>在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。第3章讨论了5种基本数据类型：Undefined、Null、Boolean、Number和String。这5种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。</p><p>引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的。</p><p>对于引用类型的值，我们可以为其添加属性和方法，也可以改变和删除其属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>person.name = <span class="hljs-string">&quot;Niki&quot;</span>;<br>alert(person.name);<br><span class="hljs-comment">/*以上代码创建了一个对象并将其保存在了变量person中。然后，我们为该对象添加了一个名为name的属性，并将字符串值&quot;Nicholas&quot;赋给了这个属性。</span><br><span class="hljs-comment">如果对象不被销毁或者这个属性不被删除，则这个属性将一直存在。*/</span><br><br><br><span class="hljs-comment">//然而，我们不能给基本类型的值添加属性</span><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Niko&quot;</span>;<br>name.age = <span class="hljs-number">27</span>;<br>alert(name.age); <span class="hljs-comment">//undefine</span><br></code></pre></td></tr></table></figure><h2 id="复制变量值（按值和按引用）"><a href="#复制变量值（按值和按引用）" class="headerlink" title="复制变量值（按值和按引用）"></a>复制变量值（按值和按引用）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> num2 = name1;<br><span class="hljs-comment">//只是用num2初始化num1,以后这两个变量相互独立</span><br><br></code></pre></td></tr></table></figure><p>然而当一个变量复制引用类型的值时，同样也会将存储在变量对象的值复制一份到为新变量分配的空间中。不同的是，这个值复制一份放到为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另一个变量，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-keyword">var</span> obj2 = obj1;<br>obj1.name = <span class="hljs-string">&quot;Niko&quot;</span>;<br>alert(obj2.name); <span class="hljs-comment">//Niko </span><br><span class="hljs-comment">//obj1与obj2指向同一个对象</span><br></code></pre></td></tr></table></figure><h2 id="参数传递-所有的参数都是按值传递的"><a href="#参数传递-所有的参数都是按值传递的" class="headerlink" title="参数传递(所有的参数都是按值传递的)"></a>参数传递(所有的参数都是按值传递的)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTen</span>(<span class="hljs-params">num</span>)</span>&#123;<br>    num += <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">const</span> = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> result = addTen(count);<br>alert(<span class="hljs-keyword">const</span>) <span class="hljs-comment">//20 值不改变</span><br>alert(reslut) <span class="hljs-comment">//值为30 </span><br><span class="hljs-comment">//ECMAScript中所有函数的参数都是按值传递的。也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样</span><br></code></pre></td></tr></table></figure><h2 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof操作符是确定一个变量是字符串、数值、布尔值，还是undefined的最佳工具。如果变量的值是一个对象或null，则typeof操作符会像下面例子中所示的那样返回”object”</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>如果变量是给定引用类型（根据它的原型链来识别；第6章将介绍原型链）的实例，那么instanceof操作符就会返回true。请看下面的例子：</p><h2 id="执行环境和作用域"><a href="#执行环境和作用域" class="headerlink" title="执行环境和作用域"></a>执行环境和作用域</h2><p>每个执行环境都有一个与之相关联的对象，环境中定义的所以变量和函数都保存在这个对象中</p><h3 id="全局执行环境"><a href="#全局执行环境" class="headerlink" title="全局执行环境"></a>全局执行环境</h3><p>全局执行环境是最外围的一个执行环境。根据ECMAScript实现所在的宿主环境不同，表示执行环境的对象也不一样。在Web浏览器中，全局执行环境被认为是window对象（第7章将详细讨论），因此所有全局变量和函数都是作为window对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出——例如关闭网页或浏览器——时才会被销毁）。</p><p>请看下例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> color = <span class="hljs-string">&quot;blue&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeColor</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> anotherColor = <span class="hljs-string">&quot;red&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swapColor</span></span>&#123;<br>        <span class="hljs-keyword">var</span> tempColor = anotherColor;<br>        anotherColor = color;<br>        color = tempColor;<br>        <span class="hljs-comment">//可以访问到color,anotherColor和tempColor</span><br>    &#125;<br>    <span class="hljs-comment">// 可以访问color和anotherColor</span><br>&#125;<br><span class="hljs-comment">// 这里只能访问到color</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h2><ul><li>try-catch的catch块</li><li>with语句</li></ul><p>待补充。。。</p><h2 id="没有块级作用域"><a href="#没有块级作用域" class="headerlink" title="没有块级作用域"></a>没有块级作用域</h2><p>–es6 新增了let块级作用域</p><h3 id="绑定和作用域"><a href="#绑定和作用域" class="headerlink" title="绑定和作用域"></a>绑定和作用域</h3><ul><li>在整个函数或块之外定义的绑定，作用域是整个程序，意味着你在任何地方都可以使用此绑定，这称为全局<code>绑定</code></li><li>在函数参数创建的绑定或在函数内声明的绑定只能在函数内引用，这称为<code>局部绑定</code></li><li><code>let</code>和<code>const</code>声明他们的块中局部可见，即时在一个该{ }局部可见，而<code>关键字</code>创建的是旧式绑定没有这个概念</li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>可以按照你的预想工作–仍然可以访问绑定的两个实例，这种能够引用封装作用域中的局部变量的特定实例的功能叫做闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wrapValue</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> locol = n;<br>    <span class="hljs-keyword">return</span><span class="hljs-function">() =&gt;</span> locol;<br>&#125;<br><span class="hljs-keyword">let</span> wrap1 = wrapValue(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">let</span> wrap2 = wrapValue(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(wrap1());<br><span class="hljs-comment">//-&gt; 1</span><br><span class="hljs-built_in">console</span>.log(wrap2());<br><span class="hljs-comment">//-&gt; 2 </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础ECMA语法篇(1)</title>
    <link href="/2020/12/29/1/"/>
    <url>/2020/12/29/1/</url>
    
    <content type="html"><![CDATA[<h1 id="ECMAJavaScript语法1"><a href="#ECMAJavaScript语法1" class="headerlink" title="ECMAJavaScript语法1"></a>ECMAJavaScript语法1</h1><h2 id="1、区分大小写"><a href="#1、区分大小写" class="headerlink" title="1、区分大小写"></a>1、区分大小写</h2><h2 id="2、标识符（即变量、函数属性的名字，函数的参数等）"><a href="#2、标识符（即变量、函数属性的名字，函数的参数等）" class="headerlink" title="2、标识符（即变量、函数属性的名字，函数的参数等）"></a>2、标识符（即变量、函数属性的名字，函数的参数等）</h2><p>—-第一个字符是是字母，下划线或$，其他字符可以是字母，下划线，美元符号或数字</p><p>命名最好使用驼峰式</p><blockquote><p>例如firstSecond、myCar、doSomethingImportant</p></blockquote><h2 id="3、注释和C一样"><a href="#3、注释和C一样" class="headerlink" title="3、注释和C一样"></a>3、注释和C一样</h2><h2 id="4、语句"><a href="#4、语句" class="headerlink" title="4、语句"></a>4、语句</h2><p>ECMAJavaScript中的语句以一个分号结尾；如果省略分号，则由解析器确定语句的结尾，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sun = a+b  <span class="hljs-comment">//可以没有分号，但推荐最好使用分号</span><br><br></code></pre></td></tr></table></figure><h2 id="4、变量"><a href="#4、变量" class="headerlink" title="4、变量"></a>4、变量</h2><p>变量为松散类型，即可以保存任意类型的变量如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> message;<br><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>;<br><span class="hljs-comment">//还可以直接赋值更改变量类型，如：</span><br>message = <span class="hljs-number">100</span>;  <span class="hljs-comment">//可以这样用，但不推荐</span><br><br></code></pre></td></tr></table></figure><p>但是，var所定义的是局部变量，只能在函数体内部才能使用如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>;<br>&#125;<br>test();<br>alert(message); <span class="hljs-comment">//错误，提示message未定义</span><br></code></pre></td></tr></table></figure><p>但是如果省略var操作符，定义的就是全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    message = <span class="hljs-string">&quot;hi&quot;</span>;<br>&#125;<br>test();<br>alert(message); <span class="hljs-comment">//正确，提示message未定义</span><br></code></pre></td></tr></table></figure><p>使用一条语句定义多个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hi&quot;</span>,<br>    found = <span class="hljs-literal">false</span>,<br>    age = <span class="hljs-number">29</span>;<br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><code>Undefined</code> 表示变量只声明了，没有定义，或者都没声明的变量</p><p><code>Null</code>,  </p><p><code>Boolean</code>,</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201228124142675.png" alt="image-20201228124142675"></p><p>其他类型的变量可以调用Boolean进行类型转换，转化规则如上表所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 运行这里的代码会报警告</span><br><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-keyword">if</span> (message)&#123;  <span class="hljs-comment">//这里的message被转换成boolean类型</span><br>        alert(<span class="hljs-string">&quot;value is true&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>Number</code>,</p><p>浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数。例如，0.1加0.2的结果不是0.3，而是0.30000000000000004。这个小小的舍入误差会导致无法测试特定的浮点数值。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(a+b==<span class="hljs-number">0.3</span>)&#123;<br>    alert(<span class="hljs-string">&quot;结果是0.3！&quot;</span>);  <span class="hljs-comment">//其实并得不到0.3</span><br>&#125;<br><span class="hljs-comment">//在这个例子中，我们测试的是两个数的和是不是等于0.3。如果这两个数是0.05和0.25，或者是0.15和0.15都不会有问题。而如前所述，如果这两个数是0.1和0.2，那么测试将无法通过。因此，永远不要测试某个特定的浮点数值。关于浮点数值计算会产生舍入误差的问题，有一点需要明确：这是使用基于IEEE754数值的浮点计算的通病，ECMAScript并非独此一家；其他使用相同数值格式的语言也存在这个问题。</span><br></code></pre></td></tr></table></figure><p>NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）。例如，在其他编程语言中，任何数值除以非数值都会导致错误，从而停止代码执行。但在ECMAScript中，任何数值除以非数值会返回NaN，因此不会影响其他代码的执行。</p><p>针对NaN的这两个特点，ECMAScript定义了isNaN()函数。这个函数接受一个参数，该参数可以是任何类型，而函数会帮我们确定这个参数是否“不是数值”。isNaN()在接收到一个值之后，会尝试将这个值转换为数值。某些不是数值的值会直接转换为数值，例如字符串”10”或Boolean值。而任何不能被转换为数值的值都会导致这个函数返回true。</p><p><img src="C:\Users\Yanbo\AppData\Roaming\Typora\typora-user-images\image-20201228125525947.png" alt="image-20201228125525947"></p><h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><p>有3个函数可以把非数值转换为数值：Number()、parseInt()和parseFloat()。第一个函数，即转型函数Number()可以用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。</p><ul><li><ul><li><pre><code>Number()`函数的转换规则- 如果是`Boolean`值，`true`和`false`将分别被转换为1和0。- 如果是`null`值，返回0。- 如果是`undefined`，返回`NaN`。- 如果是对象，则调用对象的`valueOf()`方法，然后依照前面的规则转换返回的值。如果转换的结果是`NaN`，则调用对象的`toString()`方法，然后再次依照前面的规则转换返回的字符串值- 如果是字符串，遵循下列规则：   - 如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即&quot;1&quot;会变成1, &quot;123&quot;会变成123，而&quot;011&quot;会变成11（注意：前导的零被忽略了）；  - 如果字符串中包含有效的浮点格式，如&quot;1.1&quot;，则将其转换为对应的浮点数值（同样，也会忽略前导零）；  - 如果字符串中包含有效的十六进制格式，例如&quot;0xf&quot;，则将其转换为相同大小的十进制整数值；  - 如果字符串是空的（不包含任何字符），则将其转换为0；  - 如果字符串中包含除上述格式之外的字符，则将其转换为NaN。<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>    <br><br>`parseInt()`函数的转换规则<br><br>使用`parseInt()`函数时，更多看其是否符合数值模式。忽略字符串前的空格，知道找到第一个非空格字符。如果第一个字符不是数字字符或者负号，`parseInt()`就会返回NaN；也就是说，用`parseInt()`转换空字符串会返回`NaN`（Number()对空字符返回<span class="hljs-number">0</span>）<br><br>如果第一个字符是数字字符，`parseInt()`会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。例如，`&quot;<span class="hljs-number">1234</span>blue<span class="hljs-string">&quot;`会被转换为`1234`，因为&quot;</span>blue<span class="hljs-string">&quot;会被完全忽略。类似地，`&quot;22.5&quot;</span>`会被转换为`22`，因为小数点并不是有效的数字字符。<br><br>`String`<br><br>`ECMAScript`中的字符串是`不可变`的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量<br><br>`Object`(对象)<br><br>ECMAScript中的对象其实就是一组数据和功能的集合。对象可以通过执行<span class="hljs-keyword">new</span>操作符后跟要创建的对象类型的名称来创建。而创建Object类型的实例并为其添加属性和（或）方法，就可以创建自定义对象，如下所示：<br><br>`var o = <span class="hljs-keyword">new</span> Object`<br><br>- ```<br>  Object的每个实例都具有下列属性和方法。<br>  <br>  - `constructor`：保存着用于创建当前对象的函数。对于前面的例子而言，构造函数（constructor）就是`Object()`<br>  - `hasOwnProperty(propertyName)`：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名`（propertyName）`必须以字符串形式指定（例如：`o.hasOwnProperty(<span class="hljs-string">&quot;name&quot;</span>)`。<br>  - `isPrototypeOf(object)：`用于检查传入的对象是否是当前对象的原型<br>  - `propertyIsEnumerable(propertyName)：`用于检查给定的属性是否能够使用for-in语句（本章后面将会讨论）来枚举。与`hasOwnProperty()`方法一样，作为参数的属性名必须以字符串形式指定。<br>  toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。❏ toString()：返回对象的字符串表示。❏ valueOf()：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习区</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
